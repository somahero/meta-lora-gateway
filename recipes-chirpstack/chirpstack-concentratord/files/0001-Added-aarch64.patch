From 0f9b1a33427c64b63e52ab1ad5b31696600a405e Mon Sep 17 00:00:00 2001
From: Soma <soma@ding.hu>
Date: Mon, 13 Sep 2021 18:33:58 +0200
Subject: [PATCH] Added aarch64

Signed-off-by: Soma <soma@ding.hu>
---
 0001-Bump-version.patch                       |  127 +
 ...igfile-sub-command-for-sx1302-binary.patch |  366 +++
 ...t-various-gateway-stats-aggregations.patch |  652 +++++
 ...-Class-B-beacon-frequency-correction.patch |   68 +
 0002-Bump-version.patch                       |  104 +
 ...Ra-2.4-Ghz-HAL-Concentratord-version.patch | 2379 +++++++++++++++++
 ...-Class-B-beacon-frequency-correction.patch |   68 +
 ...x-mapping-bandwidth-to-actual-values.patch |   51 +
 0003-Update-dependencies.patch                |  906 +++++++
 0004-Bump-version.patch                       |  104 +
 ...t-various-gateway-stats-aggregations.patch |  652 +++++
 ...ting-the-correct-preamble-for-2.4GHz.patch |   34 +
 ...-Class-B-beacon-frequency-correction.patch |   68 +
 0006-Bump-version.patch                       |  127 +
 0007-Bump-version.patch                       |  104 +
 0008-Update-dependencies.patch                |  906 +++++++
 ...t-various-gateway-stats-aggregations.patch |  652 +++++
 ...-Class-B-beacon-frequency-correction.patch |   68 +
 Dockerfile-devel                              |   29 +-
 Makefile                                      |    8 +
 chirpstack-concentratord-2g4/Cargo.toml       |    2 +-
 chirpstack-concentratord-sx1301/Cargo.toml    |    2 +-
 chirpstack-concentratord-sx1302/Cargo.toml    |    2 +-
 gateway-id/Cargo.toml                         |    2 +-
 24 files changed, 7476 insertions(+), 5 deletions(-)
 create mode 100644 0001-Bump-version.patch
 create mode 100644 0001-Implement-configfile-sub-command-for-sx1302-binary.patch
 create mode 100644 0001-Implement-various-gateway-stats-aggregations.patch
 create mode 100644 0001-Remove-Class-B-beacon-frequency-correction.patch
 create mode 100644 0002-Bump-version.patch
 create mode 100644 0002-Implement-LoRa-2.4-Ghz-HAL-Concentratord-version.patch
 create mode 100644 0002-Remove-Class-B-beacon-frequency-correction.patch
 create mode 100644 0003-Fix-mapping-bandwidth-to-actual-values.patch
 create mode 100644 0003-Update-dependencies.patch
 create mode 100644 0004-Bump-version.patch
 create mode 100644 0004-Implement-various-gateway-stats-aggregations.patch
 create mode 100644 0005-Fix-setting-the-correct-preamble-for-2.4GHz.patch
 create mode 100644 0005-Remove-Class-B-beacon-frequency-correction.patch
 create mode 100644 0006-Bump-version.patch
 create mode 100644 0007-Bump-version.patch
 create mode 100644 0008-Update-dependencies.patch
 create mode 100644 0009-Implement-various-gateway-stats-aggregations.patch
 create mode 100644 0010-Remove-Class-B-beacon-frequency-correction.patch

diff --git a/0001-Bump-version.patch b/0001-Bump-version.patch
new file mode 100644
index 0000000..b92f181
--- /dev/null
+++ b/0001-Bump-version.patch
@@ -0,0 +1,127 @@
+From 8d5dfd431c140d11d7042c4358463372c94234c9 Mon Sep 17 00:00:00 2001
+From: Orne Brocaar <info@brocaar.com>
+Date: Fri, 7 May 2021 08:48:09 +0100
+Subject: [PATCH 1/5] Bump version.
+
+---
+ Cargo.lock                                 |  8 ++++----
+ Makefile                                   | 10 ++++++++--
+ chirpstack-concentratord-2g4/Cargo.toml    |  2 +-
+ chirpstack-concentratord-sx1301/Cargo.toml |  2 +-
+ chirpstack-concentratord-sx1302/Cargo.toml |  2 +-
+ gateway-id/Cargo.toml                      |  2 +-
+ 6 files changed, 16 insertions(+), 10 deletions(-)
+
+diff --git a/Cargo.lock b/Cargo.lock
+index 8866c53..4ceef3f 100644
+--- a/Cargo.lock
++++ b/Cargo.lock
+@@ -185,7 +185,7 @@ checksum = "baf1de4339761588bc0619e3cbc0120ee582ebb74b53b4efbf79117bd2da40fd"
+ 
+ [[package]]
+ name = "chirpstack-concentratord-2g4"
+-version = "3.2.0-test.1"
++version = "3.2.0-test.2"
+ dependencies = [
+  "chirpstack_api",
+  "chrono",
+@@ -210,7 +210,7 @@ dependencies = [
+ 
+ [[package]]
+ name = "chirpstack-concentratord-sx1301"
+-version = "3.2.0-test.1"
++version = "3.2.0-test.2"
+ dependencies = [
+  "chirpstack_api",
+  "chrono",
+@@ -235,7 +235,7 @@ dependencies = [
+ 
+ [[package]]
+ name = "chirpstack-concentratord-sx1302"
+-version = "3.2.0-test.1"
++version = "3.2.0-test.2"
+ dependencies = [
+  "chirpstack_api",
+  "chrono",
+@@ -422,7 +422,7 @@ dependencies = [
+ 
+ [[package]]
+ name = "gateway-id"
+-version = "3.2.0-test.1"
++version = "3.2.0-test.2"
+ dependencies = [
+  "clap",
+  "hex",
+diff --git a/Makefile b/Makefile
+index 66a9309..7f0c2af 100644
+--- a/Makefile
++++ b/Makefile
+@@ -1,9 +1,15 @@
+-VERSION := $(shell git describe --always |sed -e "s/^v//")
++VERSION ?= $(shell git describe --always |sed -e "s/^v//")
+ 
+-build: build-armv5-release build-armv7hf-release
++build: version build-armv5-release build-armv7hf-release
+ 
+ package: build package-kerlink package-multitech
+ 
++version:
++	sed -i 's/^version.*/version = "$(VERSION)"/g' ./chirpstack-concentratord-2g4/Cargo.toml
++	sed -i 's/^version.*/version = "$(VERSION)"/g' ./chirpstack-concentratord-sx1301/Cargo.toml
++	sed -i 's/^version.*/version = "$(VERSION)"/g' ./chirpstack-concentratord-sx1302/Cargo.toml
++	sed -i 's/^version.*/version = "$(VERSION)"/g' ./gateway-id/Cargo.toml
++
+ clean:
+ 	rm -rf dist
+ 
+diff --git a/chirpstack-concentratord-2g4/Cargo.toml b/chirpstack-concentratord-2g4/Cargo.toml
+index 2fd6587..e71c359 100644
+--- a/chirpstack-concentratord-2g4/Cargo.toml
++++ b/chirpstack-concentratord-2g4/Cargo.toml
+@@ -1,6 +1,6 @@
+ [package]
+ name = "chirpstack-concentratord-2g4"
+-version = "3.2.0-test.1"
++version = "3.2.0-test.2"
+ authors = ["Orne Brocaar <info@brocaar.com>"]
+ edition = "2018"
+ publish = false
+diff --git a/chirpstack-concentratord-sx1301/Cargo.toml b/chirpstack-concentratord-sx1301/Cargo.toml
+index 7c79f77..32d0466 100644
+--- a/chirpstack-concentratord-sx1301/Cargo.toml
++++ b/chirpstack-concentratord-sx1301/Cargo.toml
+@@ -1,6 +1,6 @@
+ [package]
+ name = "chirpstack-concentratord-sx1301"
+-version = "3.2.0-test.1"
++version = "3.2.0-test.2"
+ authors = ["Orne Brocaar <info@brocaar.com>"]
+ edition = "2018"
+ publish = false
+diff --git a/chirpstack-concentratord-sx1302/Cargo.toml b/chirpstack-concentratord-sx1302/Cargo.toml
+index 6848856..0fdb0ce 100644
+--- a/chirpstack-concentratord-sx1302/Cargo.toml
++++ b/chirpstack-concentratord-sx1302/Cargo.toml
+@@ -1,6 +1,6 @@
+ [package]
+ name = "chirpstack-concentratord-sx1302"
+-version = "3.2.0-test.1"
++version = "3.2.0-test.2"
+ authors = ["Orne Brocaar <info@brocaar.com>"]
+ edition = "2018"
+ publish = false
+diff --git a/gateway-id/Cargo.toml b/gateway-id/Cargo.toml
+index b6b49ac..978eb2c 100644
+--- a/gateway-id/Cargo.toml
++++ b/gateway-id/Cargo.toml
+@@ -1,6 +1,6 @@
+ [package]
+ name = "gateway-id"
+-version = "3.2.0-test.1"
++version = "3.2.0-test.2"
+ authors = ["Orne Brocaar <info@brocaar.com>"]
+ edition = "2018"
+ publish = false
+-- 
+2.25.1
+
diff --git a/0001-Implement-configfile-sub-command-for-sx1302-binary.patch b/0001-Implement-configfile-sub-command-for-sx1302-binary.patch
new file mode 100644
index 0000000..5efe983
--- /dev/null
+++ b/0001-Implement-configfile-sub-command-for-sx1302-binary.patch
@@ -0,0 +1,366 @@
+From 56f7ca7f49caafa8644c8716ba2eaf550c8a554b Mon Sep 17 00:00:00 2001
+From: Orne Brocaar <info@brocaar.com>
+Date: Tue, 27 Apr 2021 10:38:21 +0100
+Subject: [PATCH 01/10] Implement configfile sub-command for sx1302 binary.
+
+---
+ Cargo.lock                                    |   1 +
+ .../src/cmd/configfile.rs                     |  18 ++--
+ .../src/config/mod.rs                         |   2 +-
+ chirpstack-concentratord-sx1302/Cargo.toml    |   1 +
+ .../src/cmd/configfile.rs                     | 101 ++++++++++++++++++
+ .../src/cmd/mod.rs                            |   1 +
+ .../src/cmd/{root/mod.rs => root.rs}          |   0
+ .../src/config/mod.rs                         |  61 +++++++++--
+ chirpstack-concentratord-sx1302/src/main.rs   |  10 +-
+ 9 files changed, 172 insertions(+), 23 deletions(-)
+ create mode 100644 chirpstack-concentratord-sx1302/src/cmd/configfile.rs
+ rename chirpstack-concentratord-sx1302/src/cmd/{root/mod.rs => root.rs} (100%)
+
+diff --git a/Cargo.lock b/Cargo.lock
+index f1fadfb..670248e 100644
+--- a/Cargo.lock
++++ b/Cargo.lock
+@@ -215,6 +215,7 @@ dependencies = [
+  "chirpstack_api",
+  "chrono",
+  "clap",
++ "handlebars",
+  "hex",
+  "humantime-serde",
+  "lazy_static",
+diff --git a/chirpstack-concentratord-sx1301/src/cmd/configfile.rs b/chirpstack-concentratord-sx1301/src/cmd/configfile.rs
+index b2a6627..5365654 100644
+--- a/chirpstack-concentratord-sx1301/src/cmd/configfile.rs
++++ b/chirpstack-concentratord-sx1301/src/cmd/configfile.rs
+@@ -113,15 +113,15 @@ pub fn run(config: &config::Configuration) {
+     tx_power={{ gateway.beacon.tx_power }}
+ 
+ 
+-    # Static gateway location.
+-    [gateway.location]
+-
+-      # When set to non-zero values, the static gateway location will be reported
+-      # when the gateway does not have a GNSS module or when no GNSS location fix
+-      # is available.
+-      latitude={{ gateway.location.latitude }}
+-      longitude={{ gateway.location.longitude }}
+-      altitude={{ gateway.location.altitude }}
++  # Static gateway location.
++  [gateway.location]
++
++    # When set to non-zero values, the static gateway location will be reported
++    # when the gateway does not have a GNSS module or when no GNSS location fix
++    # is available.
++    latitude={{ gateway.location.latitude }}
++    longitude={{ gateway.location.longitude }}
++    altitude={{ gateway.location.altitude }}
+ "#;
+ 
+     let reg = Handlebars::new();
+diff --git a/chirpstack-concentratord-sx1301/src/config/mod.rs b/chirpstack-concentratord-sx1301/src/config/mod.rs
+index 199dc3b..e20d251 100644
+--- a/chirpstack-concentratord-sx1301/src/config/mod.rs
++++ b/chirpstack-concentratord-sx1301/src/config/mod.rs
+@@ -96,7 +96,7 @@ pub struct Configuration {
+     pub gateway: Gateway,
+ }
+ 
+-pub fn example_configuration() -> Configuration {
++fn example_configuration() -> Configuration {
+     Configuration {
+         concentratord: Concentratord {
+             log_level: "INFO".to_string(),
+diff --git a/chirpstack-concentratord-sx1302/Cargo.toml b/chirpstack-concentratord-sx1302/Cargo.toml
+index 5ea285a..e58b993 100644
+--- a/chirpstack-concentratord-sx1302/Cargo.toml
++++ b/chirpstack-concentratord-sx1302/Cargo.toml
+@@ -24,6 +24,7 @@ syslog = "5.0"
+ prost = "0.6.1"
+ prost-types = "0.6.1"
+ signal-hook = "0.3"
++handlebars = "3.5"
+ 
+ [features]
+ default = ['zmq/vendored']
+diff --git a/chirpstack-concentratord-sx1302/src/cmd/configfile.rs b/chirpstack-concentratord-sx1302/src/cmd/configfile.rs
+new file mode 100644
+index 0000000..c5175a3
+--- /dev/null
++++ b/chirpstack-concentratord-sx1302/src/cmd/configfile.rs
+@@ -0,0 +1,101 @@
++use handlebars::Handlebars;
++
++use super::super::config;
++
++pub fn run(config: &config::Configuration) {
++    let template = r#"
++# Concentratord configuration.
++[concentratord]
++  # Log level.
++  #
++  # Valid options are:
++  #   * TRACE
++  #   * DEBUG
++  #   * INFO
++  #   * WARN
++  #   * ERROR
++  #   * OFF
++  log_level="{{ concentratord.log_level }}"
++
++  # Log to syslog.
++  #
++  # When set to true, log messages are being written to syslog instead of stdout.
++  log_to_syslog={{ concentratord.log_to_syslog }}
++
++  # Statistics interval.
++  stats_interval="{{ concentratord.stats_interval }}"
++
++  # Configuration for the (ZeroMQ based) API.
++  [concentratord.api]
++    # Event PUB socket bind.
++    event_bind="{{ concentratord.api.event_bind }}"
++
++    # Command REP socket bind.
++    command_bind="{{ concentratord.api.command_bind }}"
++
++
++# LoRa gateway configuration.
++[gateway]
++
++  # Antenna gain (dB).
++  antenna_gain={{ gateway.antenna_gain }}
++
++  # Public LoRaWAN network.
++  lorawan_public={{ gateway.lorawan_public }}
++
++  # Gateway vendor / model.
++  #
++  # This configures various vendor and model specific settings like the min / max
++  # frequency and TX gain table.
++  model="{{ gateway.model }}"
++
++  # Gateway vendor / model flags.
++  #
++  # Flag can be used to configure additional vendor / model features. The
++  # following flags can be used:
++  #
++  #   Global flags:
++  #     GNSS - Enable GNSS / GPS support
++  #     USB  - Use USB for concentrator communication (default is SPI)
++  model_flags=[{{#each gateway.model_flags}}"{{ this }},{{/each}}]
++
++
++  # LoRa concentrator configuration.
++  [gateway.concentrator]
++
++    # Multi spreading-factor channels (LoRa).
++    multi_sf_channels=[{{#each gateway.concentrator.multi_sf_channels}}
++      {{ this }},{{/each}}
++    ]
++
++    # LoRa std channel (single spreading-factor).
++    [gateway.concentrator.lora_std]
++      frequency={{ gateway.concentrator.lora_std.frequency }}
++      bandwidth={{ gateway.concentrator.lora_std.bandwidth }}
++      spreading_factor={{ gateway.concentrator.lora_std.spreading_factor }}
++
++    # FSK channel.
++    [gateway.concentrator.fsk]
++      frequency={{ gateway.concentrator.fsk.frequency }}
++      bandwidth={{ gateway.concentrator.fsk.bandwidth }}
++      datarate={{ gateway.concentrator.fsk.datarate }}
++
++
++  # Static gateway location.
++  [gateway.location]
++
++    # When set to non-zero values, the static gateway location will be reported
++    # when the gateway does not have a GNSS module or when no GNSS location fix
++    # is available.
++    latitude={{ gateway.location.latitude }}
++    longitude={{ gateway.location.longitude }}
++    altitude={{ gateway.location.altitude }}
++"#;
++
++    let reg = Handlebars::new();
++    println!(
++        "{}",
++        reg.render_template(template, config)
++            .expect("render configfile error")
++    );
++}
+diff --git a/chirpstack-concentratord-sx1302/src/cmd/mod.rs b/chirpstack-concentratord-sx1302/src/cmd/mod.rs
+index dec16f3..485ebf0 100644
+--- a/chirpstack-concentratord-sx1302/src/cmd/mod.rs
++++ b/chirpstack-concentratord-sx1302/src/cmd/mod.rs
+@@ -1 +1,2 @@
++pub mod configfile;
+ pub mod root;
+diff --git a/chirpstack-concentratord-sx1302/src/cmd/root/mod.rs b/chirpstack-concentratord-sx1302/src/cmd/root.rs
+similarity index 100%
+rename from chirpstack-concentratord-sx1302/src/cmd/root/mod.rs
+rename to chirpstack-concentratord-sx1302/src/cmd/root.rs
+diff --git a/chirpstack-concentratord-sx1302/src/config/mod.rs b/chirpstack-concentratord-sx1302/src/config/mod.rs
+index 9d99808..ad54401 100644
+--- a/chirpstack-concentratord-sx1302/src/config/mod.rs
++++ b/chirpstack-concentratord-sx1302/src/config/mod.rs
+@@ -1,6 +1,6 @@
+ use std::fs;
+ 
+-use serde::Deserialize;
++use serde::{Deserialize, Serialize};
+ use std::time::Duration;
+ 
+ pub mod helpers;
+@@ -8,7 +8,7 @@ pub mod vendor;
+ 
+ pub const VERSION: &'static str = env!("CARGO_PKG_VERSION");
+ 
+-#[derive(Default, Deserialize)]
++#[derive(Default, Serialize, Deserialize)]
+ pub struct Concentratord {
+     pub log_level: String,
+     #[serde(default)]
+@@ -18,20 +18,20 @@ pub struct Concentratord {
+     pub api: API,
+ }
+ 
+-#[derive(Default, Deserialize)]
++#[derive(Default, Serialize, Deserialize)]
+ pub struct API {
+     pub event_bind: String,
+     pub command_bind: String,
+ }
+ 
+-#[derive(Default, Deserialize)]
++#[derive(Default, Serialize, Deserialize)]
+ pub struct Location {
+     pub latitude: f64,
+     pub longitude: f64,
+     pub altitude: i16,
+ }
+ 
+-#[derive(Default, Deserialize)]
++#[derive(Default, Serialize, Deserialize)]
+ pub struct Gateway {
+     #[serde(default)]
+     pub antenna_gain: i8,
+@@ -59,7 +59,7 @@ pub struct Gateway {
+     pub config_version: String,
+ }
+ 
+-#[derive(Default, Deserialize, Debug, PartialEq)]
++#[derive(Default, Serialize, Deserialize, Debug, PartialEq)]
+ pub struct Concentrator {
+     pub multi_sf_channels: [u32; 8],
+     #[serde(default)]
+@@ -68,7 +68,7 @@ pub struct Concentrator {
+     pub fsk: FSKChannel,
+ }
+ 
+-#[derive(Default, Deserialize, Debug, PartialEq)]
++#[derive(Default, Serialize, Deserialize, Debug, PartialEq)]
+ pub struct LoRaStdChannel {
+     pub frequency: u32,
+     pub bandwidth: u32,
+@@ -83,14 +83,14 @@ pub struct LoRaStdChannel {
+     pub implicit_coderate: String,
+ }
+ 
+-#[derive(Default, Deserialize, Debug, PartialEq)]
++#[derive(Default, Serialize, Deserialize, Debug, PartialEq)]
+ pub struct FSKChannel {
+     pub frequency: u32,
+     pub bandwidth: u32,
+     pub datarate: u32,
+ }
+ 
+-#[derive(Deserialize)]
++#[derive(Serialize, Deserialize)]
+ pub struct FineTimestamp {
+     pub enable: bool,
+     pub mode: String, // HIGH_CAPACITY or ALL_SF
+@@ -105,12 +105,53 @@ impl Default for FineTimestamp {
+     }
+ }
+ 
+-#[derive(Default, Deserialize)]
++#[derive(Default, Serialize, Deserialize)]
++#[serde(default = "example_configuration")]
+ pub struct Configuration {
+     pub concentratord: Concentratord,
+     pub gateway: Gateway,
+ }
+ 
++fn example_configuration() -> Configuration {
++    Configuration {
++        concentratord: Concentratord {
++            log_level: "INFO".to_string(),
++            stats_interval: Duration::from_secs(30),
++            api: API {
++                event_bind: "ipc:///tmp/concentratord_event".to_string(),
++                command_bind: "ipc:///tmp/concentratord_command".to_string(),
++            },
++            ..Default::default()
++        },
++        gateway: Gateway {
++            lorawan_public: true,
++            model: "rak_2287_eu868".to_string(),
++            concentrator: Concentrator {
++                multi_sf_channels: [
++                    868100000, 868300000, 868500000, 867100000, 867300000, 867500000, 867700000,
++                    867900000,
++                ],
++                lora_std: LoRaStdChannel {
++                    frequency: 868300000,
++                    bandwidth: 250000,
++                    spreading_factor: 7,
++                    ..Default::default()
++                },
++                fsk: FSKChannel {
++                    frequency: 868800000,
++                    bandwidth: 125000,
++                    datarate: 50000,
++                },
++            },
++            fine_timestamp: FineTimestamp {
++                enable: false,
++                mode: "ALL_SF".to_string(),
++            },
++            ..Default::default()
++        },
++    }
++}
++
+ pub fn get(filenames: Vec<String>) -> Configuration {
+     let mut content: String = String::new();
+ 
+diff --git a/chirpstack-concentratord-sx1302/src/main.rs b/chirpstack-concentratord-sx1302/src/main.rs
+index fc76c25..022bc70 100644
+--- a/chirpstack-concentratord-sx1302/src/main.rs
++++ b/chirpstack-concentratord-sx1302/src/main.rs
+@@ -41,13 +41,17 @@ fn main() {
+                 .help("Path to configuration file")
+                 .takes_value(true),
+         )
++        .subcommand(App::new("configfile").about("Print the configuration template"))
+         .get_matches();
+ 
+-    let config_files = matches
+-        .values_of_lossy("config")
+-        .unwrap_or(vec!["chirpstack-concentratord-sx1302.toml".to_string()]);
++    let config_files = matches.values_of_lossy("config").unwrap_or(vec![]);
+     let mut config = config::get(config_files);
+ 
++    if let Some(_) = matches.subcommand_matches("configfile") {
++        cmd::configfile::run(&config);
++        process::exit(0);
++    }
++
+     if config.concentratord.log_to_syslog {
+         let formatter = Formatter3164 {
+             facility: Facility::LOG_USER,
+-- 
+2.25.1
+
diff --git a/0001-Implement-various-gateway-stats-aggregations.patch b/0001-Implement-various-gateway-stats-aggregations.patch
new file mode 100644
index 0000000..5cfc2e1
--- /dev/null
+++ b/0001-Implement-various-gateway-stats-aggregations.patch
@@ -0,0 +1,652 @@
+From c350f0e46e4537bb76f2db0a913ff5f4e954ed99 Mon Sep 17 00:00:00 2001
+From: Orne Brocaar <info@brocaar.com>
+Date: Tue, 31 Aug 2021 13:13:48 +0100
+Subject: [PATCH 1/2] Implement various gateway stats aggregations.
+
+* Uplinks / downlinks per frequency.
+* Uplinks / downlinks per modulation parameters.
+* Downlinks per ACK status.
+---
+ Cargo.lock                                    |   4 +-
+ .../src/handler/command.rs                    |   9 +-
+ .../src/handler/jit.rs                        |   4 +-
+ .../src/handler/uplink.rs                     |  12 +-
+ chirpstack-concentratord-2g4/src/wrapper.rs   |  35 +++++
+ .../src/handler/command.rs                    |   9 +-
+ .../src/handler/jit.rs                        |   4 +-
+ .../src/handler/uplink.rs                     |  12 +-
+ .../src/wrapper/mod.rs                        |  54 ++++++++
+ .../src/handler/command.rs                    |   9 +-
+ .../src/handler/jit.rs                        |   4 +-
+ .../src/handler/uplink.rs                     |  12 +-
+ .../src/wrapper/mod.rs                        |  56 ++++++++
+ libconcentratord/Cargo.toml                   |   2 +-
+ libconcentratord/src/stats.rs                 | 125 ++++++++++++++++--
+ libloragw-2g4/src/hal.rs                      |   2 +-
+ libloragw-sx1301/src/hal.rs                   |   2 +-
+ libloragw-sx1302/src/hal.rs                   |   2 +-
+ 18 files changed, 322 insertions(+), 35 deletions(-)
+
+diff --git a/Cargo.lock b/Cargo.lock
+index 169d827..60d6c6f 100644
+--- a/Cargo.lock
++++ b/Cargo.lock
+@@ -251,9 +251,9 @@ dependencies = [
+ 
+ [[package]]
+ name = "chirpstack_api"
+-version = "3.10.2"
++version = "3.11.1"
+ source = "registry+https://github.com/rust-lang/crates.io-index"
+-checksum = "a512de50d789d961f60070c77f12fb599c5f4f3656a857d4416d4f20a30cd94f"
++checksum = "08809efa6523e3498d6e16222230aaf152a0fe75a3a3f42a5fbd3ed14f4d6f1e"
+ dependencies = [
+  "prost",
+  "prost-types",
+diff --git a/chirpstack-concentratord-2g4/src/handler/command.rs b/chirpstack-concentratord-2g4/src/handler/command.rs
+index 7b2781a..d44522a 100644
+--- a/chirpstack-concentratord-2g4/src/handler/command.rs
++++ b/chirpstack-concentratord-2g4/src/handler/command.rs
+@@ -91,6 +91,7 @@ fn handle_downlink(
+         items: vec![Default::default(); pl.items.len()],
+         ..Default::default()
+     };
++    let mut stats_tx_status = chirpstack_api::gw::TxAckStatus::Ignored;
+ 
+     for (i, item) in pl.items.iter().enumerate() {
+         // convert protobuf to hal struct
+@@ -122,14 +123,20 @@ fn handle_downlink(
+         ) {
+             Ok(_) => {
+                 tx_ack.items[i].set_status(chirpstack_api::gw::TxAckStatus::Ok);
++                stats_tx_status = chirpstack_api::gw::TxAckStatus::Ok;
+ 
+                 // break out of for loop
+                 break;
+             }
+-            Err(status) => tx_ack.items[i].set_status(status),
++            Err(status) => {
++                tx_ack.items[i].set_status(status);
++                stats_tx_status = status;
++            }
+         };
+     }
+ 
++    stats::inc_tx_status_count(stats_tx_status);
++
+     let mut buf = Vec::new();
+     tx_ack.encode(&mut buf).unwrap();
+     return Ok(buf);
+diff --git a/chirpstack-concentratord-2g4/src/handler/jit.rs b/chirpstack-concentratord-2g4/src/handler/jit.rs
+index 51193ad..3bd5b88 100644
+--- a/chirpstack-concentratord-2g4/src/handler/jit.rs
++++ b/chirpstack-concentratord-2g4/src/handler/jit.rs
+@@ -47,7 +47,9 @@ pub fn jit_loop(
+                     tx_packet.datarate
+                     );
+ 
+-                stats::inc_tx_packets_emitted();
++                if let Ok(tx_info) = wrapper::downlink_to_tx_info_proto(&tx_packet) {
++                    stats::inc_tx_counts(&tx_info);
++                }
+             }
+             Err(err) => {
+                 error!("Schedule packet for tx error, error: {}", err);
+diff --git a/chirpstack-concentratord-2g4/src/handler/uplink.rs b/chirpstack-concentratord-2g4/src/handler/uplink.rs
+index 3178d2d..02f29c8 100644
+--- a/chirpstack-concentratord-2g4/src/handler/uplink.rs
++++ b/chirpstack-concentratord-2g4/src/handler/uplink.rs
+@@ -24,6 +24,12 @@ pub fn handle_loop(gateway_id: &[u8], stop_receive: Receiver<Signal>) {
+         match hal::receive() {
+             Ok(frames) => {
+                 for frame in frames {
++                    stats::inc_rx_packets_received();
++                    if frame.status != hal::CRC::CRCOk {
++                        debug!("Frame received with invalid CRC");
++                        continue;
++                    }
++
+                     let proto = match wrapper::uplink_to_proto(gateway_id.clone(), &frame) {
+                         Ok(v) => v,
+                         Err(err) => {
+@@ -45,11 +51,7 @@ pub fn handle_loop(gateway_id: &[u8], stop_receive: Receiver<Signal>) {
+                         frame.datarate,
+                     );
+ 
+-                    stats::inc_rx_packets_received();
+-                    if rx_info.crc_status() == chirpstack_api::gw::CrcStatus::CrcOk {
+-                        stats::inc_rx_packets_received_ok();
+-                    }
+-
++                    stats::inc_rx_counts(&proto);
+                     events::send_uplink(&proto).unwrap();
+                 }
+             }
+diff --git a/chirpstack-concentratord-2g4/src/wrapper.rs b/chirpstack-concentratord-2g4/src/wrapper.rs
+index 990b320..507e61a 100644
+--- a/chirpstack-concentratord-2g4/src/wrapper.rs
++++ b/chirpstack-concentratord-2g4/src/wrapper.rs
+@@ -223,3 +223,38 @@ pub fn downlink_from_proto(
+ 
+     return Ok(packet);
+ }
++
++pub fn downlink_to_tx_info_proto(
++    packet: &hal::TxPacket,
++) -> Result<chirpstack_api::gw::DownlinkTxInfo, String> {
++    let mut tx_info: chirpstack_api::gw::DownlinkTxInfo = Default::default();
++    tx_info.frequency = packet.freq_hz;
++
++    let mut mod_info: chirpstack_api::gw::LoRaModulationInfo = Default::default();
++    mod_info.bandwidth = packet.bandwidth;
++    mod_info.spreading_factor = match packet.datarate {
++        hal::DataRate::SF5 => 5,
++        hal::DataRate::SF6 => 6,
++        hal::DataRate::SF7 => 7,
++        hal::DataRate::SF8 => 8,
++        hal::DataRate::SF9 => 9,
++        hal::DataRate::SF10 => 10,
++        hal::DataRate::SF11 => 11,
++        hal::DataRate::SF12 => 12,
++    };
++    mod_info.code_rate = match packet.coderate {
++        hal::CodeRate::LoRa4_5 => "4/5".to_string(),
++        hal::CodeRate::LoRa4_6 => "4/6".to_string(),
++        hal::CodeRate::LoRa4_7 => "4/7".to_string(),
++        hal::CodeRate::LoRa4_8 => "4/8".to_string(),
++        hal::CodeRate::LoRaLi4_5 => "4/5LI".to_string(),
++        hal::CodeRate::LoRaLi4_6 => "4/6LI".to_string(),
++        hal::CodeRate::LoRaLi4_8 => "4/8LI".to_string(),
++    };
++
++    tx_info.set_modulation(chirpstack_api::common::Modulation::Lora);
++    tx_info.modulation_info =
++        Some(chirpstack_api::gw::downlink_tx_info::ModulationInfo::LoraModulationInfo(mod_info));
++
++    Ok(tx_info)
++}
+diff --git a/chirpstack-concentratord-sx1301/src/handler/command.rs b/chirpstack-concentratord-sx1301/src/handler/command.rs
+index 6f92446..564174e 100644
+--- a/chirpstack-concentratord-sx1301/src/handler/command.rs
++++ b/chirpstack-concentratord-sx1301/src/handler/command.rs
+@@ -89,6 +89,7 @@ fn handle_downlink(
+         items: vec![Default::default(); pl.items.len()],
+         ..Default::default()
+     };
++    let mut stats_tx_status = chirpstack_api::gw::TxAckStatus::Ignored;
+ 
+     for (i, item) in pl.items.iter().enumerate() {
+         // convert protobuf to hal struct
+@@ -120,14 +121,20 @@ fn handle_downlink(
+         ) {
+             Ok(_) => {
+                 tx_ack.items[i].set_status(chirpstack_api::gw::TxAckStatus::Ok);
++                stats_tx_status = chirpstack_api::gw::TxAckStatus::Ok;
+ 
+                 // break out of for loop
+                 break;
+             }
+-            Err(status) => tx_ack.items[i].set_status(status),
++            Err(status) => {
++                tx_ack.items[i].set_status(status);
++                stats_tx_status = status;
++            }
+         };
+     }
+ 
++    stats::inc_tx_status_count(stats_tx_status);
++
+     let mut buf = Vec::new();
+     tx_ack.encode(&mut buf).unwrap();
+     return Ok(buf);
+diff --git a/chirpstack-concentratord-sx1301/src/handler/jit.rs b/chirpstack-concentratord-sx1301/src/handler/jit.rs
+index 163e94d..aea4391 100644
+--- a/chirpstack-concentratord-sx1301/src/handler/jit.rs
++++ b/chirpstack-concentratord-sx1301/src/handler/jit.rs
+@@ -49,7 +49,9 @@ pub fn jit_loop(
+                     tx_packet.datarate
+                 );
+ 
+-                stats::inc_tx_packets_emitted();
++                if let Ok(tx_info) = wrapper::downlink_to_tx_info_proto(&tx_packet) {
++                    stats::inc_tx_counts(&tx_info);
++                }
+             }
+             Err(err) => {
+                 error!("Schedule packet for tx error, error: {}", err);
+diff --git a/chirpstack-concentratord-sx1301/src/handler/uplink.rs b/chirpstack-concentratord-sx1301/src/handler/uplink.rs
+index 69871b4..8aa6b7f 100644
+--- a/chirpstack-concentratord-sx1301/src/handler/uplink.rs
++++ b/chirpstack-concentratord-sx1301/src/handler/uplink.rs
+@@ -24,6 +24,12 @@ pub fn handle_loop(gateway_id: &[u8], stop_receive: Receiver<Signal>) {
+         match hal::receive() {
+             Ok(frames) => {
+                 for frame in frames {
++                    stats::inc_rx_packets_received();
++                    if frame.status != hal::CRC::CRCOk {
++                        debug!("Frame received with invalid CRC");
++                        continue;
++                    }
++
+                     let proto = match wrapper::uplink_to_proto(gateway_id.clone(), &frame) {
+                         Ok(v) => v,
+                         Err(err) => {
+@@ -45,11 +51,7 @@ pub fn handle_loop(gateway_id: &[u8], stop_receive: Receiver<Signal>) {
+                         frame.datarate,
+                     );
+ 
+-                    stats::inc_rx_packets_received();
+-                    if rx_info.crc_status() == chirpstack_api::gw::CrcStatus::CrcOk {
+-                        stats::inc_rx_packets_received_ok();
+-                    }
+-
++                    stats::inc_rx_counts(&proto);
+                     events::send_uplink(&proto).unwrap();
+                 }
+             }
+diff --git a/chirpstack-concentratord-sx1301/src/wrapper/mod.rs b/chirpstack-concentratord-sx1301/src/wrapper/mod.rs
+index 6ebf2d6..15f7d12 100644
+--- a/chirpstack-concentratord-sx1301/src/wrapper/mod.rs
++++ b/chirpstack-concentratord-sx1301/src/wrapper/mod.rs
+@@ -287,3 +287,57 @@ pub fn downlink_from_proto(
+ 
+     return Ok(packet);
+ }
++
++pub fn downlink_to_tx_info_proto(
++    packet: &hal::TxPacket,
++) -> Result<chirpstack_api::gw::DownlinkTxInfo, String> {
++    let mut tx_info: chirpstack_api::gw::DownlinkTxInfo = Default::default();
++    tx_info.frequency = packet.freq_hz;
++
++    match packet.modulation {
++        hal::Modulation::LoRa => {
++            let mut mod_info: chirpstack_api::gw::LoRaModulationInfo = Default::default();
++            mod_info.bandwidth = packet.bandwidth;
++            mod_info.spreading_factor = match packet.datarate {
++                hal::DataRate::SF7 => 7,
++                hal::DataRate::SF8 => 8,
++                hal::DataRate::SF9 => 9,
++                hal::DataRate::SF10 => 10,
++                hal::DataRate::SF11 => 11,
++                hal::DataRate::SF12 => 12,
++                _ => {
++                    return Err("unexpected spreading-factor".to_string());
++                }
++            };
++            mod_info.code_rate = match packet.coderate {
++                hal::CodeRate::LoRa4_5 => "4/5".to_string(),
++                hal::CodeRate::LoRa4_6 => "4/6".to_string(),
++                hal::CodeRate::LoRa4_7 => "4/7".to_string(),
++                hal::CodeRate::LoRa4_8 => "4/8".to_string(),
++                hal::CodeRate::Undefined => "".to_string(),
++            };
++
++            tx_info.set_modulation(chirpstack_api::common::Modulation::Lora);
++            tx_info.modulation_info = Some(
++                chirpstack_api::gw::downlink_tx_info::ModulationInfo::LoraModulationInfo(mod_info),
++            );
++        }
++        hal::Modulation::FSK => {
++            let mut mod_info: chirpstack_api::gw::FskModulationInfo = Default::default();
++            mod_info.datarate = match packet.datarate {
++                hal::DataRate::FSK(v) => v * 1000,
++                _ => return Err("unexpected datarate".to_string()),
++            };
++
++            tx_info.set_modulation(chirpstack_api::common::Modulation::Fsk);
++            tx_info.modulation_info = Some(
++                chirpstack_api::gw::downlink_tx_info::ModulationInfo::FskModulationInfo(mod_info),
++            );
++        }
++        hal::Modulation::Undefined => {
++            return Err("undefined modulation".to_string());
++        }
++    }
++
++    Ok(tx_info)
++}
+diff --git a/chirpstack-concentratord-sx1302/src/handler/command.rs b/chirpstack-concentratord-sx1302/src/handler/command.rs
+index be87e1e..8e46d20 100644
+--- a/chirpstack-concentratord-sx1302/src/handler/command.rs
++++ b/chirpstack-concentratord-sx1302/src/handler/command.rs
+@@ -89,6 +89,7 @@ fn handle_downlink(
+         items: vec![Default::default(); pl.items.len()],
+         ..Default::default()
+     };
++    let mut stats_tx_status = chirpstack_api::gw::TxAckStatus::Ignored;
+ 
+     for (i, item) in pl.items.iter().enumerate() {
+         // convert protobuf to hal struct
+@@ -129,14 +130,20 @@ fn handle_downlink(
+         ) {
+             Ok(_) => {
+                 tx_ack.items[i].set_status(chirpstack_api::gw::TxAckStatus::Ok);
++                stats_tx_status = chirpstack_api::gw::TxAckStatus::Ok;
+ 
+                 // break out of loop
+                 break;
+             }
+-            Err(status) => tx_ack.items[i].set_status(status),
++            Err(status) => {
++                tx_ack.items[i].set_status(status);
++                stats_tx_status = status;
++            }
+         };
+     }
+ 
++    stats::inc_tx_status_count(stats_tx_status);
++
+     let mut buf = Vec::new();
+     tx_ack.encode(&mut buf).unwrap();
+     return Ok(buf);
+diff --git a/chirpstack-concentratord-sx1302/src/handler/jit.rs b/chirpstack-concentratord-sx1302/src/handler/jit.rs
+index 8c98e30..144957e 100644
+--- a/chirpstack-concentratord-sx1302/src/handler/jit.rs
++++ b/chirpstack-concentratord-sx1302/src/handler/jit.rs
+@@ -48,7 +48,9 @@ pub fn jit_loop(
+                     tx_packet.datarate
+                 );
+ 
+-                stats::inc_tx_packets_emitted();
++                if let Ok(tx_info) = wrapper::downlink_to_tx_info_proto(&tx_packet) {
++                    stats::inc_tx_counts(&tx_info);
++                }
+             }
+             Err(err) => {
+                 error!("Schedule packet for tx error, error: {}", err);
+diff --git a/chirpstack-concentratord-sx1302/src/handler/uplink.rs b/chirpstack-concentratord-sx1302/src/handler/uplink.rs
+index 8bd758a..4b003e2 100644
+--- a/chirpstack-concentratord-sx1302/src/handler/uplink.rs
++++ b/chirpstack-concentratord-sx1302/src/handler/uplink.rs
+@@ -24,6 +24,12 @@ pub fn handle_loop(gateway_id: &[u8], stop_receive: Receiver<Signal>) {
+         match hal::receive() {
+             Ok(frames) => {
+                 for frame in frames {
++                    stats::inc_rx_packets_received();
++                    if frame.status != hal::CRC::CRCOk {
++                        debug!("Frame received with invalid CRC");
++                        continue;
++                    }
++
+                     let proto = match wrapper::uplink_to_proto(gateway_id.clone(), &frame) {
+                         Ok(v) => v,
+                         Err(err) => {
+@@ -45,11 +51,7 @@ pub fn handle_loop(gateway_id: &[u8], stop_receive: Receiver<Signal>) {
+                         frame.datarate,
+                     );
+ 
+-                    stats::inc_rx_packets_received();
+-                    if rx_info.crc_status() == chirpstack_api::gw::CrcStatus::CrcOk {
+-                        stats::inc_rx_packets_received_ok();
+-                    }
+-
++                    stats::inc_rx_counts(&proto);
+                     events::send_uplink(&proto).unwrap();
+                 }
+             }
+diff --git a/chirpstack-concentratord-sx1302/src/wrapper/mod.rs b/chirpstack-concentratord-sx1302/src/wrapper/mod.rs
+index 126d47b..2b935bd 100644
+--- a/chirpstack-concentratord-sx1302/src/wrapper/mod.rs
++++ b/chirpstack-concentratord-sx1302/src/wrapper/mod.rs
+@@ -290,3 +290,59 @@ pub fn downlink_from_proto(
+ 
+     return Ok(packet);
+ }
++
++pub fn downlink_to_tx_info_proto(
++    packet: &hal::TxPacket,
++) -> Result<chirpstack_api::gw::DownlinkTxInfo, String> {
++    let mut tx_info: chirpstack_api::gw::DownlinkTxInfo = Default::default();
++    tx_info.frequency = packet.freq_hz;
++
++    match packet.modulation {
++        hal::Modulation::LoRa => {
++            let mut mod_info: chirpstack_api::gw::LoRaModulationInfo = Default::default();
++            mod_info.bandwidth = packet.bandwidth;
++            mod_info.spreading_factor = match packet.datarate {
++                hal::DataRate::SF5 => 5,
++                hal::DataRate::SF6 => 6,
++                hal::DataRate::SF7 => 7,
++                hal::DataRate::SF8 => 8,
++                hal::DataRate::SF9 => 9,
++                hal::DataRate::SF10 => 10,
++                hal::DataRate::SF11 => 11,
++                hal::DataRate::SF12 => 12,
++                _ => {
++                    return Err("unexpected spreading-factor".to_string());
++                }
++            };
++            mod_info.code_rate = match packet.coderate {
++                hal::CodeRate::LoRa4_5 => "4/5".to_string(),
++                hal::CodeRate::LoRa4_6 => "4/6".to_string(),
++                hal::CodeRate::LoRa4_7 => "4/7".to_string(),
++                hal::CodeRate::LoRa4_8 => "4/8".to_string(),
++                hal::CodeRate::Undefined => "".to_string(),
++            };
++
++            tx_info.set_modulation(chirpstack_api::common::Modulation::Lora);
++            tx_info.modulation_info = Some(
++                chirpstack_api::gw::downlink_tx_info::ModulationInfo::LoraModulationInfo(mod_info),
++            );
++        }
++        hal::Modulation::FSK => {
++            let mut mod_info: chirpstack_api::gw::FskModulationInfo = Default::default();
++            mod_info.datarate = match packet.datarate {
++                hal::DataRate::FSK(v) => v * 1000,
++                _ => return Err("unexpected datarate".to_string()),
++            };
++
++            tx_info.set_modulation(chirpstack_api::common::Modulation::Fsk);
++            tx_info.modulation_info = Some(
++                chirpstack_api::gw::downlink_tx_info::ModulationInfo::FskModulationInfo(mod_info),
++            );
++        }
++        hal::Modulation::Undefined => {
++            return Err("undefined modulation".to_string());
++        }
++    }
++
++    Ok(tx_info)
++}
+diff --git a/libconcentratord/Cargo.toml b/libconcentratord/Cargo.toml
+index 33858fb..6741b90 100644
+--- a/libconcentratord/Cargo.toml
++++ b/libconcentratord/Cargo.toml
+@@ -9,7 +9,7 @@ publish = false
+ log = "0.4"
+ zmq = "0.9"
+ lazy_static = "1.4"
+-chirpstack_api = { version = "3.9", default-features = false }
++chirpstack_api = { version = "3.11.1", default-features = false }
+ uuid = { version = "0.8", features = ["v4"] }
+ prost = "0.8"
+ prost-types = "0.8"
+diff --git a/libconcentratord/src/stats.rs b/libconcentratord/src/stats.rs
+index 6d1cced..b84fd3b 100644
+--- a/libconcentratord/src/stats.rs
++++ b/libconcentratord/src/stats.rs
+@@ -10,24 +10,133 @@ lazy_static! {
+     static ref STATS: Mutex<chirpstack_api::gw::GatewayStats> = Mutex::new(Default::default());
+ }
+ 
+-pub fn inc_rx_packets_received() {
++pub fn inc_rx_counts(pl: &chirpstack_api::gw::UplinkFrame) {
+     let mut stats = STATS.lock().unwrap();
+-    stats.rx_packets_received += 1;
++    stats.rx_packets_received_ok += 1;
++
++    match &pl.tx_info {
++        Some(tx_info) => {
++            stats
++                .rx_packets_per_frequency
++                .entry(tx_info.frequency)
++                .and_modify(|v| *v += 1)
++                .or_insert(1);
++
++            match &tx_info.modulation_info {
++                Some(mod_info) => {
++                    let modulation = Some(chirpstack_api::gw::Modulation {
++                        parameters: Some(match &mod_info {
++                        chirpstack_api::gw::uplink_tx_info::ModulationInfo::LoraModulationInfo(
++                            v,
++                        ) => chirpstack_api::gw::modulation::Parameters::Lora(v.clone()),
++                        chirpstack_api::gw::uplink_tx_info::ModulationInfo::FskModulationInfo(
++                            v,
++                        ) => chirpstack_api::gw::modulation::Parameters::Fsk(v.clone()),
++                        chirpstack_api::gw::uplink_tx_info::ModulationInfo::LrFhssModulationInfo(
++                            v,
++                        ) => chirpstack_api::gw::modulation::Parameters::LrFhss(v.clone()),
++                    })});
++
++                    let mut found = false;
++                    for mod_count in &mut stats.rx_packets_per_modulation {
++                        if mod_count.modulation == modulation {
++                            mod_count.count += 1;
++                            found = true;
++                        }
++                    }
++
++                    if !found {
++                        stats.rx_packets_per_modulation.push(
++                            chirpstack_api::gw::PerModulationCount {
++                                modulation: modulation,
++                                count: 1,
++                            },
++                        );
++                    }
++                }
++                None => {}
++            };
++        }
++        None => {}
++    };
+ }
+ 
+-pub fn inc_rx_packets_received_ok() {
++pub fn inc_tx_counts(tx_info: &chirpstack_api::gw::DownlinkTxInfo) {
+     let mut stats = STATS.lock().unwrap();
+-    stats.rx_packets_received_ok += 1;
++    stats.tx_packets_emitted += 1;
++
++    stats
++        .tx_packets_per_frequency
++        .entry(tx_info.frequency)
++        .and_modify(|v| *v += 1)
++        .or_insert(1);
++
++    match &tx_info.modulation_info {
++        Some(mod_info) => {
++            let modulation = Some(chirpstack_api::gw::Modulation {
++                parameters: Some(match &mod_info {
++                    chirpstack_api::gw::downlink_tx_info::ModulationInfo::LoraModulationInfo(v) => {
++                        chirpstack_api::gw::modulation::Parameters::Lora(v.clone())
++                    }
++                    chirpstack_api::gw::downlink_tx_info::ModulationInfo::FskModulationInfo(v) => {
++                        chirpstack_api::gw::modulation::Parameters::Fsk(v.clone())
++                    }
++                }),
++            });
++
++            let mut found = false;
++            for mod_count in &mut stats.tx_packets_per_modulation {
++                if mod_count.modulation == modulation {
++                    mod_count.count += 1;
++                    found = true;
++                }
++            }
++
++            if !found {
++                stats
++                    .tx_packets_per_modulation
++                    .push(chirpstack_api::gw::PerModulationCount {
++                        modulation: modulation,
++                        count: 1,
++                    });
++            }
++        }
++        None => {}
++    };
+ }
+ 
+-pub fn inc_tx_packets_received() {
++pub fn inc_tx_status_count(status: chirpstack_api::gw::TxAckStatus) {
++    let s = match status {
++        chirpstack_api::gw::TxAckStatus::Ignored => "IGNORED",
++        chirpstack_api::gw::TxAckStatus::Ok => "OK",
++        chirpstack_api::gw::TxAckStatus::TooLate => "TOO_LATE",
++        chirpstack_api::gw::TxAckStatus::TooEarly => "TOO_EARLY",
++        chirpstack_api::gw::TxAckStatus::CollisionPacket => "COLLISION_PACKET",
++        chirpstack_api::gw::TxAckStatus::CollisionBeacon => "COLLISION_BEACON",
++        chirpstack_api::gw::TxAckStatus::TxFreq => "TX_FREQ",
++        chirpstack_api::gw::TxAckStatus::TxPower => "TX_POWER",
++        chirpstack_api::gw::TxAckStatus::GpsUnlocked => "GPS_UNLOCKED",
++        chirpstack_api::gw::TxAckStatus::QueueFull => "QUEUE_FULL",
++        chirpstack_api::gw::TxAckStatus::InternalError => "InternalError",
++    }
++    .to_string();
++
+     let mut stats = STATS.lock().unwrap();
+-    stats.tx_packets_received += 1;
++    stats
++        .tx_packets_per_status
++        .entry(s)
++        .and_modify(|v| *v += 1)
++        .or_insert(1);
+ }
+ 
+-pub fn inc_tx_packets_emitted() {
++pub fn inc_rx_packets_received() {
+     let mut stats = STATS.lock().unwrap();
+-    stats.tx_packets_emitted += 1;
++    stats.rx_packets_received += 1;
++}
++
++pub fn inc_tx_packets_received() {
++    let mut stats = STATS.lock().unwrap();
++    stats.tx_packets_received += 1;
+ }
+ 
+ pub fn send_and_reset(
+diff --git a/libloragw-2g4/src/hal.rs b/libloragw-2g4/src/hal.rs
+index 513dca4..595cb65 100644
+--- a/libloragw-2g4/src/hal.rs
++++ b/libloragw-2g4/src/hal.rs
+@@ -40,7 +40,7 @@ impl ConvertBandwidth for Bandwidth {
+     }
+ }
+ 
+-#[derive(Debug, Copy, Clone)]
++#[derive(Debug, Copy, Clone, PartialEq)]
+ pub enum CRC {
+     Undefined,
+     NoCRC,
+diff --git a/libloragw-sx1301/src/hal.rs b/libloragw-sx1301/src/hal.rs
+index f563dd6..c135708 100644
+--- a/libloragw-sx1301/src/hal.rs
++++ b/libloragw-sx1301/src/hal.rs
+@@ -61,7 +61,7 @@ impl RadioType {
+     }
+ }
+ 
+-#[derive(Debug, Copy, Clone)]
++#[derive(Debug, Copy, Clone, PartialEq)]
+ pub enum CRC {
+     Undefined,
+     NoCRC,
+diff --git a/libloragw-sx1302/src/hal.rs b/libloragw-sx1302/src/hal.rs
+index 80c9c11..c085713 100644
+--- a/libloragw-sx1302/src/hal.rs
++++ b/libloragw-sx1302/src/hal.rs
+@@ -60,7 +60,7 @@ impl RadioType {
+     }
+ }
+ 
+-#[derive(Debug, Copy, Clone)]
++#[derive(Debug, Copy, Clone, PartialEq)]
+ pub enum CRC {
+     Undefined,
+     NoCRC,
+-- 
+2.25.1
+
diff --git a/0001-Remove-Class-B-beacon-frequency-correction.patch b/0001-Remove-Class-B-beacon-frequency-correction.patch
new file mode 100644
index 0000000..93d7267
--- /dev/null
+++ b/0001-Remove-Class-B-beacon-frequency-correction.patch
@@ -0,0 +1,68 @@
+From 97c727d5e4cb846b5873cb70c4bf8b3bdd66ff13 Mon Sep 17 00:00:00 2001
+From: Orne Brocaar <info@brocaar.com>
+Date: Tue, 31 Aug 2021 13:28:07 +0100
+Subject: [PATCH] Remove Class-B beacon frequency correction.
+
+This was copied over from the Semtech UDP Packet Forwarder, but should
+have been implemented on dequeue instead of enqueue, as the enqueue is
+happening in the future. For now this is removed, as it might need
+further research if this logic is needed or not. It is present in the
+Semtech UDP Packet Forwarder, but I could not find the same logic in the
+Basics Station.
+
+If this is needed, it must be implemented on dequeue, to make sure that
+we compensate the frequency with the xtal_correct value as close to the
+actual transmission as possible.
+
+For now this is removed as on sending the downlink, the Concentratord
+aggregates the downlink count on frequency. Before this change it would
+generate a many different frequencies as the xtal_correct value is
+variable.
+---
+ chirpstack-concentratord-sx1301/src/handler/beacon.rs | 7 +------
+ chirpstack-concentratord-sx1301/src/handler/gps.rs    | 8 --------
+ 2 files changed, 1 insertion(+), 14 deletions(-)
+
+diff --git a/chirpstack-concentratord-sx1301/src/handler/beacon.rs b/chirpstack-concentratord-sx1301/src/handler/beacon.rs
+index 1e48854..cc6a631 100644
+--- a/chirpstack-concentratord-sx1301/src/handler/beacon.rs
++++ b/chirpstack-concentratord-sx1301/src/handler/beacon.rs
+@@ -82,15 +82,10 @@ fn send_beacon(
+     beacon_pl.resize(data.len(), 0);
+     data.copy_from_slice(&beacon_pl);
+ 
+-    let xtal_correct = match gps::get_xtal_correct() {
+-        Ok(v) => v,
+-        Err(err) => return Err(err),
+-    };
+-
+     let tx_freq = conf.frequencies
+         [((beacon_time.as_secs() % (1 << 32)) % conf.frequencies.len() as u64) as usize];
+     let tx_packet = hal::TxPacket {
+-        freq_hz: (tx_freq as f64 * xtal_correct) as u32,
++        freq_hz: tx_freq,
+         tx_mode: hal::TxMode::OnGPS,
+         count_us: match gps::epoch2cnt(&beacon_time) {
+             Ok(v) => v,
+diff --git a/chirpstack-concentratord-sx1301/src/handler/gps.rs b/chirpstack-concentratord-sx1301/src/handler/gps.rs
+index 1bb20dc..cdb0093 100644
+--- a/chirpstack-concentratord-sx1301/src/handler/gps.rs
++++ b/chirpstack-concentratord-sx1301/src/handler/gps.rs
+@@ -265,14 +265,6 @@ pub fn get_gps_epoch() -> Result<Duration, String> {
+     return Ok(GPS_TIME_REF.lock().unwrap().gps_epoch);
+ }
+ 
+-pub fn get_xtal_correct() -> Result<f64, String> {
+-    if *XTAL_CORRECT_OK.lock().unwrap() == false {
+-        return Err("no valid xtal correction value available yet".to_string());
+-    }
+-
+-    return Ok(*XTAL_CORRECT.lock().unwrap());
+-}
+-
+ fn gps_process_sync() {
+     let (gps_time, gps_epoch, _, _) = match gps::get(true, false) {
+         Ok(v) => v,
+-- 
+2.25.1
+
diff --git a/0002-Bump-version.patch b/0002-Bump-version.patch
new file mode 100644
index 0000000..e2eeecf
--- /dev/null
+++ b/0002-Bump-version.patch
@@ -0,0 +1,104 @@
+From 57d10c60bcfb5cb1d34cd1b2789e915fb740581f Mon Sep 17 00:00:00 2001
+From: Orne Brocaar <info@brocaar.com>
+Date: Mon, 10 May 2021 09:46:46 +0100
+Subject: [PATCH 2/5] Bump version.
+
+---
+ Cargo.lock                                 | 8 ++++----
+ chirpstack-concentratord-2g4/Cargo.toml    | 2 +-
+ chirpstack-concentratord-sx1301/Cargo.toml | 2 +-
+ chirpstack-concentratord-sx1302/Cargo.toml | 2 +-
+ gateway-id/Cargo.toml                      | 2 +-
+ 5 files changed, 8 insertions(+), 8 deletions(-)
+
+diff --git a/Cargo.lock b/Cargo.lock
+index 4ceef3f..71096f9 100644
+--- a/Cargo.lock
++++ b/Cargo.lock
+@@ -185,7 +185,7 @@ checksum = "baf1de4339761588bc0619e3cbc0120ee582ebb74b53b4efbf79117bd2da40fd"
+ 
+ [[package]]
+ name = "chirpstack-concentratord-2g4"
+-version = "3.2.0-test.2"
++version = "3.2.0"
+ dependencies = [
+  "chirpstack_api",
+  "chrono",
+@@ -210,7 +210,7 @@ dependencies = [
+ 
+ [[package]]
+ name = "chirpstack-concentratord-sx1301"
+-version = "3.2.0-test.2"
++version = "3.2.0"
+ dependencies = [
+  "chirpstack_api",
+  "chrono",
+@@ -235,7 +235,7 @@ dependencies = [
+ 
+ [[package]]
+ name = "chirpstack-concentratord-sx1302"
+-version = "3.2.0-test.2"
++version = "3.2.0"
+ dependencies = [
+  "chirpstack_api",
+  "chrono",
+@@ -422,7 +422,7 @@ dependencies = [
+ 
+ [[package]]
+ name = "gateway-id"
+-version = "3.2.0-test.2"
++version = "3.2.0"
+ dependencies = [
+  "clap",
+  "hex",
+diff --git a/chirpstack-concentratord-2g4/Cargo.toml b/chirpstack-concentratord-2g4/Cargo.toml
+index e71c359..7d1a44e 100644
+--- a/chirpstack-concentratord-2g4/Cargo.toml
++++ b/chirpstack-concentratord-2g4/Cargo.toml
+@@ -1,6 +1,6 @@
+ [package]
+ name = "chirpstack-concentratord-2g4"
+-version = "3.2.0-test.2"
++version = "3.2.0"
+ authors = ["Orne Brocaar <info@brocaar.com>"]
+ edition = "2018"
+ publish = false
+diff --git a/chirpstack-concentratord-sx1301/Cargo.toml b/chirpstack-concentratord-sx1301/Cargo.toml
+index 32d0466..88cff41 100644
+--- a/chirpstack-concentratord-sx1301/Cargo.toml
++++ b/chirpstack-concentratord-sx1301/Cargo.toml
+@@ -1,6 +1,6 @@
+ [package]
+ name = "chirpstack-concentratord-sx1301"
+-version = "3.2.0-test.2"
++version = "3.2.0"
+ authors = ["Orne Brocaar <info@brocaar.com>"]
+ edition = "2018"
+ publish = false
+diff --git a/chirpstack-concentratord-sx1302/Cargo.toml b/chirpstack-concentratord-sx1302/Cargo.toml
+index 0fdb0ce..f8a89c0 100644
+--- a/chirpstack-concentratord-sx1302/Cargo.toml
++++ b/chirpstack-concentratord-sx1302/Cargo.toml
+@@ -1,6 +1,6 @@
+ [package]
+ name = "chirpstack-concentratord-sx1302"
+-version = "3.2.0-test.2"
++version = "3.2.0"
+ authors = ["Orne Brocaar <info@brocaar.com>"]
+ edition = "2018"
+ publish = false
+diff --git a/gateway-id/Cargo.toml b/gateway-id/Cargo.toml
+index 978eb2c..367b605 100644
+--- a/gateway-id/Cargo.toml
++++ b/gateway-id/Cargo.toml
+@@ -1,6 +1,6 @@
+ [package]
+ name = "gateway-id"
+-version = "3.2.0-test.2"
++version = "3.2.0"
+ authors = ["Orne Brocaar <info@brocaar.com>"]
+ edition = "2018"
+ publish = false
+-- 
+2.25.1
+
diff --git a/0002-Implement-LoRa-2.4-Ghz-HAL-Concentratord-version.patch b/0002-Implement-LoRa-2.4-Ghz-HAL-Concentratord-version.patch
new file mode 100644
index 0000000..8711471
--- /dev/null
+++ b/0002-Implement-LoRa-2.4-Ghz-HAL-Concentratord-version.patch
@@ -0,0 +1,2379 @@
+From d5386806272edb4e8072dd16c5cd8a74de2c2d6d Mon Sep 17 00:00:00 2001
+From: Orne Brocaar <info@brocaar.com>
+Date: Wed, 28 Apr 2021 09:57:55 +0100
+Subject: [PATCH 02/10] Implement LoRa 2.4 Ghz HAL + Concentratord version.
+
+---
+ Cargo.lock                                    |  33 +
+ Cargo.toml                                    |   2 +
+ Dockerfile-devel                              |  24 +-
+ chirpstack-concentratord-2g4/Cargo.toml       |  30 +
+ chirpstack-concentratord-2g4/build.rs         |   3 +
+ .../src/cmd/configfile.rs                     |  79 +++
+ chirpstack-concentratord-2g4/src/cmd/mod.rs   |   2 +
+ chirpstack-concentratord-2g4/src/cmd/root.rs  | 135 ++++
+ .../src/concentrator.rs                       |  79 +++
+ .../src/config/mod.rs                         | 131 ++++
+ .../src/config/vendor/mod.rs                  |   9 +
+ .../src/config/vendor/semtech/mod.rs          |   1 +
+ .../config/vendor/semtech/sx1280z3dsfgw1.rs   |  11 +
+ .../src/handler/command.rs                    | 144 ++++
+ .../src/handler/config.rs                     | 147 ++++
+ .../src/handler/gps.rs                        |  26 +
+ .../src/handler/jit.rs                        |  65 ++
+ .../src/handler/mod.rs                        |   6 +
+ .../src/handler/stats.rs                      |  49 ++
+ .../src/handler/uplink.rs                     |  63 ++
+ chirpstack-concentratord-2g4/src/main.rs      | 116 ++++
+ chirpstack-concentratord-2g4/src/wrapper.rs   | 214 ++++++
+ libloragw-2g4/Cargo.toml                      |  12 +
+ libloragw-2g4/build.rs                        |  30 +
+ libloragw-2g4/src/gps.rs                      |   7 +
+ libloragw-2g4/src/hal.rs                      | 639 ++++++++++++++++++
+ libloragw-2g4/src/lib.rs                      |   7 +
+ libloragw-2g4/src/mutex.rs                    |   5 +
+ libloragw-2g4/src/wrapper.rs                  |   6 +
+ libloragw-2g4/wrapper.h                       |   3 +
+ 30 files changed, 2075 insertions(+), 3 deletions(-)
+ create mode 100644 chirpstack-concentratord-2g4/Cargo.toml
+ create mode 100644 chirpstack-concentratord-2g4/build.rs
+ create mode 100644 chirpstack-concentratord-2g4/src/cmd/configfile.rs
+ create mode 100644 chirpstack-concentratord-2g4/src/cmd/mod.rs
+ create mode 100644 chirpstack-concentratord-2g4/src/cmd/root.rs
+ create mode 100644 chirpstack-concentratord-2g4/src/concentrator.rs
+ create mode 100644 chirpstack-concentratord-2g4/src/config/mod.rs
+ create mode 100644 chirpstack-concentratord-2g4/src/config/vendor/mod.rs
+ create mode 100644 chirpstack-concentratord-2g4/src/config/vendor/semtech/mod.rs
+ create mode 100644 chirpstack-concentratord-2g4/src/config/vendor/semtech/sx1280z3dsfgw1.rs
+ create mode 100644 chirpstack-concentratord-2g4/src/handler/command.rs
+ create mode 100644 chirpstack-concentratord-2g4/src/handler/config.rs
+ create mode 100644 chirpstack-concentratord-2g4/src/handler/gps.rs
+ create mode 100644 chirpstack-concentratord-2g4/src/handler/jit.rs
+ create mode 100644 chirpstack-concentratord-2g4/src/handler/mod.rs
+ create mode 100644 chirpstack-concentratord-2g4/src/handler/stats.rs
+ create mode 100644 chirpstack-concentratord-2g4/src/handler/uplink.rs
+ create mode 100644 chirpstack-concentratord-2g4/src/main.rs
+ create mode 100644 chirpstack-concentratord-2g4/src/wrapper.rs
+ create mode 100644 libloragw-2g4/Cargo.toml
+ create mode 100644 libloragw-2g4/build.rs
+ create mode 100644 libloragw-2g4/src/gps.rs
+ create mode 100644 libloragw-2g4/src/hal.rs
+ create mode 100644 libloragw-2g4/src/lib.rs
+ create mode 100644 libloragw-2g4/src/mutex.rs
+ create mode 100644 libloragw-2g4/src/wrapper.rs
+ create mode 100644 libloragw-2g4/wrapper.h
+
+diff --git a/Cargo.lock b/Cargo.lock
+index 670248e..be54c5e 100644
+--- a/Cargo.lock
++++ b/Cargo.lock
+@@ -183,6 +183,31 @@ version = "1.0.0"
+ source = "registry+https://github.com/rust-lang/crates.io-index"
+ checksum = "baf1de4339761588bc0619e3cbc0120ee582ebb74b53b4efbf79117bd2da40fd"
+ 
++[[package]]
++name = "chirpstack-concentratord-2g4"
++version = "3.0.4"
++dependencies = [
++ "chirpstack_api",
++ "chrono",
++ "clap",
++ "handlebars",
++ "hex",
++ "humantime-serde",
++ "lazy_static",
++ "libconcentratord",
++ "libloragw-2g4",
++ "log",
++ "prost",
++ "prost-types",
++ "serde",
++ "signal-hook",
++ "simple_logger",
++ "syslog",
++ "toml 0.5.8",
++ "uuid",
++ "zmq",
++]
++
+ [[package]]
+ name = "chirpstack-concentratord-sx1301"
+ version = "3.1.0"
+@@ -589,6 +614,14 @@ dependencies = [
+  "winapi",
+ ]
+ 
++[[package]]
++name = "libloragw-2g4"
++version = "1.0.0"
++dependencies = [
++ "bindgen",
++ "lazy_static",
++]
++
+ [[package]]
+ name = "libloragw-sx1301"
+ version = "1.0.0"
+diff --git a/Cargo.toml b/Cargo.toml
+index c105a2a..2ca5524 100644
+--- a/Cargo.toml
++++ b/Cargo.toml
+@@ -1,9 +1,11 @@
+ [workspace]
+ members = [
++	"chirpstack-concentratord-2g4",
+ 	"chirpstack-concentratord-sx1301",
+ 	"chirpstack-concentratord-sx1302",
+ 	"gateway-id",
+ 	"libloragw-sx1301",
+ 	"libloragw-sx1302",
++	"libloragw-2g4",
+ 	"libconcentratord",
+ ]
+diff --git a/Dockerfile-devel b/Dockerfile-devel
+index ef39eca..657525f 100644
+--- a/Dockerfile-devel
++++ b/Dockerfile-devel
+@@ -30,7 +30,8 @@ RUN cd /tmp && git clone https://github.com/seife/opkg-utils.git && cd /tmp/opkg
+ RUN mkdir -p /hal/native && \
+ 	cd /hal/native && \
+ 	git clone https://github.com/brocaar/lora_gateway.git -b v5.0.1r2 && \
+-	git clone https://github.com/brocaar/sx1302_hal.git -b V2.1.0r1
++	git clone https://github.com/brocaar/sx1302_hal.git -b V2.1.0r1 && \
++	git clone https://github.com/Lora-net/gateway_2g4_hal.git -b V1.1.0
+ 
+ RUN cd /hal/native/lora_gateway && \
+ 	make && \
+@@ -44,15 +45,22 @@ RUN cd /hal/native/sx1302_hal && \
+ 	cp /hal/native/sx1302_hal/libtools/inc/* /usr/include && \
+ 	cp /hal/native/sx1302_hal/libtools/*.a /usr/lib
+ 
++RUN cd /hal/native/gateway_2g4_hal && \
++	make && \
++	ln -s /hal/native/gateway_2g4_hal/libloragw/inc /usr/include/libloragw-2g4 && \
++	ln -s /hal/native/gateway_2g4_hal/libloragw/libloragw.a /usr/lib/libloragw-2g4.a
++
+ RUN mkdir -p /hal/armv5 && \
+ 	cd /hal/armv5 && \
+ 	git clone https://github.com/brocaar/lora_gateway.git -b v5.0.1r2 && \
+-	git clone https://github.com/brocaar/sx1302_hal.git -b V2.1.0r1
++	git clone https://github.com/brocaar/sx1302_hal.git -b V2.1.0r1 && \
++	git clone https://github.com/Lora-net/gateway_2g4_hal.git -b V1.1.0
+ 
+ RUN mkdir -p /hal/armv7hf && \
+ 	cd /hal/armv7hf && \
+ 	git clone https://github.com/brocaar/lora_gateway.git -b v5.0.1r2 && \
+-	git clone https://github.com/brocaar/sx1302_hal.git -b V2.1.0r1
++	git clone https://github.com/brocaar/sx1302_hal.git -b V2.1.0r1 && \
++	git clone https://github.com/Lora-net/gateway_2g4_hal.git -b V1.1.0
+ 
+ # Needed for RAK shields, works with other shields too
+ # RUN sed -i 's/define SPI_SPEED.*/define SPI_SPEED 2000000/g' /hal/armv5/lora_gateway/libloragw/src/loragw_spi.native.c
+@@ -70,6 +78,11 @@ RUN cd /hal/armv5/sx1302_hal && \
+ 	cp /hal/armv5/sx1302_hal/libtools/inc/* /usr/arm-linux-gnueabi/include && \
+ 	cp /hal/armv5/sx1302_hal/libtools/*.a /usr/arm-linux-gnueabi/lib
+ 
++RUN cd /hal/armv5/gateway_2g4_hal && \
++	ARCH=arm CROSS_COMPILE=arm-linux-gnueabi- make && \
++	ln -s /hal/armv5/gateway_2g4_hal/libloragw/inc /usr/arm-linux-gnueabi/include/libloragw-2g4 && \
++	ln -s /hal/armv5/gateway_2g4_hal/libloragw/libloragw.a /usr/arm-linux-gnueabi/lib/libloragw-2g4.a
++
+ RUN cd /hal/armv7hf/lora_gateway && \
+ 	ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf- make && \
+ 	ln -s /hal/armv7hf/lora_gateway/libloragw/inc /usr/arm-linux-gnueabihf/include/libloragw-sx1301 && \
+@@ -82,6 +95,11 @@ RUN cd /hal/armv7hf/sx1302_hal && \
+ 	cp /hal/armv7hf/sx1302_hal/libtools/inc/* /usr/arm-linux-gnueabihf/include && \
+ 	cp /hal/armv7hf/sx1302_hal/libtools/*.a /usr/arm-linux-gnueabihf/lib
+ 
++RUN cd /hal/armv7hf/gateway_2g4_hal && \
++	ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf- make && \
++	ln -s /hal/armv7hf/gateway_2g4_hal/libloragw/inc /usr/arm-linux-gnueabihf/include/libloragw-2g4 && \
++	ln -s /hal/armv7hf/gateway_2g4_hal/libloragw/libloragw.a /usr/arm-linux-gnueabihf/lib/libloragw-2g4.a
++
+ 
+ ENV LLVM_CONFIG_PATH=llvm-config-3.9
+ ENV PROJECT_PATH=/chirpstack-concentratord
+diff --git a/chirpstack-concentratord-2g4/Cargo.toml b/chirpstack-concentratord-2g4/Cargo.toml
+new file mode 100644
+index 0000000..4264d3e
+--- /dev/null
++++ b/chirpstack-concentratord-2g4/Cargo.toml
+@@ -0,0 +1,30 @@
++[package]
++name = "chirpstack-concentratord-2g4"
++version = "3.0.4"
++authors = ["Orne Brocaar <info@brocaar.com>"]
++edition = "2018"
++publish = false
++
++[dependencies]
++libloragw-2g4 = {path = "../libloragw-2g4"}
++libconcentratord = {path = "../libconcentratord"}
++chirpstack_api = { version = "3.9", default-features = false }
++serde = { version = "1.0", features = ["derive"] }
++toml = "0.5"
++clap = "2.33"
++log = "0.4"
++simple_logger = "1.11"
++zmq = "0.9"
++hex = "0.4"
++lazy_static = "1.4"
++uuid = { version = "0.8", features = ["v4"] }
++chrono = "0.4"
++humantime-serde = "1.0"
++syslog = "5.0"
++prost = "0.6.1"
++prost-types = "0.6.1"
++signal-hook = "0.3"
++handlebars = "3.5"
++
++[features]
++default = ['zmq/vendored']
+diff --git a/chirpstack-concentratord-2g4/build.rs b/chirpstack-concentratord-2g4/build.rs
+new file mode 100644
+index 0000000..5f2dde6
+--- /dev/null
++++ b/chirpstack-concentratord-2g4/build.rs
+@@ -0,0 +1,3 @@
++fn main() {
++    println!("cargo:rustc-link-lib=static=stdc++");
++}
+diff --git a/chirpstack-concentratord-2g4/src/cmd/configfile.rs b/chirpstack-concentratord-2g4/src/cmd/configfile.rs
+new file mode 100644
+index 0000000..83030c2
+--- /dev/null
++++ b/chirpstack-concentratord-2g4/src/cmd/configfile.rs
+@@ -0,0 +1,79 @@
++use handlebars::Handlebars;
++
++use super::super::config;
++
++pub fn run(config: &config::Configuration) {
++    let template = r#"
++# Concentratord configuration.
++[concentratord]
++  # Log level.
++  #
++  # Valid options are:
++  #   * TRACE
++  #   * DEBUG
++  #   * INFO
++  #   * WARN
++  #   * ERROR
++  #   * OFF
++  log_level="{{ concentratord.log_level }}"
++
++  # Log to syslog.
++  #
++  # When set to true, log messages are being written to syslog instead of stdout.
++  log_to_syslog={{ concentratord.log_to_syslog }}
++
++  # Statistics interval.
++  stats_interval="{{ concentratord.stats_interval }}"
++
++  # Configuration for the (ZeroMQ based) API.
++  [concentratord.api]
++    # Event PUB socket bind.
++    event_bind="{{ concentratord.api.event_bind }}"
++
++    # Command REP socket bind.
++    command_bind="{{ concentratord.api.command_bind }}"
++
++
++# LoRa gateway configuration.
++[gateway]
++  # Antenna gain (dB).
++  antenna_gain={{ gateway.antenna_gain }}
++
++  # Public LoRaWAN network.
++  lorawan_public={{ gateway.lorawan_public }}
++
++  # Gateway vendor / model.
++  #
++  # This configures various vendor and model specific settings like the min / max
++  # frequency and TX gain table.
++  model="{{ gateway.model }}"
++
++
++  # LoRa concentrator configuration.
++  [gateway.concentrator]
++{{#each gateway.concentrator.channels}}
++    [[gateway.concentrator.channels]]
++      frequency={{ this.frequency }}
++      bandwidth={{ this.bandwidth }}
++      spreading_factor={{ this.spreading_factor }}
++      rssi_offset={{ this.rssi_offset }}
++{{/each}}
++
++
++  # Static gateway location.
++  [gateway.location]
++    # If set to non-zero values, the static gateway location will be reported
++    # when the gateway does not have a GNSS module or when no GNSS location fix
++    # is available.
++    latitude={{ gateway.location.latitude }}
++    longitude={{ gateway.location.longitude }}
++    altitude={{ gateway.location.altitude }}
++"#;
++
++    let reg = Handlebars::new();
++    println!(
++        "{}",
++        reg.render_template(template, config)
++            .expect("render configfile error")
++    );
++}
+diff --git a/chirpstack-concentratord-2g4/src/cmd/mod.rs b/chirpstack-concentratord-2g4/src/cmd/mod.rs
+new file mode 100644
+index 0000000..485ebf0
+--- /dev/null
++++ b/chirpstack-concentratord-2g4/src/cmd/mod.rs
+@@ -0,0 +1,2 @@
++pub mod configfile;
++pub mod root;
+diff --git a/chirpstack-concentratord-2g4/src/cmd/root.rs b/chirpstack-concentratord-2g4/src/cmd/root.rs
+new file mode 100644
+index 0000000..884dbee
+--- /dev/null
++++ b/chirpstack-concentratord-2g4/src/cmd/root.rs
+@@ -0,0 +1,135 @@
++use std::collections::HashMap;
++use std::sync::mpsc::{Receiver, Sender};
++use std::sync::{Arc, Mutex};
++use std::thread;
++
++use libconcentratord::signals;
++use libconcentratord::signals::Signal;
++use libconcentratord::{commands, events, jitqueue, reset};
++use libloragw_2g4::hal;
++
++use super::super::{concentrator, config, handler, wrapper};
++
++pub fn run(
++    config: &config::Configuration,
++    stop_send: Sender<Signal>,
++    stop_receive: Arc<Receiver<Signal>>,
++) -> Result<Signal, String> {
++    info!(
++        "Starting Concentratord 2g4 (version: {}, docs: {})",
++        config::VERSION,
++        "https://www.chirpstack.io/concentratord/"
++    );
++
++    // reset concentrator
++    reset::reset().expect("concentrator reset failed");
++
++    // setup concentrator
++    concentrator::board_setconf(&config)?;
++    concentrator::rx_setconf(&config)?;
++    concentrator::tx_setconf(&config)?;
++    concentrator::start()?;
++
++    // setup static location
++    handler::gps::set_static_gps_coords(
++        config.gateway.location.latitude,
++        config.gateway.location.longitude,
++        config.gateway.location.altitude,
++    );
++
++    // get concentrator eui
++    let gateway_id = concentrator::get_eui().unwrap();
++
++    info!(
++        "Gateway ID retrieved, gateway_id: {:x?}",
++        hex::encode(gateway_id)
++    );
++
++    // setup jit queue
++    let queue: jitqueue::Queue<wrapper::TxPacket> = jitqueue::Queue::new(32);
++    let queue = Arc::new(Mutex::new(queue));
++
++    // setup zeromq
++    events::bind_socket(&config.concentratord.api.event_bind).expect("bind event socket error");
++    let rep_sock = commands::get_socket(&config.concentratord.api.command_bind)
++        .expect("bind command socket error");
++
++    // setup threads
++    let mut signal_pool = signals::SignalPool::new();
++    let mut threads: Vec<thread::JoinHandle<()>> = vec![];
++
++    // uplink thread
++    threads.push(thread::spawn({
++        let gateway_id = gateway_id.clone();
++        let stop_receive = signal_pool.new_receiver();
++
++        move || {
++            handler::uplink::handle_loop(&gateway_id, stop_receive);
++        }
++    }));
++
++    // jit thread
++    threads.push(thread::spawn({
++        let queue = Arc::clone(&queue);
++        let antenna_gain = config.gateway.antenna_gain;
++        let stop_receive = signal_pool.new_receiver();
++
++        move || {
++            handler::jit::jit_loop(queue, antenna_gain, stop_receive);
++        }
++    }));
++
++    // command thread
++    threads.push(thread::spawn({
++        let vendor_config = config.gateway.model_config.clone();
++        let gateway_id = gateway_id.clone();
++        let stop_receive = signal_pool.new_receiver();
++        let stop_send = stop_send.clone();
++        let lorawan_public = config.gateway.lorawan_public;
++
++        move || {
++            handler::command::handle_loop(
++                lorawan_public,
++                &vendor_config,
++                &gateway_id,
++                queue,
++                rep_sock,
++                stop_receive,
++                stop_send,
++            );
++        }
++    }));
++
++    // stats thead
++    threads.push(thread::spawn({
++        let gateway_id = gateway_id.clone();
++        let stats_interval = config.concentratord.stats_interval;
++        let stop_receive = signal_pool.new_receiver();
++        let mut metadata = HashMap::new();
++        metadata.insert(
++            "config_version".to_string(),
++            config.gateway.config_version.clone(),
++        );
++        metadata.insert(
++            "concentratord_version".to_string(),
++            config::VERSION.to_string(),
++        );
++        metadata.insert("model".to_string(), config.gateway.model.clone());
++        metadata.insert("hal_version".to_string(), hal::version_info());
++
++        move || {
++            handler::stats::stats_loop(&gateway_id, &stats_interval, stop_receive, &metadata);
++        }
++    }));
++
++    let stop_signal = stop_receive.recv().unwrap();
++    signal_pool.send_signal(stop_signal.clone());
++
++    for t in threads {
++        t.join().unwrap();
++    }
++
++    concentrator::stop()?;
++
++    return Ok(stop_signal);
++}
+diff --git a/chirpstack-concentratord-2g4/src/concentrator.rs b/chirpstack-concentratord-2g4/src/concentrator.rs
+new file mode 100644
+index 0000000..6bd69c5
+--- /dev/null
++++ b/chirpstack-concentratord-2g4/src/concentrator.rs
+@@ -0,0 +1,79 @@
++use libloragw_2g4::hal;
++
++use super::config::Configuration;
++
++pub fn board_setconf(config: &Configuration) -> Result<(), String> {
++    let board_config = hal::BoardConfig {
++        tty_path: config.gateway.model_config.tty_path.clone(),
++    };
++
++    info!("Setting board configuration");
++    hal::board_setconf(&board_config)?;
++
++    return Ok(());
++}
++
++pub fn rx_setconf(config: &Configuration) -> Result<(), String> {
++    info!("Setting up concentrator channels");
++
++    for (i, channel) in config.gateway.concentrator.channels.iter().enumerate() {
++        info!(
++            "Configuring channel: {}, center_freq: {}",
++            i, channel.frequency
++        );
++
++        hal::channel_rx_setconf(
++            i as u8,
++            &hal::ChannelRxConfig {
++                enable: channel.frequency > 0,
++                freq_hz: channel.frequency,
++                bandwidth: channel.bandwidth,
++                datarate: match channel.spreading_factor {
++                    5 => hal::DataRate::SF5,
++                    6 => hal::DataRate::SF6,
++                    7 => hal::DataRate::SF7,
++                    8 => hal::DataRate::SF8,
++                    9 => hal::DataRate::SF9,
++                    10 => hal::DataRate::SF10,
++                    11 => hal::DataRate::SF11,
++                    12 => hal::DataRate::SF12,
++                    _ => {
++                        return Err("invalid spreading_factor".to_string());
++                    }
++                },
++                rssi_offset: channel.rssi_offset,
++                sync_word: match config.gateway.lorawan_public {
++                    true => 0x21,
++                    false => 0x12,
++                },
++            },
++        )?;
++    }
++
++    return Ok(());
++}
++
++pub fn tx_setconf(config: &Configuration) -> Result<(), String> {
++    let enable = config.gateway.model_config.min_max_tx_freq.1 > 0;
++    info!("Configuring tx path, enable: {}", enable);
++    hal::channel_tx_setconf(&hal::ChannelTxConfig { enable: enable })?;
++
++    return Ok(());
++}
++
++pub fn start() -> Result<(), String> {
++    info!("Starting the concentrator");
++    hal::start()?;
++    return Ok(());
++}
++
++pub fn stop() -> Result<(), String> {
++    info!("Stopping the concentrator");
++    hal::stop()?;
++    return Ok(());
++}
++
++pub fn get_eui() -> Result<[u8; 8], String> {
++    debug!("Getting the gateway EUI");
++    return hal::get_eui();
++}
+diff --git a/chirpstack-concentratord-2g4/src/config/mod.rs b/chirpstack-concentratord-2g4/src/config/mod.rs
+new file mode 100644
+index 0000000..6011d26
+--- /dev/null
++++ b/chirpstack-concentratord-2g4/src/config/mod.rs
+@@ -0,0 +1,131 @@
++use std::fs;
++
++use serde::{Deserialize, Serialize};
++use std::time::Duration;
++
++pub mod vendor;
++
++pub const VERSION: &'static str = env!("CARGO_PKG_VERSION");
++
++#[derive(Default, Serialize, Deserialize)]
++#[serde(default = "example_configuration")]
++pub struct Configuration {
++    pub concentratord: Concentratord,
++    pub gateway: Gateway,
++}
++
++#[derive(Default, Serialize, Deserialize)]
++pub struct Concentratord {
++    pub log_level: String,
++    #[serde(default)]
++    pub log_to_syslog: bool,
++    #[serde(with = "humantime_serde")]
++    pub stats_interval: Duration,
++    pub api: API,
++}
++
++#[derive(Default, Serialize, Deserialize)]
++pub struct API {
++    pub event_bind: String,
++    pub command_bind: String,
++}
++
++#[derive(Default, Serialize, Deserialize)]
++pub struct Gateway {
++    #[serde(default)]
++    pub antenna_gain: i8,
++    #[serde(default)]
++    pub lorawan_public: bool,
++    pub model: String,
++    #[serde(default)]
++    pub model_flags: Vec<String>,
++    pub concentrator: Concentrator,
++    #[serde(default)]
++    pub location: Location,
++    #[serde(skip)]
++    pub model_config: vendor::Configuration,
++    #[serde(skip)]
++    pub config_version: String,
++}
++
++#[derive(Default, Serialize, Deserialize, Debug, PartialEq)]
++pub struct Concentrator {
++    pub channels: [Channel; 3],
++}
++
++#[derive(Default, Serialize, Deserialize, Debug, PartialEq)]
++pub struct Channel {
++    pub frequency: u32,
++    pub bandwidth: u32,
++    pub spreading_factor: u32,
++    #[serde(default)]
++    pub rssi_offset: f32,
++}
++
++#[derive(Default, Serialize, Deserialize)]
++pub struct Location {
++    pub latitude: f64,
++    pub longitude: f64,
++    pub altitude: i16,
++}
++
++fn example_configuration() -> Configuration {
++    Configuration {
++        concentratord: Concentratord {
++            log_level: "INFO".to_string(),
++            stats_interval: Duration::from_secs(30),
++            api: API {
++                event_bind: "ipc:///tmp/concentratord_event".to_string(),
++                command_bind: "ipc:///tmp/concentratord_command".to_string(),
++            },
++            ..Default::default()
++        },
++        gateway: Gateway {
++            lorawan_public: true,
++            model: "semtech_sx1280z3dsfgw1".to_string(),
++            concentrator: Concentrator {
++                channels: [
++                    Channel {
++                        frequency: 2403000000,
++                        bandwidth: 812000,
++                        spreading_factor: 12,
++                        rssi_offset: 0.0,
++                    },
++                    Channel {
++                        frequency: 2479000000,
++                        bandwidth: 812000,
++                        spreading_factor: 12,
++                        rssi_offset: 0.0,
++                    },
++                    Channel {
++                        frequency: 2425000000,
++                        bandwidth: 812000,
++                        spreading_factor: 12,
++                        rssi_offset: 0.0,
++                    },
++                ],
++            },
++            ..Default::default()
++        },
++    }
++}
++
++pub fn get(filenames: Vec<String>) -> Configuration {
++    let mut content: String = String::new();
++
++    for file_name in &filenames {
++        content.push_str(&fs::read_to_string(&file_name).expect("Error reading config file"));
++    }
++
++    let mut config: Configuration = toml::from_str(&content).expect("Error parsing config file");
++
++    // get model configuration
++    config.gateway.model_config = match config.gateway.model.as_ref() {
++        "semtech_sx1280z3dsfgw1" => vendor::semtech::sx1280z3dsfgw1::new(&config),
++        _ => panic!("unexpected gateway model: {}", config.gateway.model),
++    };
++
++    debug!("Antenna gain {} dBi", config.gateway.antenna_gain);
++
++    return config;
++}
+diff --git a/chirpstack-concentratord-2g4/src/config/vendor/mod.rs b/chirpstack-concentratord-2g4/src/config/vendor/mod.rs
+new file mode 100644
+index 0000000..a48d3fc
+--- /dev/null
++++ b/chirpstack-concentratord-2g4/src/config/vendor/mod.rs
+@@ -0,0 +1,9 @@
++pub mod semtech;
++
++#[derive(Default, Clone)]
++pub struct Configuration {
++    pub tty_path: String,
++    pub min_max_tx_freq: (u32, u32),
++    pub reset_pin: Option<u32>,
++    pub boot0_pin: Option<u32>,
++}
+diff --git a/chirpstack-concentratord-2g4/src/config/vendor/semtech/mod.rs b/chirpstack-concentratord-2g4/src/config/vendor/semtech/mod.rs
+new file mode 100644
+index 0000000..2d15dbd
+--- /dev/null
++++ b/chirpstack-concentratord-2g4/src/config/vendor/semtech/mod.rs
+@@ -0,0 +1 @@
++pub mod sx1280z3dsfgw1;
+diff --git a/chirpstack-concentratord-2g4/src/config/vendor/semtech/sx1280z3dsfgw1.rs b/chirpstack-concentratord-2g4/src/config/vendor/semtech/sx1280z3dsfgw1.rs
+new file mode 100644
+index 0000000..cd8a109
+--- /dev/null
++++ b/chirpstack-concentratord-2g4/src/config/vendor/semtech/sx1280z3dsfgw1.rs
+@@ -0,0 +1,11 @@
++use super::super::super::super::config;
++use super::super::Configuration;
++
++pub fn new(_conf: &config::Configuration) -> Configuration {
++    Configuration {
++        tty_path: "/dev/ttyACM0".to_string(),
++        min_max_tx_freq: (2400000000, 2483500000),
++        reset_pin: Some(32),
++        boot0_pin: Some(18),
++    }
++}
+diff --git a/chirpstack-concentratord-2g4/src/handler/command.rs b/chirpstack-concentratord-2g4/src/handler/command.rs
+new file mode 100644
+index 0000000..7b2781a
+--- /dev/null
++++ b/chirpstack-concentratord-2g4/src/handler/command.rs
+@@ -0,0 +1,144 @@
++use std::sync::mpsc::{Receiver, Sender};
++use std::sync::{Arc, Mutex};
++use std::time::Duration;
++
++use libconcentratord::signals::Signal;
++use libconcentratord::{commands, jitqueue, stats};
++use libloragw_2g4::hal;
++use prost::Message;
++use uuid::Uuid;
++
++use super::super::config::vendor;
++use super::super::wrapper;
++
++pub fn handle_loop(
++    lorawan_public: bool,
++    vendor_config: &vendor::Configuration,
++    gateway_id: &[u8],
++    queue: Arc<Mutex<jitqueue::Queue<wrapper::TxPacket>>>,
++    rep_sock: zmq::Socket,
++    stop_receive: Receiver<Signal>,
++    stop_send: Sender<Signal>,
++) {
++    debug!("Starting command handler loop");
++
++    // A timeout is used so that we can consume from the stop signal.
++    let reader = commands::Reader::new(&rep_sock, Duration::from_millis(100));
++
++    for cmd in reader {
++        match stop_receive.recv_timeout(Duration::from_millis(0)) {
++            Ok(v) => {
++                debug!("Received stop signal, signal: {}", v);
++                break;
++            }
++            _ => {}
++        };
++
++        let resp = match cmd {
++            commands::Command::Timeout => {
++                continue;
++            }
++            commands::Command::Downlink(pl) => {
++                match handle_downlink(lorawan_public, vendor_config, gateway_id, &queue, &pl) {
++                    Ok(v) => v,
++                    Err(_) => Vec::new(),
++                }
++            }
++            commands::Command::GatewayID => gateway_id.to_vec(),
++            commands::Command::Configuration(pl) => {
++                match handle_configuration(stop_send.clone(), pl) {
++                    Ok(v) => v,
++                    Err(_) => Vec::new(),
++                }
++            }
++            commands::Command::Error(err) => {
++                error!("Read command error, error: {}", err);
++                Vec::new()
++            }
++            commands::Command::Unknown(command, _) => {
++                warn!("Unknown command received, command: {}", command);
++                Vec::new()
++            }
++        };
++
++        rep_sock.send(resp, 0).unwrap();
++    }
++
++    debug!("Command loop ended");
++}
++
++fn handle_downlink(
++    lorawan_public: bool,
++    vendor_config: &vendor::Configuration,
++    gateway_id: &[u8],
++    queue: &Arc<Mutex<jitqueue::Queue<wrapper::TxPacket>>>,
++    pl: &chirpstack_api::gw::DownlinkFrame,
++) -> Result<Vec<u8>, ()> {
++    let id = match Uuid::from_slice(&pl.downlink_id) {
++        Ok(v) => v,
++        Err(err) => {
++            error!("Decode downlink_id error: {}", err);
++            return Err(());
++        }
++    };
++
++    stats::inc_tx_packets_received();
++
++    let mut tx_ack = chirpstack_api::gw::DownlinkTxAck {
++        gateway_id: gateway_id.to_vec(),
++        token: pl.token,
++        downlink_id: pl.downlink_id.to_vec(),
++        items: vec![Default::default(); pl.items.len()],
++        ..Default::default()
++    };
++
++    for (i, item) in pl.items.iter().enumerate() {
++        // convert protobuf to hal struct
++        let tx_packet = match wrapper::downlink_from_proto(lorawan_public, item) {
++            Ok(v) => v,
++            Err(error) => {
++                error!(
++                    "Convert downlink protobuf to HAL struct error, downlink_id: {}, error: {}",
++                    id, error,
++                );
++                return Err(());
++            }
++        };
++
++        // validate frequency range
++        let freqs = vendor_config.min_max_tx_freq;
++        if tx_packet.freq_hz < freqs.0 || tx_packet.freq_hz > freqs.1 {
++            error!("Frequency is not within min/max gateway frequency, downlink_id: {}, min_freq: {}, max_freq: {}", id, freqs.0, freqs.1);
++            tx_ack.items[i].set_status(chirpstack_api::gw::TxAckStatus::TxFreq);
++
++            // try next
++            continue;
++        }
++
++        // try enqueue
++        match queue.lock().unwrap().enqueue(
++            hal::get_instcnt().expect("get concentrator count error"),
++            wrapper::TxPacket::new(id, tx_packet),
++        ) {
++            Ok(_) => {
++                tx_ack.items[i].set_status(chirpstack_api::gw::TxAckStatus::Ok);
++
++                // break out of for loop
++                break;
++            }
++            Err(status) => tx_ack.items[i].set_status(status),
++        };
++    }
++
++    let mut buf = Vec::new();
++    tx_ack.encode(&mut buf).unwrap();
++    return Ok(buf);
++}
++
++fn handle_configuration(
++    stop_send: Sender<Signal>,
++    pl: chirpstack_api::gw::GatewayConfiguration,
++) -> Result<Vec<u8>, ()> {
++    stop_send.send(Signal::Configuration(pl)).unwrap();
++    return Ok(Vec::new());
++}
+diff --git a/chirpstack-concentratord-2g4/src/handler/config.rs b/chirpstack-concentratord-2g4/src/handler/config.rs
+new file mode 100644
+index 0000000..b4e76da
+--- /dev/null
++++ b/chirpstack-concentratord-2g4/src/handler/config.rs
+@@ -0,0 +1,147 @@
++use super::super::config::{Channel, Concentrator, Configuration};
++
++pub fn update_configuration(
++    config: &mut Configuration,
++    new_config: &chirpstack_api::gw::GatewayConfiguration,
++) -> Result<(), String> {
++    info!("Updating concentrator configuration");
++
++    // empty concentrator config
++    let mut concentrator = Concentrator::default();
++
++    if new_config.channels.len() > concentrator.channels.len() {
++        return Err("configuration exceeds max number of channels".to_string());
++    }
++
++    for (i, channel) in new_config.channels.iter().enumerate() {
++        match &channel.modulation_config {
++            Some(
++                chirpstack_api::gw::channel_configuration::ModulationConfig::LoraModulationConfig(
++                    v,
++                ),
++            ) => {
++                if v.spreading_factors.len() != 1 {
++                    return Err(
++                        "spreading_factors must contain a single spreading-factor".to_string()
++                    );
++                }
++
++                concentrator.channels[i] = Channel {
++                    frequency: channel.frequency,
++                    bandwidth: v.bandwidth,
++                    spreading_factor: v.spreading_factors[0],
++                    rssi_offset: 0.0,
++                };
++            }
++            _ => {
++                return Err("channel modulation must be LORA".to_string());
++            }
++        }
++    }
++
++    // set config
++    config.gateway.config_version = new_config.version.clone();
++    config.gateway.concentrator = concentrator;
++
++    return Ok(());
++}
++
++#[cfg(test)]
++mod tests {
++    use super::super::super::config::Channel;
++    use super::{update_configuration, Concentrator, Configuration};
++
++    #[test]
++    fn test_update_configuration() {
++        let tests = vec![(
++            "Single channel",
++            chirpstack_api::gw::GatewayConfiguration {
++                channels: vec![
++                    chirpstack_api::gw::ChannelConfiguration{
++                        frequency: 2403000000,
++                        modulation: chirpstack_api::common::Modulation::Lora as i32,
++                        modulation_config: Some(chirpstack_api::gw::channel_configuration::ModulationConfig::LoraModulationConfig(chirpstack_api::gw::LoRaModulationConfig{
++                            bandwidth: 812000,
++                            spreading_factors: vec![12],
++                        })),
++                        ..Default::default()
++                    },
++                ],
++                ..Default::default()
++            },
++            Concentrator {
++                channels: [Channel {
++                    frequency: 2403000000,
++                    bandwidth: 812000,
++                    spreading_factor: 12,
++                    rssi_offset: 0.0,
++                }, 
++                Channel { ..Default::default() },
++                Channel { ..Default::default() },
++                ],
++            },
++            ), (
++            "Three channels",
++            chirpstack_api::gw::GatewayConfiguration {
++                channels: vec![
++                    chirpstack_api::gw::ChannelConfiguration{
++                        frequency: 2403000000,
++                        modulation: chirpstack_api::common::Modulation::Lora as i32,
++                        modulation_config: Some(chirpstack_api::gw::channel_configuration::ModulationConfig::LoraModulationConfig(chirpstack_api::gw::LoRaModulationConfig{
++                            bandwidth: 812000,
++                            spreading_factors: vec![12],
++                        })),
++                        ..Default::default()
++                    },
++                    chirpstack_api::gw::ChannelConfiguration{
++                        frequency: 2479000000,
++                        modulation: chirpstack_api::common::Modulation::Lora as i32,
++                        modulation_config: Some(chirpstack_api::gw::channel_configuration::ModulationConfig::LoraModulationConfig(chirpstack_api::gw::LoRaModulationConfig{
++                            bandwidth: 812000,
++                            spreading_factors: vec![12],
++                        })),
++                        ..Default::default()
++                    },
++                    chirpstack_api::gw::ChannelConfiguration{
++                        frequency: 2425000000,
++                        modulation: chirpstack_api::common::Modulation::Lora as i32,
++                        modulation_config: Some(chirpstack_api::gw::channel_configuration::ModulationConfig::LoraModulationConfig(chirpstack_api::gw::LoRaModulationConfig{
++                            bandwidth: 812000,
++                            spreading_factors: vec![12],
++                        })),
++                        ..Default::default()
++                    },
++                ],
++                ..Default::default()
++            },
++            Concentrator {
++                channels: [
++                    Channel {
++                        frequency: 2403000000,
++                        bandwidth: 812000,
++                        spreading_factor: 12,
++                        rssi_offset: 0.0,
++                    },
++                    Channel {
++                        frequency: 2479000000,
++                        bandwidth: 812000,
++                        spreading_factor: 12,
++                        rssi_offset: 0.0,
++                    }, 
++                    Channel {
++                        frequency: 2425000000,
++                        bandwidth: 812000,
++                        spreading_factor: 12,
++                        rssi_offset: 0.0,
++                    }, 
++                ],
++            },
++        )];
++
++        for (_, gw_config, expected_config) in tests {
++            let mut config = Configuration::default();
++            update_configuration(&mut config, &gw_config).unwrap();
++            assert_eq!(config.gateway.concentrator, expected_config);
++        }
++    }
++}
+diff --git a/chirpstack-concentratord-2g4/src/handler/gps.rs b/chirpstack-concentratord-2g4/src/handler/gps.rs
+new file mode 100644
+index 0000000..56ab607
+--- /dev/null
++++ b/chirpstack-concentratord-2g4/src/handler/gps.rs
+@@ -0,0 +1,26 @@
++use std::sync::Mutex;
++
++use libloragw_2g4::gps;
++
++lazy_static! {
++    static ref STATIC_GPS_COORDS: Mutex<Option<gps::Coordinates>> = Mutex::new(None);
++}
++
++pub fn set_static_gps_coords(lat: f64, lon: f64, alt: i16) {
++    let mut static_gps_coords = STATIC_GPS_COORDS.lock().unwrap();
++
++    if lat != 0.0 || lon != 0.0 || alt != 0 {
++        *static_gps_coords = Some(gps::Coordinates {
++            latitude: lat,
++            longitude: lon,
++            altitude: alt,
++        })
++    } else {
++        *static_gps_coords = None;
++    }
++}
++
++pub fn get_coords() -> Option<gps::Coordinates> {
++    let static_gps_coords = STATIC_GPS_COORDS.lock().unwrap();
++    return *static_gps_coords;
++}
+diff --git a/chirpstack-concentratord-2g4/src/handler/jit.rs b/chirpstack-concentratord-2g4/src/handler/jit.rs
+new file mode 100644
+index 0000000..51193ad
+--- /dev/null
++++ b/chirpstack-concentratord-2g4/src/handler/jit.rs
+@@ -0,0 +1,65 @@
++use std::sync::mpsc::Receiver;
++use std::sync::{Arc, Mutex};
++use std::time::Duration;
++
++use libconcentratord::jitqueue::TxPacket;
++use libconcentratord::signals::Signal;
++use libconcentratord::{jitqueue, stats};
++use libloragw_2g4::hal;
++
++use super::super::wrapper;
++
++pub fn jit_loop(
++    queue: Arc<Mutex<jitqueue::Queue<wrapper::TxPacket>>>,
++    antenna_gain: i8,
++    stop_receive: Receiver<Signal>,
++) {
++    debug!("Start JIT queue loop");
++
++    loop {
++        // Instead of a 10ms sleep, we receive from the stop channel with a
++        // timeout of 10ms.
++        match stop_receive.recv_timeout(Duration::from_millis(10)) {
++            Ok(v) => {
++                debug!("Received stop signal, signal: {}", v);
++                break;
++            }
++            _ => {}
++        };
++
++        let tx_packet = match get_tx_packet(&queue) {
++            Some(v) => v,
++            None => continue,
++        };
++
++        let downlink_id = tx_packet.get_id();
++        let mut tx_packet = tx_packet.tx_packet();
++        tx_packet.rf_power = tx_packet.rf_power - antenna_gain;
++
++        match hal::send(&tx_packet) {
++            Ok(_) => {
++                info!("Scheduled packet for TX, downlink_id: {}, count_us: {}, freq: {}, bw: {}, mod: {:?}, dr: {:?}",
++                    downlink_id,
++                    tx_packet.count_us,
++                    tx_packet.freq_hz,
++                    tx_packet.bandwidth,
++                    hal::Modulation::LoRa,
++                    tx_packet.datarate
++                    );
++
++                stats::inc_tx_packets_emitted();
++            }
++            Err(err) => {
++                error!("Schedule packet for tx error, error: {}", err);
++            }
++        }
++    }
++}
++
++fn get_tx_packet(
++    queue: &Arc<Mutex<jitqueue::Queue<wrapper::TxPacket>>>,
++) -> Option<wrapper::TxPacket> {
++    let concentrator_count = hal::get_instcnt().expect("get concentrator count error");
++    let mut queue = queue.lock().unwrap();
++    return queue.pop(concentrator_count);
++}
+diff --git a/chirpstack-concentratord-2g4/src/handler/mod.rs b/chirpstack-concentratord-2g4/src/handler/mod.rs
+new file mode 100644
+index 0000000..908a988
+--- /dev/null
++++ b/chirpstack-concentratord-2g4/src/handler/mod.rs
+@@ -0,0 +1,6 @@
++pub mod command;
++pub mod config;
++pub mod gps;
++pub mod jit;
++pub mod stats;
++pub mod uplink;
+diff --git a/chirpstack-concentratord-2g4/src/handler/stats.rs b/chirpstack-concentratord-2g4/src/handler/stats.rs
+new file mode 100644
+index 0000000..1cc2bfc
+--- /dev/null
++++ b/chirpstack-concentratord-2g4/src/handler/stats.rs
+@@ -0,0 +1,49 @@
++use std::collections::HashMap;
++use std::sync::mpsc::Receiver;
++use std::time::Duration;
++
++use libconcentratord::signals::Signal;
++use libconcentratord::stats;
++
++use super::gps;
++
++pub fn stats_loop(
++    gateway_id: &[u8],
++    stats_interval: &Duration,
++    stop_receive: Receiver<Signal>,
++    metadata: &HashMap<String, String>,
++) {
++    debug!("Starting stats loop, stats_interval: {:?}", stats_interval);
++
++    loop {
++        // Instead of a 'stats interval' sleep, we receive from the stop channel with a
++        // timeout equal to the 'stats interval'.
++        match stop_receive.recv_timeout(*stats_interval) {
++            Ok(v) => {
++                debug!("Received stop signal, signal: {}", v);
++                break;
++            }
++            _ => {}
++        };
++
++        // fetch the current gps coordinates
++        let loc = match gps::get_coords() {
++            Some(v) => Some({
++                let mut loc = chirpstack_api::common::Location {
++                    latitude: v.latitude,
++                    longitude: v.longitude,
++                    altitude: v.altitude as f64,
++                    ..Default::default()
++                };
++
++                loc.set_source(chirpstack_api::common::LocationSource::Gps);
++                loc
++            }),
++            None => None,
++        };
++
++        stats::send_and_reset(gateway_id, loc, metadata).expect("sending stats failed");
++    }
++
++    debug!("Stats loop ended");
++}
+diff --git a/chirpstack-concentratord-2g4/src/handler/uplink.rs b/chirpstack-concentratord-2g4/src/handler/uplink.rs
+new file mode 100644
+index 0000000..3178d2d
+--- /dev/null
++++ b/chirpstack-concentratord-2g4/src/handler/uplink.rs
+@@ -0,0 +1,63 @@
++use std::sync::mpsc::Receiver;
++use std::thread;
++use std::time::Duration;
++
++use libconcentratord::signals::Signal;
++use libconcentratord::{events, stats};
++use libloragw_2g4::hal;
++use uuid::Uuid;
++
++use super::super::wrapper;
++
++pub fn handle_loop(gateway_id: &[u8], stop_receive: Receiver<Signal>) {
++    debug!("Starting uplink handle loop");
++
++    loop {
++        match stop_receive.recv_timeout(Duration::from_millis(0)) {
++            Ok(v) => {
++                debug!("Received stop signal, signal: {}", v);
++                break;
++            }
++            _ => {}
++        };
++
++        match hal::receive() {
++            Ok(frames) => {
++                for frame in frames {
++                    let proto = match wrapper::uplink_to_proto(gateway_id.clone(), &frame) {
++                        Ok(v) => v,
++                        Err(err) => {
++                            error!("Convert uplink frame to protobuf error, error: {}", err);
++                            continue;
++                        }
++                    };
++
++                    let rx_info = proto.rx_info.as_ref().unwrap();
++                    let uuid = Uuid::from_slice(&rx_info.uplink_id).unwrap();
++
++                    info!(
++                        "Frame received, uplink_id: {}, count_us: {}, freq: {}, bw: {}, mod: {:?}, dr: {:?}",
++                        uuid,
++                        frame.count_us,
++                        frame.freq_hz,
++                        frame.bandwidth,
++                        frame.modulation,
++                        frame.datarate,
++                    );
++
++                    stats::inc_rx_packets_received();
++                    if rx_info.crc_status() == chirpstack_api::gw::CrcStatus::CrcOk {
++                        stats::inc_rx_packets_received_ok();
++                    }
++
++                    events::send_uplink(&proto).unwrap();
++                }
++            }
++            Err(_) => error!("Receive error"),
++        };
++
++        thread::sleep(Duration::from_millis(10));
++    }
++
++    debug!("Uplink loop ended");
++}
+diff --git a/chirpstack-concentratord-2g4/src/main.rs b/chirpstack-concentratord-2g4/src/main.rs
+new file mode 100644
+index 0000000..9d7306e
+--- /dev/null
++++ b/chirpstack-concentratord-2g4/src/main.rs
+@@ -0,0 +1,116 @@
++#[macro_use]
++extern crate log;
++#[macro_use]
++extern crate lazy_static;
++extern crate simple_logger;
++extern crate syslog;
++
++use std::process;
++use std::str::FromStr;
++use std::sync::mpsc::channel;
++use std::sync::Arc;
++use std::thread;
++
++use clap::{App, Arg};
++use signal_hook::consts::signal::SIGINT;
++use signal_hook::iterator::Signals;
++use simple_logger::SimpleLogger;
++use syslog::{BasicLogger, Facility, Formatter3164};
++
++use libconcentratord::reset;
++use libconcentratord::signals::Signal;
++
++mod cmd;
++mod concentrator;
++mod config;
++mod handler;
++mod wrapper;
++
++fn main() {
++    let matches = App::new("concentratord")
++        .version(config::VERSION)
++        .author("Orne Brocaar <info@brocaar.com>")
++        .about("LoRa concentrator HAL daemon (2.4GHz)")
++        .arg(
++            Arg::with_name("config")
++                .short("c")
++                .long("config")
++                .value_name("FILE")
++                .multiple(true)
++                .number_of_values(1)
++                .help("Path to configuration file")
++                .takes_value(true),
++        )
++        .subcommand(App::new("configfile").about("Print the configuration template"))
++        .get_matches();
++
++    let config_files = matches.values_of_lossy("config").unwrap_or(vec![]);
++    let mut config = config::get(config_files);
++
++    if let Some(_) = matches.subcommand_matches("configfile") {
++        cmd::configfile::run(&config);
++        process::exit(0);
++    }
++
++    if config.concentratord.log_to_syslog {
++        let formatter = Formatter3164 {
++            facility: Facility::LOG_USER,
++            hostname: None,
++            process: "chirpstack-concentratord-sx1301".into(),
++            pid: process::id() as i32,
++        };
++        let logger = syslog::unix(formatter).expect("could not connect to syslog");
++        log::set_boxed_logger(Box::new(BasicLogger::new(logger)))
++            .map(|()| {
++                log::set_max_level(
++                    log::Level::from_str(&config.concentratord.log_level)
++                        .unwrap()
++                        .to_level_filter(),
++                )
++            })
++            .unwrap();
++    } else {
++        SimpleLogger::new()
++            .with_level(
++                log::Level::from_str(&config.concentratord.log_level)
++                    .unwrap()
++                    .to_level_filter(),
++            )
++            .init()
++            .unwrap();
++    }
++
++    let mut signals = Signals::new(&[SIGINT]).expect("error registering channels");
++    let (stop_send, stop_receive) = channel();
++    let stop_receive = Arc::new(stop_receive);
++
++    thread::spawn({
++        let stop_send = stop_send.clone();
++
++        move || {
++            let mut signal_iter = signals.forever();
++            let _ = signal_iter.next();
++            warn!("Received stop signal, stopping Concentratord");
++            stop_send.send(Signal::Stop).unwrap();
++            let _ = signal_iter.next();
++            warn!("Received stop signal, terminating Concentratord immediately");
++            process::exit(0);
++        }
++    });
++
++    // configure concentrator reset pin
++    if config.gateway.model_config.reset_pin.is_some() {
++        reset::setup_pins(config.gateway.model_config.reset_pin.unwrap(), None)
++            .expect("setup reset pin error");
++    }
++
++    loop {
++        match cmd::root::run(&config, stop_send.clone(), stop_receive.clone()).unwrap() {
++            Signal::Stop => process::exit(0),
++            Signal::Configuration(new_config) => {
++                handler::config::update_configuration(&mut config, &new_config)
++                    .expect("update configuration failed")
++            }
++        }
++    }
++}
+diff --git a/chirpstack-concentratord-2g4/src/wrapper.rs b/chirpstack-concentratord-2g4/src/wrapper.rs
+new file mode 100644
+index 0000000..21958ae
+--- /dev/null
++++ b/chirpstack-concentratord-2g4/src/wrapper.rs
+@@ -0,0 +1,214 @@
++use std::time::Duration;
++
++use libconcentratord::jitqueue;
++use libloragw_2g4::hal;
++use uuid::Uuid;
++
++#[derive(Copy, Clone)]
++pub struct TxPacket(hal::TxPacket, Uuid);
++
++impl TxPacket {
++    pub fn new(id: Uuid, tx_packet: hal::TxPacket) -> TxPacket {
++        TxPacket(tx_packet, id)
++    }
++
++    pub fn tx_packet(&self) -> hal::TxPacket {
++        self.0
++    }
++}
++
++impl jitqueue::TxPacket for TxPacket {
++    fn get_time_on_air(&self) -> Result<Duration, String> {
++        hal::time_on_air(&self.0)
++    }
++
++    fn get_tx_mode(&self) -> jitqueue::TxMode {
++        match self.0.tx_mode {
++            hal::TxMode::Timestamped => jitqueue::TxMode::Timestamped,
++            hal::TxMode::OnGPS => jitqueue::TxMode::OnGPS,
++            hal::TxMode::Immediate => jitqueue::TxMode::Immediate,
++            hal::TxMode::CWOn => panic!("CWOn is not supported in queue"),
++            hal::TxMode::CWOff => panic!("CWOff is not supported in queue"),
++        }
++    }
++
++    fn set_tx_mode(&mut self, tx_mode: jitqueue::TxMode) {
++        self.0.tx_mode = match tx_mode {
++            jitqueue::TxMode::Timestamped => hal::TxMode::Timestamped,
++            jitqueue::TxMode::OnGPS => hal::TxMode::OnGPS,
++            jitqueue::TxMode::Immediate => hal::TxMode::Immediate,
++        };
++    }
++
++    fn get_count_us(&self) -> u32 {
++        self.0.count_us
++    }
++
++    fn set_count_us(&mut self, cout_us: u32) {
++        self.0.count_us = cout_us;
++    }
++
++    fn get_id(&self) -> String {
++        self.1.to_string()
++    }
++}
++
++pub fn uplink_to_proto(
++    gateway_id: &[u8],
++    packet: &hal::RxPacket,
++) -> Result<chirpstack_api::gw::UplinkFrame, String> {
++    // tx info
++    let mut tx_info: chirpstack_api::gw::UplinkTxInfo = Default::default();
++    tx_info.frequency = packet.freq_hz;
++
++    match packet.modulation {
++        hal::Modulation::LoRa => {
++            let mut mod_info: chirpstack_api::gw::LoRaModulationInfo = Default::default();
++            mod_info.bandwidth = packet.bandwidth;
++            mod_info.spreading_factor = match packet.datarate {
++                hal::DataRate::SF5 => 5,
++                hal::DataRate::SF6 => 6,
++                hal::DataRate::SF7 => 7,
++                hal::DataRate::SF8 => 8,
++                hal::DataRate::SF9 => 9,
++                hal::DataRate::SF10 => 10,
++                hal::DataRate::SF11 => 11,
++                hal::DataRate::SF12 => 12,
++            };
++            mod_info.code_rate = match packet.coderate {
++                hal::CodeRate::LoRa4_5 => "4/5".to_string(),
++                hal::CodeRate::LoRa4_6 => "4/6".to_string(),
++                hal::CodeRate::LoRa4_7 => "4/7".to_string(),
++                hal::CodeRate::LoRa4_8 => "4/8".to_string(),
++                hal::CodeRate::LoRaLi4_5 => "4/5LI".to_string(),
++                hal::CodeRate::LoRaLi4_6 => "4/6LI".to_string(),
++                hal::CodeRate::LoRaLi4_8 => "4/8LI".to_string(),
++            };
++
++            tx_info.set_modulation(chirpstack_api::common::Modulation::Lora);
++            tx_info.modulation_info = Some(
++                chirpstack_api::gw::uplink_tx_info::ModulationInfo::LoraModulationInfo(mod_info),
++            );
++        }
++    }
++
++    // rx info
++    let mut rx_info: chirpstack_api::gw::UplinkRxInfo = Default::default();
++    let uplink_id = Uuid::new_v4();
++
++    rx_info.uplink_id = uplink_id.as_bytes().to_vec();
++    rx_info.context = packet.count_us.to_be_bytes().to_vec();
++    rx_info.gateway_id = gateway_id.to_vec();
++    rx_info.rssi = packet.rssi as i32;
++    rx_info.lora_snr = packet.snr as f64;
++    rx_info.channel = packet.channel as u32;
++    rx_info.set_crc_status(match packet.status {
++        hal::CRC::Undefined => chirpstack_api::gw::CrcStatus::NoCrc,
++        hal::CRC::NoCRC => chirpstack_api::gw::CrcStatus::NoCrc,
++        hal::CRC::BadCRC => chirpstack_api::gw::CrcStatus::BadCrc,
++        hal::CRC::CRCOk => chirpstack_api::gw::CrcStatus::CrcOk,
++    });
++
++    let mut pb: chirpstack_api::gw::UplinkFrame = Default::default();
++    pb.phy_payload = packet.payload[..packet.size as usize].to_vec();
++    pb.tx_info = Some(tx_info);
++    pb.rx_info = Some(rx_info);
++
++    return Ok(pb);
++}
++
++pub fn downlink_from_proto(
++    lorawan_public: bool,
++    df: &chirpstack_api::gw::DownlinkFrameItem,
++) -> Result<hal::TxPacket, String> {
++    let mut data: [u8; 256] = [0; 256];
++    let mut data_slice = df.phy_payload.clone();
++    data_slice.resize(data.len(), 0);
++    data.copy_from_slice(&data_slice);
++
++    let tx_info = match df.tx_info.as_ref() {
++        Some(v) => v,
++        None => return Err("tx_info must not be blank".to_string()),
++    };
++
++    let mut packet = hal::TxPacket {
++        freq_hz: tx_info.frequency,
++        tx_mode: match tx_info.timing() {
++            chirpstack_api::gw::DownlinkTiming::Delay => hal::TxMode::Timestamped,
++            chirpstack_api::gw::DownlinkTiming::GpsEpoch => hal::TxMode::Timestamped, // the epoch timestamp is converted to count_us below
++            chirpstack_api::gw::DownlinkTiming::Immediately => hal::TxMode::Immediate,
++        },
++        rf_power: tx_info.power as i8,
++        preamble: 0,
++        sync_word: match lorawan_public {
++            true => 0x21,
++            false => 0x12,
++        },
++        no_crc: false,
++        size: df.phy_payload.len() as u16,
++        payload: data,
++        ..Default::default()
++    };
++
++    match &tx_info.timing_info {
++        Some(chirpstack_api::gw::downlink_tx_info::TimingInfo::DelayTimingInfo(v)) => {
++            let ctx = &tx_info.context;
++            if ctx.len() != 4 {
++                return Err("context must be exactly 4 bytes".to_string());
++            }
++
++            match v.delay.as_ref() {
++                Some(v) => {
++                    let mut array = [0; 4];
++                    array.copy_from_slice(&ctx);
++                    packet.count_us = u32::from_be_bytes(array).wrapping_add(
++                        (Duration::from_secs(v.seconds as u64)
++                            + Duration::from_nanos(v.nanos as u64))
++                        .as_micros() as u32,
++                    );
++                }
++                None => {
++                    return Err("delay must not be nil".to_string());
++                }
++            }
++        }
++        Some(chirpstack_api::gw::downlink_tx_info::TimingInfo::GpsEpochTimingInfo(_)) => {
++            return Err("gps epoch timing is not implemented".to_string());
++        }
++        Some(chirpstack_api::gw::downlink_tx_info::TimingInfo::ImmediatelyTimingInfo(_)) => {}
++        None => {}
++    };
++
++    match &tx_info.modulation_info {
++        Some(chirpstack_api::gw::downlink_tx_info::ModulationInfo::LoraModulationInfo(v)) => {
++            packet.bandwidth = v.bandwidth;
++            packet.datarate = match v.spreading_factor {
++                5 => hal::DataRate::SF5,
++                6 => hal::DataRate::SF6,
++                7 => hal::DataRate::SF7,
++                8 => hal::DataRate::SF8,
++                9 => hal::DataRate::SF9,
++                10 => hal::DataRate::SF10,
++                11 => hal::DataRate::SF11,
++                12 => hal::DataRate::SF12,
++                _ => return Err("unexpected spreading-factor".to_string()),
++            };
++            packet.coderate = match v.code_rate.as_ref() {
++                "4/5" => hal::CodeRate::LoRa4_5,
++                "4/6" => hal::CodeRate::LoRa4_6,
++                "4/7" => hal::CodeRate::LoRa4_7,
++                "4/8" => hal::CodeRate::LoRa4_8,
++                "4/5LI" => hal::CodeRate::LoRaLi4_5,
++                "4/6LI" => hal::CodeRate::LoRaLi4_6,
++                "4/8LI" => hal::CodeRate::LoRaLi4_8,
++                _ => return Err("unexpected coderate".to_string()),
++            };
++            packet.invert_pol = v.polarization_inversion;
++        }
++        _ => {
++            return Err("only LORA modulation is implemented".to_string());
++        }
++    }
++
++    return Ok(packet);
++}
+diff --git a/libloragw-2g4/Cargo.toml b/libloragw-2g4/Cargo.toml
+new file mode 100644
+index 0000000..fbd90e5
+--- /dev/null
++++ b/libloragw-2g4/Cargo.toml
+@@ -0,0 +1,12 @@
++[package]
++name = "libloragw-2g4"
++version = "1.0.0"
++authors = ["Orne Brocaar <info@brocaar.com>"]
++edition = "2018"
++publish = false
++
++[dependencies]
++lazy_static = "1.4"
++
++[build-dependencies]
++bindgen = "0.58"
+diff --git a/libloragw-2g4/build.rs b/libloragw-2g4/build.rs
+new file mode 100644
+index 0000000..dfeb1ba
+--- /dev/null
++++ b/libloragw-2g4/build.rs
+@@ -0,0 +1,30 @@
++extern crate bindgen;
++
++use std::env;
++use std::path::PathBuf;
++
++fn main() {
++    // Tell cargo to tell rustc to link the loragw
++    // shared library.
++    println!("cargo:rustc-link-lib=loragw-2g4");
++
++    // The bindgen::Builder is the main entry point
++    // to bindgen, and lets you build up options for
++    // the resulting bindings.
++    let bindings = bindgen::Builder::default()
++        // The input header we would like to generate
++        // bindings for.
++        .header("wrapper.h")
++        // Derive Default.
++        .derive_default(true)
++        // Finish the builder and generate the bindings.
++        .generate()
++        // Unwrap the Result and panic on failure.
++        .expect("Unable to generate bindings");
++
++    // Write the bindings to the $OUT_DIR/bindings.rs file.
++    let out_path = PathBuf::from(env::var("OUT_DIR").unwrap());
++    bindings
++        .write_to_file(out_path.join("bindings.rs"))
++        .expect("Couldn't write bindings!");
++}
+diff --git a/libloragw-2g4/src/gps.rs b/libloragw-2g4/src/gps.rs
+new file mode 100644
+index 0000000..bf385e9
+--- /dev/null
++++ b/libloragw-2g4/src/gps.rs
+@@ -0,0 +1,7 @@
++/// GPS coordinates.
++#[derive(Clone, Copy, Debug)]
++pub struct Coordinates {
++    pub latitude: f64,
++    pub longitude: f64,
++    pub altitude: i16,
++}
+diff --git a/libloragw-2g4/src/hal.rs b/libloragw-2g4/src/hal.rs
+new file mode 100644
+index 0000000..48e551b
+--- /dev/null
++++ b/libloragw-2g4/src/hal.rs
+@@ -0,0 +1,639 @@
++use std::ffi::{CStr, CString};
++use std::mem::transmute;
++use std::os::raw::c_char;
++use std::time::Duration;
++
++use super::{mutex, wrapper};
++
++// ConvertBandwidth is a trait to convert the bandwidth from / to the HAL
++// enum constants. A trait is needed as it is the only way to add methods to
++// a type alias.
++trait ConvertBandwidth {
++    fn from_hal(_: u32) -> u32;
++    fn to_hal(&self) -> u32;
++}
++
++/// Bandwidth in Hz.
++type Bandwidth = u32;
++
++impl ConvertBandwidth for Bandwidth {
++    fn from_hal(bandwidth: u32) -> u32 {
++        match bandwidth {
++            wrapper::e_bandwidth_BW_200KHZ => 200000,
++            wrapper::e_bandwidth_BW_400KHZ => 400000,
++            wrapper::e_bandwidth_BW_800KHZ => 800000,
++            wrapper::e_bandwidth_BW_1600KHZ => 1600000,
++            _ => 0,
++        }
++    }
++
++    fn to_hal(&self) -> u32 {
++        match self {
++            200000 => wrapper::e_bandwidth_BW_200KHZ,
++            400000 => wrapper::e_bandwidth_BW_400KHZ,
++            800000 => wrapper::e_bandwidth_BW_800KHZ,
++            1600000 => wrapper::e_bandwidth_BW_1600KHZ,
++            _ => 0,
++        }
++    }
++}
++
++#[derive(Debug, Copy, Clone)]
++pub enum CRC {
++    Undefined,
++    NoCRC,
++    BadCRC,
++    CRCOk,
++}
++
++impl CRC {
++    fn from_hal(status: u8) -> Self {
++        match status as u32 {
++            wrapper::e_crc_status_STAT_UNDEFINED => CRC::Undefined,
++            wrapper::e_crc_status_STAT_NO_CRC => CRC::NoCRC,
++            wrapper::e_crc_status_STAT_CRC_BAD => CRC::BadCRC,
++            wrapper::e_crc_status_STAT_CRC_OK => CRC::CRCOk,
++            _ => CRC::Undefined,
++        }
++    }
++}
++
++#[derive(Debug, Copy, Clone)]
++pub enum Modulation {
++    LoRa,
++}
++
++impl Modulation {
++    fn from_hal(modulation: u32) -> Self {
++        match modulation {
++            wrapper::e_modulation_MOD_LORA => Modulation::LoRa,
++            _ => Modulation::LoRa,
++        }
++    }
++}
++
++#[derive(Debug, Copy, Clone)]
++pub enum DataRate {
++    SF5,
++    SF6,
++    SF7,
++    SF8,
++    SF9,
++    SF10,
++    SF11,
++    SF12,
++}
++
++impl DataRate {
++    fn to_hal(&self) -> u32 {
++        match self {
++            DataRate::SF5 => wrapper::e_spreading_factor_DR_LORA_SF5,
++            DataRate::SF6 => wrapper::e_spreading_factor_DR_LORA_SF6,
++            DataRate::SF7 => wrapper::e_spreading_factor_DR_LORA_SF7,
++            DataRate::SF8 => wrapper::e_spreading_factor_DR_LORA_SF8,
++            DataRate::SF9 => wrapper::e_spreading_factor_DR_LORA_SF9,
++            DataRate::SF10 => wrapper::e_spreading_factor_DR_LORA_SF10,
++            DataRate::SF11 => wrapper::e_spreading_factor_DR_LORA_SF11,
++            DataRate::SF12 => wrapper::e_spreading_factor_DR_LORA_SF12,
++        }
++    }
++
++    fn from_hal(datarate: u32) -> Self {
++        match datarate {
++            wrapper::e_spreading_factor_DR_LORA_SF5 => DataRate::SF5,
++            wrapper::e_spreading_factor_DR_LORA_SF6 => DataRate::SF6,
++            wrapper::e_spreading_factor_DR_LORA_SF7 => DataRate::SF7,
++            wrapper::e_spreading_factor_DR_LORA_SF8 => DataRate::SF8,
++            wrapper::e_spreading_factor_DR_LORA_SF9 => DataRate::SF9,
++            wrapper::e_spreading_factor_DR_LORA_SF10 => DataRate::SF10,
++            wrapper::e_spreading_factor_DR_LORA_SF11 => DataRate::SF11,
++            wrapper::e_spreading_factor_DR_LORA_SF12 => DataRate::SF12,
++            _ => DataRate::SF5,
++        }
++    }
++}
++
++#[derive(Debug, Copy, Clone)]
++pub enum CodeRate {
++    LoRa4_5,
++    LoRa4_6,
++    LoRa4_7,
++    LoRa4_8,
++    LoRaLi4_5,
++    LoRaLi4_6,
++    LoRaLi4_8,
++}
++
++impl CodeRate {
++    fn to_hal(&self) -> u32 {
++        match self {
++            CodeRate::LoRa4_5 => wrapper::e_coding_rate_CR_LORA_4_5,
++            CodeRate::LoRa4_6 => wrapper::e_coding_rate_CR_LORA_4_6,
++            CodeRate::LoRa4_7 => wrapper::e_coding_rate_CR_LORA_4_7,
++            CodeRate::LoRa4_8 => wrapper::e_coding_rate_CR_LORA_4_8,
++            CodeRate::LoRaLi4_5 => wrapper::e_coding_rate_CR_LORA_LI_4_5,
++            CodeRate::LoRaLi4_6 => wrapper::e_coding_rate_CR_LORA_LI_4_6,
++            CodeRate::LoRaLi4_8 => wrapper::e_coding_rate_CR_LORA_LI_4_8,
++        }
++    }
++
++    fn from_hal(coderate: u32) -> Self {
++        match coderate {
++            wrapper::e_coding_rate_CR_LORA_4_5 => CodeRate::LoRa4_5,
++            wrapper::e_coding_rate_CR_LORA_4_6 => CodeRate::LoRa4_6,
++            wrapper::e_coding_rate_CR_LORA_4_7 => CodeRate::LoRa4_7,
++            wrapper::e_coding_rate_CR_LORA_4_8 => CodeRate::LoRa4_8,
++            wrapper::e_coding_rate_CR_LORA_LI_4_5 => CodeRate::LoRaLi4_5,
++            wrapper::e_coding_rate_CR_LORA_LI_4_6 => CodeRate::LoRaLi4_6,
++            wrapper::e_coding_rate_CR_LORA_LI_4_8 => CodeRate::LoRaLi4_8,
++            _ => CodeRate::LoRa4_5,
++        }
++    }
++}
++
++#[derive(Debug, Copy, Clone)]
++pub enum TxMode {
++    Timestamped,
++    Immediate,
++    OnGPS,
++    CWOn,
++    CWOff,
++}
++
++impl TxMode {
++    fn to_hal(&self) -> u32 {
++        match self {
++            TxMode::Timestamped => wrapper::e_tx_mode_TIMESTAMPED,
++            TxMode::Immediate => wrapper::e_tx_mode_IMMEDIATE,
++            TxMode::OnGPS => wrapper::e_tx_mode_ON_GPS,
++            TxMode::CWOn => wrapper::e_tx_mode_CW_ON,
++            TxMode::CWOff => wrapper::e_tx_mode_CW_OFF,
++        }
++    }
++}
++
++#[derive(PartialEq, Eq)]
++pub enum StatusSelect {
++    Tx,
++    Rx,
++}
++
++impl StatusSelect {
++    fn to_hal(&self) -> u32 {
++        match self {
++            StatusSelect::Tx => wrapper::e_status_type_TX_STATUS,
++            StatusSelect::Rx => wrapper::e_status_type_RX_STATUS,
++        }
++    }
++}
++
++pub enum StatusReturn {
++    Tx(TxStatus),
++    Rx(RxStatus),
++}
++
++#[derive(Debug)]
++pub enum TxStatus {
++    Unknown,
++    Off,
++    Free,
++    Scheduled,
++    Emitting,
++}
++
++impl TxStatus {
++    fn from_hal(code: u32) -> Self {
++        match code {
++            wrapper::e_status_TX_STATUS_UNKNOWN => TxStatus::Unknown,
++            wrapper::e_status_TX_OFF => TxStatus::Off,
++            wrapper::e_status_TX_FREE => TxStatus::Free,
++            wrapper::e_status_TX_SCHEDULED => TxStatus::Scheduled,
++            wrapper::e_status_TX_EMITTING => TxStatus::Emitting,
++            _ => TxStatus::Unknown,
++        }
++    }
++}
++
++#[derive(Debug)]
++pub enum RxStatus {
++    Unknown,
++    Off,
++    On,
++    Suspended,
++}
++
++impl RxStatus {
++    fn from_hal(code: u32) -> Self {
++        match code {
++            wrapper::e_status_RX_STATUS_UNKNOWN => RxStatus::Unknown,
++            wrapper::e_status_RX_OFF => RxStatus::Off,
++            wrapper::e_status_RX_ON => RxStatus::On,
++            wrapper::e_status_RX_SUSPENDED => RxStatus::Suspended,
++            _ => RxStatus::Unknown,
++        }
++    }
++}
++
++#[derive(Debug, Copy, Clone)]
++pub enum TemperatureSource {
++    /// The temperature has been measured with an external sensor.
++    Ext,
++    /// The temperature has been measured by the gateway MCU.
++    Mcu,
++}
++
++impl TemperatureSource {
++    fn to_hal(&self) -> u32 {
++        match self {
++            TemperatureSource::Ext => wrapper::e_temperature_src_TEMP_SRC_EXT,
++            TemperatureSource::Mcu => wrapper::e_temperature_src_TEMP_SRC_MCU,
++        }
++    }
++}
++
++/// Configuration structure for board specificities.
++pub struct BoardConfig {
++    /// Path to access the TTY device to connect to concentrator board.
++    pub tty_path: String,
++}
++
++impl BoardConfig {
++    fn to_hal(&self) -> Result<wrapper::lgw_conf_board_s, String> {
++        let tty_path = CString::new(self.tty_path.clone()).unwrap();
++        let tty_path = tty_path.as_bytes_with_nul();
++        if tty_path.len() > 64 {
++            return Err("tty_path max length is 64".to_string());
++        }
++        let mut tty_path_chars = [0; 64];
++        for (i, b) in tty_path.iter().enumerate() {
++            tty_path_chars[i] = *b as c_char;
++        }
++
++        return Ok(wrapper::lgw_conf_board_s {
++            tty_path: tty_path_chars,
++        });
++    }
++}
++
++/// Configuration structure for a channel.
++pub struct ChannelRxConfig {
++    /// Enable or disable that channel.
++    pub enable: bool,
++    /// channel frequency in Hz.
++    pub freq_hz: u32,
++    /// RX bandwidth.
++    pub bandwidth: Bandwidth,
++    /// RX datarate.
++    pub datarate: DataRate,
++    /// RSSI offset to be applied on this channel.'
++    pub rssi_offset: f32,
++    /// Public network:0x21, Private network:0x12.
++    pub sync_word: u8,
++}
++
++impl ChannelRxConfig {
++    fn to_hal(&self) -> Result<wrapper::lgw_conf_channel_rx_s, String> {
++        return Ok(wrapper::lgw_conf_channel_rx_s {
++            enable: self.enable,
++            freq_hz: self.freq_hz,
++            bandwidth: self.bandwidth.to_hal(),
++            datarate: self.datarate.to_hal(),
++            rssi_offset: self.rssi_offset,
++            sync_word: self.sync_word,
++        });
++    }
++}
++
++/// Configuration structure for TX.
++pub struct ChannelTxConfig {
++    /// Enable or disable that channel.
++    pub enable: bool,
++}
++
++impl ChannelTxConfig {
++    fn to_hal(&self) -> Result<wrapper::lgw_conf_channel_tx_s, String> {
++        return Ok(wrapper::lgw_conf_channel_tx_s {
++            enable: self.enable,
++        });
++    }
++}
++
++/// Structure containing the metadata of a packet that was received and a pointer to the payload.
++pub struct RxPacket {
++    /// Central frequency of the IF chain.
++    pub freq_hz: u32,
++    /// By which IF chain was packet received.
++    pub channel: u8,
++    /// Ctatus of the received packet.
++    pub status: CRC,
++    /// Internal concentrator counter for timestamping, 1 microsecond resolution.
++    pub count_us: u32,
++    /// Frequency error in Hz.
++    pub freq_offset_hz: i32,
++    /// Modulation used by the packet.
++    pub modulation: Modulation,
++    /// Modulation bandwidth (LoRa only).
++    pub bandwidth: Bandwidth,
++    /// RX datarate of the packet (SF for LoRa).
++    pub datarate: DataRate,
++    /// Error-correcting code of the packet (LoRa only).
++    pub coderate: CodeRate,
++    /// Average packet RSSI in dB.
++    pub rssi: f32,
++    /// Average packet SNR, in dB (LoRa only).
++    pub snr: f32,
++    /// Payload size in bytes.
++    pub size: u16,
++    /// Buffer containing the payload.
++    pub payload: [u8; 256],
++}
++
++impl RxPacket {
++    fn from_hal(pkt: wrapper::lgw_pkt_rx_s) -> Self {
++        RxPacket {
++            freq_hz: pkt.freq_hz,
++            channel: pkt.channel,
++            status: CRC::from_hal(pkt.status),
++            count_us: pkt.count_us,
++            freq_offset_hz: pkt.foff_hz,
++            modulation: Modulation::from_hal(pkt.modulation),
++            bandwidth: Bandwidth::from_hal(pkt.bandwidth),
++            datarate: DataRate::from_hal(pkt.datarate),
++            coderate: CodeRate::from_hal(pkt.coderate),
++            rssi: pkt.rssi,
++            snr: pkt.snr,
++            size: pkt.size,
++            payload: pkt.payload,
++        }
++    }
++}
++
++/// Structure containing the configuration of a packet to send and a pointer to the payload.
++#[derive(Copy, Clone)]
++pub struct TxPacket {
++    /// Center frequency of TX.
++    pub freq_hz: u32,
++    /// Select on what event/time the TX is triggered.
++    pub tx_mode: TxMode,
++    /// Timestamp or delay in microseconds for TX trigger.
++    pub count_us: u32,
++    /// TX power, in dBm.
++    pub rf_power: i8,
++    /// Modulation bandwidth (LoRa only).
++    pub bandwidth: Bandwidth,
++    /// TX datarate (SF for LoRa).
++    pub datarate: DataRate,
++    /// Error-correcting code of the packet (LoRa only).
++    pub coderate: CodeRate,
++    /// Invert signal polarity, for orthogonal downlinks (LoRa only).
++    pub invert_pol: bool,
++    /// Set the preamble length, 0 for default.
++    pub preamble: u16,
++    /// Public:0x21, Private:0x12.
++    pub sync_word: u8,
++    /// If true, do not send a CRC in the packet.
++    pub no_crc: bool,
++    /// If true, enable implicit header mode (LoRa).
++    pub no_header: bool,
++    /// Payload size in bytes.
++    pub size: u16,
++    /// Buffer containing the payload.
++    pub payload: [u8; 256],
++}
++
++impl Default for TxPacket {
++    fn default() -> Self {
++        TxPacket {
++            freq_hz: 0,
++            tx_mode: TxMode::Immediate,
++            count_us: 0,
++            rf_power: 0,
++            bandwidth: 0,
++            datarate: DataRate::SF5,
++            coderate: CodeRate::LoRa4_5,
++            invert_pol: false,
++            preamble: 0,
++            sync_word: 0x21,
++            no_crc: false,
++            no_header: false,
++            size: 0,
++            payload: [0; 256],
++        }
++    }
++}
++
++impl TxPacket {
++    fn to_hal(&self) -> wrapper::lgw_pkt_tx_s {
++        wrapper::lgw_pkt_tx_s {
++            freq_hz: self.freq_hz,
++            tx_mode: self.tx_mode.to_hal(),
++            count_us: self.count_us,
++            rf_power: self.rf_power,
++            bandwidth: self.bandwidth.to_hal(),
++            datarate: self.datarate.to_hal(),
++            coderate: self.coderate.to_hal(),
++            invert_pol: self.invert_pol,
++            preamble: self.preamble,
++            sync_word: self.sync_word,
++            no_crc: self.no_crc,
++            no_header: self.no_header,
++            size: self.size,
++            payload: self.payload,
++        }
++    }
++}
++
++/// Configure the gateway board.
++pub fn board_setconf(conf: &BoardConfig) -> Result<(), String> {
++    let mut conf = conf.to_hal()?;
++
++    let _guard = mutex::CONCENTATOR.lock().unwrap();
++    let ret = unsafe { wrapper::lgw_board_setconf(&mut conf) };
++    if ret != 0 {
++        return Err("lgw_board_setconf failed".to_string());
++    }
++
++    return Ok(());
++}
++
++/// Configure a RX channel.
++pub fn channel_rx_setconf(chan: u8, conf: &ChannelRxConfig) -> Result<(), String> {
++    let mut conf = conf.to_hal()?;
++
++    let _guard = mutex::CONCENTATOR.lock().unwrap();
++    let ret = unsafe { wrapper::lgw_channel_rx_setconf(chan, &mut conf) };
++    if ret != 0 {
++        return Err("lgw_channel_rx_setconf failed".to_string());
++    }
++
++    return Ok(());
++}
++
++/// Configure TX.
++pub fn channel_tx_setconf(conf: &ChannelTxConfig) -> Result<(), String> {
++    let mut conf = conf.to_hal()?;
++
++    let _guard = mutex::CONCENTATOR.lock().unwrap();
++    let ret = unsafe { wrapper::lgw_channel_tx_setconf(&mut conf) };
++    if ret != 0 {
++        return Err("lgw_channel_tx_setconf failed".to_string());
++    }
++
++    return Ok(());
++}
++
++/// Connect to the LoRa concentrator, reset it and configure it according to previously set
++/// parameters.
++pub fn start() -> Result<(), String> {
++    let _guard = mutex::CONCENTATOR.lock().unwrap();
++    let ret = unsafe { wrapper::lgw_start() };
++    if ret != 0 {
++        return Err("lgw_start failed".to_string());
++    }
++
++    return Ok(());
++}
++
++/// Stop the LoRa concentrator and disconnect it.
++pub fn stop() -> Result<(), String> {
++    let _guard = mutex::CONCENTATOR.lock().unwrap();
++    let ret = unsafe { wrapper::lgw_stop() };
++    if ret != 0 {
++        return Err("lgw_stop failed".to_string());
++    }
++
++    return Ok(());
++}
++
++/// A non-blocking function that will fetch packets from the LoRa concentrator FIFO
++/// and data buffer.
++pub fn receive() -> Result<Vec<RxPacket>, String> {
++    let mut packets: [wrapper::lgw_pkt_rx_s; 8] = [Default::default(); 8];
++
++    let _guard = mutex::CONCENTATOR.lock().unwrap();
++    let ret = unsafe { wrapper::lgw_receive(8, packets.as_mut_ptr()) };
++    if ret == -1 {
++        return Err("lgw_receive failed".to_string());
++    }
++
++    let mut v: Vec<RxPacket> = Vec::new();
++
++    for x in 0..ret {
++        let pkt = packets[x as usize];
++
++        v.push(RxPacket::from_hal(pkt));
++    }
++
++    return Ok(v);
++}
++
++/// Schedule a packet to be send immediately or after a delay depending on tx_mode.
++pub fn send(pkt: &TxPacket) -> Result<(), String> {
++    let _guard = mutex::CONCENTATOR.lock().unwrap();
++    let pkt = pkt.to_hal();
++
++    let ret = unsafe { wrapper::lgw_send(&pkt) };
++    if ret != 0 {
++        return Err("lgw_send failed".to_string());
++    }
++
++    return Ok(());
++}
++
++/// Give the the status of different part of the LoRa concentrator.
++pub fn status(select: StatusSelect) -> Result<StatusReturn, String> {
++    let mut code = 0;
++
++    let _guard = mutex::CONCENTATOR.lock().unwrap();
++    let ret = unsafe { wrapper::lgw_status(select.to_hal(), &mut code) };
++    if ret != 0 {
++        return Err("lgw_status failed".to_string());
++    }
++
++    if select == StatusSelect::Tx {
++        return Ok(StatusReturn::Tx(TxStatus::from_hal(code)));
++    } else {
++        return Ok(StatusReturn::Rx(RxStatus::from_hal(code)));
++    }
++}
++
++/// Abort a currently scheduled or ongoing TX.
++pub fn abort_tx() -> Result<(), String> {
++    let _guard = mutex::CONCENTATOR.lock().unwrap();
++    let ret = unsafe { wrapper::lgw_abort_tx() };
++    if ret != 0 {
++        return Err("lgw_abort_tx failed".to_string());
++    }
++    return Ok(());
++}
++
++/// Return value of internal counter when latest event (eg GPS pulse) was captured.
++pub fn get_trigcnt() -> Result<u32, String> {
++    let mut cnt = 0;
++
++    let _guard = mutex::CONCENTATOR.lock().unwrap();
++    let ret = unsafe { wrapper::lgw_get_trigcnt(&mut cnt) };
++    if ret != 0 {
++        return Err("lgw_get_trigcnt failed".to_string());
++    }
++
++    return Ok(cnt);
++}
++
++/// Return instateneous value of internal counter.
++pub fn get_instcnt() -> Result<u32, String> {
++    let mut cnt = 0;
++
++    let _guard = mutex::CONCENTATOR.lock().unwrap();
++    let ret = unsafe { wrapper::lgw_get_instcnt(&mut cnt) };
++    if ret != 0 {
++        return Err("lgw_get_instcnt failed".to_string());
++    }
++
++    return Ok(cnt);
++}
++
++/// Allow user to check the version/options of the library once compiled.
++pub fn version_info() -> String {
++    unsafe {
++        CStr::from_ptr(wrapper::lgw_version_info())
++            .to_string_lossy()
++            .into_owned()
++    }
++}
++
++/// Return the LoRa concentrator EUI.
++pub fn get_eui() -> Result<[u8; 8], String> {
++    let _guard = mutex::CONCENTATOR.lock().unwrap();
++    let mut eui: u64 = 0;
++    let ret = unsafe { wrapper::lgw_get_eui(&mut eui) };
++    if ret != 0 {
++        return Err("lgw_get_eui failed".to_string());
++    }
++
++    let eui = unsafe { transmute(eui.to_be()) };
++    return Ok(eui);
++}
++
++/// Return the temperature measured by the LoRa concentrator sensor (updated every 30s).
++pub fn get_temperature(source: TemperatureSource) -> Result<f32, String> {
++    let mut temp: f32 = 0.0;
++
++    let _guard = mutex::CONCENTATOR.lock().unwrap();
++    let ret = unsafe { wrapper::lgw_get_temperature(&mut temp, &mut source.to_hal()) };
++    if ret != 0 {
++        return Err("lgw_get_temperature failed".to_string());
++    }
++
++    return Ok(temp);
++}
++
++/// Return time on air of given packet, in milliseconds.
++pub fn time_on_air(pkt: &TxPacket) -> Result<Duration, String> {
++    let _guard = mutex::CONCENTATOR.lock().unwrap();
++    let mut pkt = pkt.to_hal();
++    let mut result: f64 = 0.0;
++
++    let ms = unsafe { wrapper::lgw_time_on_air(&mut pkt, &mut result) };
++    return Ok(Duration::from_millis(ms as u64));
++}
+diff --git a/libloragw-2g4/src/lib.rs b/libloragw-2g4/src/lib.rs
+new file mode 100644
+index 0000000..ea5e34c
+--- /dev/null
++++ b/libloragw-2g4/src/lib.rs
+@@ -0,0 +1,7 @@
++#[macro_use]
++extern crate lazy_static;
++
++pub mod gps;
++pub mod hal;
++mod mutex;
++pub mod wrapper;
+diff --git a/libloragw-2g4/src/mutex.rs b/libloragw-2g4/src/mutex.rs
+new file mode 100644
+index 0000000..27d87e7
+--- /dev/null
++++ b/libloragw-2g4/src/mutex.rs
+@@ -0,0 +1,5 @@
++use std::sync::Mutex;
++
++lazy_static! {
++    pub static ref CONCENTATOR: Mutex<()> = Mutex::new(());
++}
+diff --git a/libloragw-2g4/src/wrapper.rs b/libloragw-2g4/src/wrapper.rs
+new file mode 100644
+index 0000000..cd503e4
+--- /dev/null
++++ b/libloragw-2g4/src/wrapper.rs
+@@ -0,0 +1,6 @@
++#![allow(non_upper_case_globals)]
++#![allow(non_camel_case_types)]
++#![allow(non_snake_case)]
++#![allow(dead_code)]
++
++include!(concat!(env!("OUT_DIR"), "/bindings.rs"));
+diff --git a/libloragw-2g4/wrapper.h b/libloragw-2g4/wrapper.h
+new file mode 100644
+index 0000000..e0f4d43
+--- /dev/null
++++ b/libloragw-2g4/wrapper.h
+@@ -0,0 +1,3 @@
++#include <stdio.h>
++
++#include <libloragw-2g4/loragw_hal.h>
+-- 
+2.25.1
+
diff --git a/0002-Remove-Class-B-beacon-frequency-correction.patch b/0002-Remove-Class-B-beacon-frequency-correction.patch
new file mode 100644
index 0000000..fab97f7
--- /dev/null
+++ b/0002-Remove-Class-B-beacon-frequency-correction.patch
@@ -0,0 +1,68 @@
+From 97c727d5e4cb846b5873cb70c4bf8b3bdd66ff13 Mon Sep 17 00:00:00 2001
+From: Orne Brocaar <info@brocaar.com>
+Date: Tue, 31 Aug 2021 13:28:07 +0100
+Subject: [PATCH 2/2] Remove Class-B beacon frequency correction.
+
+This was copied over from the Semtech UDP Packet Forwarder, but should
+have been implemented on dequeue instead of enqueue, as the enqueue is
+happening in the future. For now this is removed, as it might need
+further research if this logic is needed or not. It is present in the
+Semtech UDP Packet Forwarder, but I could not find the same logic in the
+Basics Station.
+
+If this is needed, it must be implemented on dequeue, to make sure that
+we compensate the frequency with the xtal_correct value as close to the
+actual transmission as possible.
+
+For now this is removed as on sending the downlink, the Concentratord
+aggregates the downlink count on frequency. Before this change it would
+generate a many different frequencies as the xtal_correct value is
+variable.
+---
+ chirpstack-concentratord-sx1301/src/handler/beacon.rs | 7 +------
+ chirpstack-concentratord-sx1301/src/handler/gps.rs    | 8 --------
+ 2 files changed, 1 insertion(+), 14 deletions(-)
+
+diff --git a/chirpstack-concentratord-sx1301/src/handler/beacon.rs b/chirpstack-concentratord-sx1301/src/handler/beacon.rs
+index 1e48854..cc6a631 100644
+--- a/chirpstack-concentratord-sx1301/src/handler/beacon.rs
++++ b/chirpstack-concentratord-sx1301/src/handler/beacon.rs
+@@ -82,15 +82,10 @@ fn send_beacon(
+     beacon_pl.resize(data.len(), 0);
+     data.copy_from_slice(&beacon_pl);
+ 
+-    let xtal_correct = match gps::get_xtal_correct() {
+-        Ok(v) => v,
+-        Err(err) => return Err(err),
+-    };
+-
+     let tx_freq = conf.frequencies
+         [((beacon_time.as_secs() % (1 << 32)) % conf.frequencies.len() as u64) as usize];
+     let tx_packet = hal::TxPacket {
+-        freq_hz: (tx_freq as f64 * xtal_correct) as u32,
++        freq_hz: tx_freq,
+         tx_mode: hal::TxMode::OnGPS,
+         count_us: match gps::epoch2cnt(&beacon_time) {
+             Ok(v) => v,
+diff --git a/chirpstack-concentratord-sx1301/src/handler/gps.rs b/chirpstack-concentratord-sx1301/src/handler/gps.rs
+index 1bb20dc..cdb0093 100644
+--- a/chirpstack-concentratord-sx1301/src/handler/gps.rs
++++ b/chirpstack-concentratord-sx1301/src/handler/gps.rs
+@@ -265,14 +265,6 @@ pub fn get_gps_epoch() -> Result<Duration, String> {
+     return Ok(GPS_TIME_REF.lock().unwrap().gps_epoch);
+ }
+ 
+-pub fn get_xtal_correct() -> Result<f64, String> {
+-    if *XTAL_CORRECT_OK.lock().unwrap() == false {
+-        return Err("no valid xtal correction value available yet".to_string());
+-    }
+-
+-    return Ok(*XTAL_CORRECT.lock().unwrap());
+-}
+-
+ fn gps_process_sync() {
+     let (gps_time, gps_epoch, _, _) = match gps::get(true, false) {
+         Ok(v) => v,
+-- 
+2.25.1
+
diff --git a/0003-Fix-mapping-bandwidth-to-actual-values.patch b/0003-Fix-mapping-bandwidth-to-actual-values.patch
new file mode 100644
index 0000000..5c5de1b
--- /dev/null
+++ b/0003-Fix-mapping-bandwidth-to-actual-values.patch
@@ -0,0 +1,51 @@
+From 3c169e5f87c0d77e179dc8d215d8719e17c92456 Mon Sep 17 00:00:00 2001
+From: Orne Brocaar <info@brocaar.com>
+Date: Wed, 5 May 2021 14:30:32 +0100
+Subject: [PATCH 03/10] Fix mapping bandwidth to actual values.
+
+See also https://github.com/Lora-net/gateway_2g4_hal/issues/6.
+---
+ libloragw-2g4/src/hal.rs | 18 ++++++++++--------
+ 1 file changed, 10 insertions(+), 8 deletions(-)
+
+diff --git a/libloragw-2g4/src/hal.rs b/libloragw-2g4/src/hal.rs
+index 48e551b..513dca4 100644
+--- a/libloragw-2g4/src/hal.rs
++++ b/libloragw-2g4/src/hal.rs
+@@ -16,23 +16,25 @@ trait ConvertBandwidth {
+ /// Bandwidth in Hz.
+ type Bandwidth = u32;
+ 
++// Please see:
++// https://github.com/Lora-net/gateway_2g4_hal/issues/6
+ impl ConvertBandwidth for Bandwidth {
+     fn from_hal(bandwidth: u32) -> u32 {
+         match bandwidth {
+-            wrapper::e_bandwidth_BW_200KHZ => 200000,
+-            wrapper::e_bandwidth_BW_400KHZ => 400000,
+-            wrapper::e_bandwidth_BW_800KHZ => 800000,
+-            wrapper::e_bandwidth_BW_1600KHZ => 1600000,
++            wrapper::e_bandwidth_BW_200KHZ => 203000,
++            wrapper::e_bandwidth_BW_400KHZ => 406000,
++            wrapper::e_bandwidth_BW_800KHZ => 812000,
++            wrapper::e_bandwidth_BW_1600KHZ => 1625000,
+             _ => 0,
+         }
+     }
+ 
+     fn to_hal(&self) -> u32 {
+         match self {
+-            200000 => wrapper::e_bandwidth_BW_200KHZ,
+-            400000 => wrapper::e_bandwidth_BW_400KHZ,
+-            800000 => wrapper::e_bandwidth_BW_800KHZ,
+-            1600000 => wrapper::e_bandwidth_BW_1600KHZ,
++            203000 => wrapper::e_bandwidth_BW_200KHZ,
++            406000 => wrapper::e_bandwidth_BW_400KHZ,
++            812000 => wrapper::e_bandwidth_BW_800KHZ,
++            1625000 => wrapper::e_bandwidth_BW_1600KHZ,
+             _ => 0,
+         }
+     }
+-- 
+2.25.1
+
diff --git a/0003-Update-dependencies.patch b/0003-Update-dependencies.patch
new file mode 100644
index 0000000..2123a30
--- /dev/null
+++ b/0003-Update-dependencies.patch
@@ -0,0 +1,906 @@
+From 94a30cf0000c6313bd0f0c496e8151ea71cdc2d3 Mon Sep 17 00:00:00 2001
+From: Orne Brocaar <info@brocaar.com>
+Date: Wed, 28 Jul 2021 16:43:24 +0100
+Subject: [PATCH 3/5] Update dependencies.
+
+---
+ Cargo.lock                                    | 295 +++++++++---------
+ chirpstack-concentratord-2g4/Cargo.toml       |   8 +-
+ chirpstack-concentratord-sx1301/Cargo.toml    |   8 +-
+ .../src/wrapper/mod.rs                        |   3 +
+ chirpstack-concentratord-sx1302/Cargo.toml    |   8 +-
+ .../src/wrapper/mod.rs                        |   3 +
+ libconcentratord/Cargo.toml                   |   6 +-
+ 7 files changed, 171 insertions(+), 160 deletions(-)
+
+diff --git a/Cargo.lock b/Cargo.lock
+index 71096f9..169d827 100644
+--- a/Cargo.lock
++++ b/Cargo.lock
+@@ -2,9 +2,9 @@
+ # It is not intended for manual editing.
+ [[package]]
+ name = "aho-corasick"
+-version = "0.7.15"
++version = "0.7.18"
+ source = "registry+https://github.com/rust-lang/crates.io-index"
+-checksum = "7404febffaa47dac81aa44dba71523c9d069b1bdc50a77db41195149e17f68e5"
++checksum = "1e37cfd5e7657ada45f742d6e99ca5788580b5c529dc78faf11ece6dc702656f"
+ dependencies = [
+  "memchr",
+ ]
+@@ -20,15 +20,15 @@ dependencies = [
+ 
+ [[package]]
+ name = "anyhow"
+-version = "1.0.40"
++version = "1.0.42"
+ source = "registry+https://github.com/rust-lang/crates.io-index"
+-checksum = "28b2cd92db5cbd74e8e5028f7e27dd7aa3090e89e4f2a197cc7c8dfb69c7063b"
++checksum = "595d3cfa7a60d4555cb5067b99f07142a08ea778de5cf993f7b75c7d8fabc486"
+ 
+ [[package]]
+ name = "async-stream"
+-version = "0.2.1"
++version = "0.3.2"
+ source = "registry+https://github.com/rust-lang/crates.io-index"
+-checksum = "22068c0c19514942eefcfd4daf8976ef1aad84e61539f95cd200c35202f80af5"
++checksum = "171374e7e3b2504e0e5236e3b59260560f9fe94bfe9ac39ba5e4e929c5590625"
+ dependencies = [
+  "async-stream-impl",
+  "futures-core",
+@@ -36,9 +36,9 @@ dependencies = [
+ 
+ [[package]]
+ name = "async-stream-impl"
+-version = "0.2.1"
++version = "0.3.2"
+ source = "registry+https://github.com/rust-lang/crates.io-index"
+-checksum = "25f9db3b38af870bf7e5cc649167533b493928e50744e2c30ae350230b414670"
++checksum = "648ed8c8d2ce5409ccd57453d9d1b214b342a0d69376a6feda1fd6cae3299308"
+ dependencies = [
+  "proc-macro2",
+  "quote",
+@@ -47,9 +47,9 @@ dependencies = [
+ 
+ [[package]]
+ name = "async-trait"
+-version = "0.1.49"
++version = "0.1.50"
+ source = "registry+https://github.com/rust-lang/crates.io-index"
+-checksum = "589652ce7ccb335d1e7ecb3be145425702b290dbcb7029bbeaae263fc1d87b48"
++checksum = "0b98e84bbb4cbcdd97da190ba0c58a1bb0de2c1fdf67d159e192ed766aeca722"
+ dependencies = [
+  "proc-macro2",
+  "quote",
+@@ -75,12 +75,9 @@ checksum = "cdb031dd78e28731d87d56cc8ffef4a8f36ca26c38fe2de700543e627f8a464a"
+ 
+ [[package]]
+ name = "base64"
+-version = "0.10.1"
++version = "0.13.0"
+ source = "registry+https://github.com/rust-lang/crates.io-index"
+-checksum = "0b25d992356d2eb0ed82172f5248873db5560c4721f564b13cb5193bda5e668e"
+-dependencies = [
+- "byteorder",
+-]
++checksum = "904dfeac50f3cdaba28fc6f57fdcddb75f49ed61346676a78c4ffe55877802fd"
+ 
+ [[package]]
+ name = "bindgen"
+@@ -102,7 +99,7 @@ dependencies = [
+  "regex",
+  "rustc-hash",
+  "shlex",
+- "which",
++ "which 3.1.1",
+ ]
+ 
+ [[package]]
+@@ -144,12 +141,6 @@ version = "1.4.3"
+ source = "registry+https://github.com/rust-lang/crates.io-index"
+ checksum = "14c189c53d098945499cdfa7ecc63567cf3886b3332b312a5b4585d8d3a6a610"
+ 
+-[[package]]
+-name = "bytes"
+-version = "0.5.6"
+-source = "registry+https://github.com/rust-lang/crates.io-index"
+-checksum = "0e4cec68f03f32e44924783795810fa50a7035d8c8ebe78580ad7e6c703fba38"
+-
+ [[package]]
+ name = "bytes"
+ version = "1.0.1"
+@@ -158,9 +149,9 @@ checksum = "b700ce4376041dcd0a327fd0097c41095743c4c8af8887265942faf1100bd040"
+ 
+ [[package]]
+ name = "cc"
+-version = "1.0.67"
++version = "1.0.69"
+ source = "registry+https://github.com/rust-lang/crates.io-index"
+-checksum = "e3c69b077ad434294d3ce9f1f6143a2a4b89a8a2d54ef813d85003a4fd1137fd"
++checksum = "e70cc2f62c6ce1868963827bd677764c62d07c3d9a3e1fb1177ee1a9ab199eb2"
+ 
+ [[package]]
+ name = "cexpr"
+@@ -260,9 +251,9 @@ dependencies = [
+ 
+ [[package]]
+ name = "chirpstack_api"
+-version = "3.9.7"
++version = "3.10.2"
+ source = "registry+https://github.com/rust-lang/crates.io-index"
+-checksum = "d55f11f068abdad7b46cd76d8f67ca60f2f39368d6d614a1b737a485f3791d99"
++checksum = "a512de50d789d961f60070c77f12fb599c5f4f3656a857d4416d4f20a30cd94f"
+ dependencies = [
+  "prost",
+  "prost-types",
+@@ -346,9 +337,9 @@ checksum = "e78d4f1cc4ae33bbfc157ed5d5a5ef3bc29227303d595861deb238fcec4e9457"
+ 
+ [[package]]
+ name = "env_logger"
+-version = "0.8.3"
++version = "0.8.4"
+ source = "registry+https://github.com/rust-lang/crates.io-index"
+-checksum = "17392a012ea30ef05a610aa97dfb49496e71c9f676b27879922ea5bdf60d9d3f"
++checksum = "a19187fea3ac7e84da7dacf48de0c45d63c6a76f9490dae389aead16c243fce3"
+ dependencies = [
+  "atty",
+  "humantime",
+@@ -392,31 +383,32 @@ checksum = "3f9eec918d3f24069decb9af1554cad7c880e2da24a9afd88aca000531ab82c1"
+ 
+ [[package]]
+ name = "futures-core"
+-version = "0.3.14"
++version = "0.3.16"
+ source = "registry+https://github.com/rust-lang/crates.io-index"
+-checksum = "098cd1c6dda6ca01650f1a37a794245eb73181d0d4d4e955e2f3c37db7af1815"
++checksum = "af51b1b4a7fdff033703db39de8802c673eb91855f2e0d47dcf3bf2c0ef01f99"
+ 
+ [[package]]
+ name = "futures-sink"
+-version = "0.3.14"
++version = "0.3.16"
+ source = "registry+https://github.com/rust-lang/crates.io-index"
+-checksum = "5c5629433c555de3d82861a7a4e3794a4c40040390907cfbfd7143a92a426c23"
++checksum = "c0f30aaa67363d119812743aa5f33c201a7a66329f97d1a887022971feea4b53"
+ 
+ [[package]]
+ name = "futures-task"
+-version = "0.3.14"
++version = "0.3.16"
+ source = "registry+https://github.com/rust-lang/crates.io-index"
+-checksum = "ba7aa51095076f3ba6d9a1f702f74bd05ec65f555d70d2033d55ba8d69f581bc"
++checksum = "bbe54a98670017f3be909561f6ad13e810d9a51f3f061b902062ca3da80799f2"
+ 
+ [[package]]
+ name = "futures-util"
+-version = "0.3.14"
++version = "0.3.16"
+ source = "registry+https://github.com/rust-lang/crates.io-index"
+-checksum = "3c144ad54d60f23927f0a6b6d816e4271278b64f005ad65e4e35291d2de9c025"
++checksum = "67eb846bfd58e44a8481a00049e82c43e0ccb5d61f8dc071057cb19249dd4d78"
+ dependencies = [
++ "autocfg",
+  "futures-core",
+  "futures-task",
+- "pin-project-lite 0.2.6",
++ "pin-project-lite",
+  "pin-utils",
+ ]
+ 
+@@ -440,9 +432,9 @@ dependencies = [
+ 
+ [[package]]
+ name = "getrandom"
+-version = "0.2.2"
++version = "0.2.3"
+ source = "registry+https://github.com/rust-lang/crates.io-index"
+-checksum = "c9495705279e7140bf035dde1f6e750c162df8b625267cd52cc44e0b156732c8"
++checksum = "7fcd999463524c52659517fe2cea98493cfe485d10565e7b0fb07dbba7ad2753"
+ dependencies = [
+  "cfg-if 1.0.0",
+  "libc",
+@@ -457,9 +449,9 @@ checksum = "9b919933a397b79c37e33b77bb2aa3dc8eb6e165ad809e58ff75bc7db2e34574"
+ 
+ [[package]]
+ name = "gpio-cdev"
+-version = "0.3.0"
++version = "0.4.0"
+ source = "registry+https://github.com/rust-lang/crates.io-index"
+-checksum = "e1919e3c3b51096c4e63948ab480f233ea475665753d00c65b13e7269acc42ab"
++checksum = "da59d440ef8c26208b3960ed58b71b896db7dfd6bb138622bba733b66d978c3a"
+ dependencies = [
+  "bitflags",
+  "libc",
+@@ -468,9 +460,9 @@ dependencies = [
+ 
+ [[package]]
+ name = "handlebars"
+-version = "3.5.4"
++version = "4.1.0"
+ source = "registry+https://github.com/rust-lang/crates.io-index"
+-checksum = "580b6f551b29a3a02436318aed09ba1c58eea177dc49e39beac627ad356730a5"
++checksum = "72a0ffab8c36d0436114310c7e10b59b3307e650ddfabf6d006028e29a70c6e6"
+ dependencies = [
+  "log",
+  "pest",
+@@ -482,24 +474,24 @@ dependencies = [
+ 
+ [[package]]
+ name = "hashbrown"
+-version = "0.9.1"
++version = "0.11.2"
+ source = "registry+https://github.com/rust-lang/crates.io-index"
+-checksum = "d7afe4a420e3fe79967a00898cc1f4db7c8a49a9333a29f8a4bd76a253d5cd04"
++checksum = "ab5ef0d4909ef3724cc8cce6ccc8572c5c817592e9285f5464f8e86f8bd3726e"
+ 
+ [[package]]
+ name = "heck"
+-version = "0.3.2"
++version = "0.3.3"
+ source = "registry+https://github.com/rust-lang/crates.io-index"
+-checksum = "87cbf45460356b7deeb5e3415b5563308c0a9b057c85e12b06ad551f98d0a6ac"
++checksum = "6d621efb26863f0e9924c6ac577e8275e5e6b77455db64ffa6c65c904e9e132c"
+ dependencies = [
+  "unicode-segmentation",
+ ]
+ 
+ [[package]]
+ name = "hermit-abi"
+-version = "0.1.18"
++version = "0.1.19"
+ source = "registry+https://github.com/rust-lang/crates.io-index"
+-checksum = "322f4de77956e22ed0e5032c359a0f1273f1f7f0d79bfa3b8ffbc730d7fbcc5c"
++checksum = "62b467343b94ba476dcb2500d242dadbb39557df889310ac77c5d99100aaac33"
+ dependencies = [
+  "libc",
+ ]
+@@ -516,19 +508,20 @@ version = "0.2.4"
+ source = "registry+https://github.com/rust-lang/crates.io-index"
+ checksum = "527e8c9ac747e28542699a951517aa9a6945af506cd1f2e1b53a576c17b6cc11"
+ dependencies = [
+- "bytes 1.0.1",
++ "bytes",
+  "fnv",
+  "itoa",
+ ]
+ 
+ [[package]]
+ name = "http-body"
+-version = "0.3.1"
++version = "0.4.2"
+ source = "registry+https://github.com/rust-lang/crates.io-index"
+-checksum = "13d5ff830006f7646652e057693569bfe0d51760c0085a071769d142a205111b"
++checksum = "60daa14be0e0786db0f03a9e57cb404c9d756eed2b6c62b9ea98ec5743ec75a9"
+ dependencies = [
+- "bytes 0.5.6",
++ "bytes",
+  "http",
++ "pin-project-lite",
+ ]
+ 
+ [[package]]
+@@ -549,9 +542,9 @@ dependencies = [
+ 
+ [[package]]
+ name = "indexmap"
+-version = "1.6.2"
++version = "1.7.0"
+ source = "registry+https://github.com/rust-lang/crates.io-index"
+-checksum = "824845a0bf897a9042383849b02c1bc219c2383772efcd5c6f9766fa4b81aef3"
++checksum = "bc633605454125dec4b66843673f01c7df2b89479b32e0ed634e43a91cff62a5"
+ dependencies = [
+  "autocfg",
+  "hashbrown",
+@@ -559,9 +552,9 @@ dependencies = [
+ 
+ [[package]]
+ name = "itertools"
+-version = "0.8.2"
++version = "0.10.1"
+ source = "registry+https://github.com/rust-lang/crates.io-index"
+-checksum = "f56a2d0bc861f9165be4eb3442afd3c236d8a98afd426f65d92324ae1091a484"
++checksum = "69ddb889f9d0d08a67338271fa9b62996bc788c7796a5c18cf057420aaed5eaf"
+ dependencies = [
+  "either",
+ ]
+@@ -586,9 +579,9 @@ checksum = "830d08ce1d1d941e6b30645f1a0eb5643013d835ce3779a5fc208261dbe10f55"
+ 
+ [[package]]
+ name = "libc"
+-version = "0.2.93"
++version = "0.2.98"
+ source = "registry+https://github.com/rust-lang/crates.io-index"
+-checksum = "9385f66bf6105b241aa65a61cb923ef20efc665cb9f9bb50ac2f0c4b7f378d41"
++checksum = "320cfe77175da3a483efed4bc0adc1968ca050b098ce4f2f1c13a56626128790"
+ 
+ [[package]]
+ name = "libconcentratord"
+@@ -655,9 +648,9 @@ checksum = "3e2e65a1a2e43cfcb47a895c4c8b10d1f4a61097f9f254f183aee60cad9c651d"
+ 
+ [[package]]
+ name = "memchr"
+-version = "2.3.4"
++version = "2.4.0"
+ source = "registry+https://github.com/rust-lang/crates.io-index"
+-checksum = "0ee1c47aaa256ecabcaea351eae4a9b01ef39ed810004e298d2511ed284b1525"
++checksum = "b16bd47d9e329435e309c58469fe0791c2d0d1ba96ec0954152a5ae2b04387dc"
+ 
+ [[package]]
+ name = "metadeps"
+@@ -732,9 +725,9 @@ checksum = "19b17cddbe7ec3f8bc800887bab5e717348c95ea2ca0b1bf0837fb964dc67099"
+ 
+ [[package]]
+ name = "percent-encoding"
+-version = "1.0.1"
++version = "2.1.0"
+ source = "registry+https://github.com/rust-lang/crates.io-index"
+-checksum = "31010dd2e1ac33d5b46a5b413495239882813e0369f8ed8a5e266f173602f831"
++checksum = "d4fd5641d01c8f18a23da7b6fe29298ff4b55afcccdf78973b24cf3175fee32e"
+ 
+ [[package]]
+ name = "pest"
+@@ -791,18 +784,18 @@ dependencies = [
+ 
+ [[package]]
+ name = "pin-project"
+-version = "0.4.28"
++version = "1.0.8"
+ source = "registry+https://github.com/rust-lang/crates.io-index"
+-checksum = "918192b5c59119d51e0cd221f4d49dde9112824ba717369e903c97d076083d0f"
++checksum = "576bc800220cc65dac09e99e97b08b358cfab6e17078de8dc5fee223bd2d0c08"
+ dependencies = [
+  "pin-project-internal",
+ ]
+ 
+ [[package]]
+ name = "pin-project-internal"
+-version = "0.4.28"
++version = "1.0.8"
+ source = "registry+https://github.com/rust-lang/crates.io-index"
+-checksum = "3be26700300be6d9d23264c73211d8190e755b6b5ca7a1b28230025511b52a5e"
++checksum = "6e8fe8163d14ce7f0cdac2e040116f22eac817edabff0be91e8aff7e9accf389"
+ dependencies = [
+  "proc-macro2",
+  "quote",
+@@ -811,15 +804,9 @@ dependencies = [
+ 
+ [[package]]
+ name = "pin-project-lite"
+-version = "0.1.12"
++version = "0.2.7"
+ source = "registry+https://github.com/rust-lang/crates.io-index"
+-checksum = "257b64915a082f7811703966789728173279bdebb956b143dbcd23f6f970a777"
+-
+-[[package]]
+-name = "pin-project-lite"
+-version = "0.2.6"
+-source = "registry+https://github.com/rust-lang/crates.io-index"
+-checksum = "dc0e1f259c92177c30a4c9d177246edd0a3568b25756a977d0632cf8fa37e905"
++checksum = "8d31d11c69a6b52a174b42bdc0c30e5e11670f90788b2c471c31c1d17d449443"
+ 
+ [[package]]
+ name = "pin-utils"
+@@ -841,30 +828,30 @@ checksum = "ac74c624d6b2d21f425f752262f42188365d7b8ff1aff74c82e45136510a4857"
+ 
+ [[package]]
+ name = "proc-macro2"
+-version = "1.0.26"
++version = "1.0.28"
+ source = "registry+https://github.com/rust-lang/crates.io-index"
+-checksum = "a152013215dca273577e18d2bf00fa862b89b24169fb78c4c95aeb07992c9cec"
++checksum = "5c7ed8b8c7b886ea3ed7dde405212185f423ab44682667c8c6dd14aa1d9f6612"
+ dependencies = [
+  "unicode-xid",
+ ]
+ 
+ [[package]]
+ name = "prost"
+-version = "0.6.1"
++version = "0.8.0"
+ source = "registry+https://github.com/rust-lang/crates.io-index"
+-checksum = "ce49aefe0a6144a45de32927c77bd2859a5f7677b55f220ae5b744e87389c212"
++checksum = "de5e2533f59d08fcf364fd374ebda0692a70bd6d7e66ef97f306f45c6c5d8020"
+ dependencies = [
+- "bytes 0.5.6",
++ "bytes",
+  "prost-derive",
+ ]
+ 
+ [[package]]
+ name = "prost-build"
+-version = "0.6.1"
++version = "0.8.0"
+ source = "registry+https://github.com/rust-lang/crates.io-index"
+-checksum = "02b10678c913ecbd69350e8535c3aef91a8676c0773fc1d7b95cdd196d7f2f26"
++checksum = "355f634b43cdd80724ee7848f95770e7e70eefa6dcf14fea676216573b8fd603"
+ dependencies = [
+- "bytes 0.5.6",
++ "bytes",
+  "heck",
+  "itertools",
+  "log",
+@@ -873,14 +860,14 @@ dependencies = [
+  "prost",
+  "prost-types",
+  "tempfile",
+- "which",
++ "which 4.1.0",
+ ]
+ 
+ [[package]]
+ name = "prost-derive"
+-version = "0.6.1"
++version = "0.8.0"
+ source = "registry+https://github.com/rust-lang/crates.io-index"
+-checksum = "537aa19b95acde10a12fec4301466386f757403de4cd4e5b4fa78fb5ecb18f72"
++checksum = "600d2f334aa05acb02a755e217ef1ab6dea4d51b58b7846588b747edec04efba"
+ dependencies = [
+  "anyhow",
+  "itertools",
+@@ -891,19 +878,19 @@ dependencies = [
+ 
+ [[package]]
+ name = "prost-types"
+-version = "0.6.1"
++version = "0.8.0"
+ source = "registry+https://github.com/rust-lang/crates.io-index"
+-checksum = "1834f67c0697c001304b75be76f67add9c89742eda3a085ad8ee0bb38c3417aa"
++checksum = "603bbd6394701d13f3f25aada59c7de9d35a6a5887cfc156181234a44002771b"
+ dependencies = [
+- "bytes 0.5.6",
++ "bytes",
+  "prost",
+ ]
+ 
+ [[package]]
+ name = "quick-error"
+-version = "2.0.0"
++version = "2.0.1"
+ source = "registry+https://github.com/rust-lang/crates.io-index"
+-checksum = "3ac73b1112776fc109b2e61909bc46c7e1bf0d7f690ffb1676553acce16d5cda"
++checksum = "a993555f31e5a609f617c12db6250dedcac1b0a85076912c436e6fc9b2c8e6a3"
+ 
+ [[package]]
+ name = "quote"
+@@ -916,9 +903,9 @@ dependencies = [
+ 
+ [[package]]
+ name = "rand"
+-version = "0.8.3"
++version = "0.8.4"
+ source = "registry+https://github.com/rust-lang/crates.io-index"
+-checksum = "0ef9e7e66b4468674bfcb0c81af8b7fa0bb154fa9f28eb840da5c447baeb8d7e"
++checksum = "2e7573632e6454cf6b99d7aac4ccca54be06da05aca2ef7423d22d27d4d4bcd8"
+ dependencies = [
+  "libc",
+  "rand_chacha",
+@@ -928,9 +915,9 @@ dependencies = [
+ 
+ [[package]]
+ name = "rand_chacha"
+-version = "0.3.0"
++version = "0.3.1"
+ source = "registry+https://github.com/rust-lang/crates.io-index"
+-checksum = "e12735cf05c9e10bf21534da50a147b924d555dc7a547c42e6bb2d5b6017ae0d"
++checksum = "e6c10a63a0fa32252be49d21e7709d4d4baf8d231c2dbce1eaa8141b9b127d88"
+ dependencies = [
+  "ppv-lite86",
+  "rand_core",
+@@ -938,36 +925,36 @@ dependencies = [
+ 
+ [[package]]
+ name = "rand_core"
+-version = "0.6.2"
++version = "0.6.3"
+ source = "registry+https://github.com/rust-lang/crates.io-index"
+-checksum = "34cf66eb183df1c5876e2dcf6b13d57340741e8dc255b48e40a26de954d06ae7"
++checksum = "d34f1408f55294453790c48b2f1ebbb1c5b4b7563eb1f418bcfcfdbb06ebb4e7"
+ dependencies = [
+  "getrandom",
+ ]
+ 
+ [[package]]
+ name = "rand_hc"
+-version = "0.3.0"
++version = "0.3.1"
+ source = "registry+https://github.com/rust-lang/crates.io-index"
+-checksum = "3190ef7066a446f2e7f42e239d161e905420ccab01eb967c9eb27d21b2322a73"
++checksum = "d51e9f596de227fda2ea6c84607f5558e196eeaf43c986b724ba4fb8fdf497e7"
+ dependencies = [
+  "rand_core",
+ ]
+ 
+ [[package]]
+ name = "redox_syscall"
+-version = "0.2.6"
++version = "0.2.9"
+ source = "registry+https://github.com/rust-lang/crates.io-index"
+-checksum = "8270314b5ccceb518e7e578952f0b72b88222d02e8f77f5ecf7abbb673539041"
++checksum = "5ab49abadf3f9e1c4bc499e8845e152ad87d2ad2d30371841171169e9d75feee"
+ dependencies = [
+  "bitflags",
+ ]
+ 
+ [[package]]
+ name = "regex"
+-version = "1.4.5"
++version = "1.5.4"
+ source = "registry+https://github.com/rust-lang/crates.io-index"
+-checksum = "957056ecddbeba1b26965114e191d2e8589ce74db242b6ea25fc4062427a5c19"
++checksum = "d07a8629359eb56f1e2fb1652bb04212c072a87ba68546a04065d525673ac461"
+ dependencies = [
+  "aho-corasick",
+  "memchr",
+@@ -976,9 +963,9 @@ dependencies = [
+ 
+ [[package]]
+ name = "regex-syntax"
+-version = "0.6.23"
++version = "0.6.25"
+ source = "registry+https://github.com/rust-lang/crates.io-index"
+-checksum = "24d5f089152e60f62d28b835fbff2cd2e8dc0baf1ac13343bef92ab7eed84548"
++checksum = "f497285884f3fcff424ffc933e56d7cbca511def0c9831a7f9b5f6153e3cc89b"
+ 
+ [[package]]
+ name = "remove_dir_all"
+@@ -1003,18 +990,18 @@ checksum = "71d301d4193d031abdd79ff7e3dd721168a9572ef3fe51a1517aba235bd8f86e"
+ 
+ [[package]]
+ name = "serde"
+-version = "1.0.125"
++version = "1.0.126"
+ source = "registry+https://github.com/rust-lang/crates.io-index"
+-checksum = "558dc50e1a5a5fa7112ca2ce4effcb321b0300c0d4ccf0776a9f60cd89031171"
++checksum = "ec7505abeacaec74ae4778d9d9328fe5a5d04253220a85c4ee022239fc996d03"
+ dependencies = [
+  "serde_derive",
+ ]
+ 
+ [[package]]
+ name = "serde_derive"
+-version = "1.0.125"
++version = "1.0.126"
+ source = "registry+https://github.com/rust-lang/crates.io-index"
+-checksum = "b093b7a2bb58203b5da3056c05b4ec1fed827dcfdb37347a8841695263b3d06d"
++checksum = "963a7dbc9895aeac7ac90e74f34a5d5261828f79df35cbed41e10189d3804d43"
+ dependencies = [
+  "proc-macro2",
+  "quote",
+@@ -1052,9 +1039,9 @@ checksum = "42a568c8f2cd051a4d283bd6eb0343ac214c1b0f1ac19f93e1175b2dee38c73d"
+ 
+ [[package]]
+ name = "signal-hook"
+-version = "0.3.8"
++version = "0.3.9"
+ source = "registry+https://github.com/rust-lang/crates.io-index"
+-checksum = "ef33d6d0cd06e0840fba9985aab098c147e67e05cee14d412d3345ed14ff30ac"
++checksum = "470c5a6397076fae0094aaf06a08e6ba6f37acb77d3b1b91ea92b4d6c8650c39"
+ dependencies = [
+  "libc",
+  "signal-hook-registry",
+@@ -1062,9 +1049,9 @@ dependencies = [
+ 
+ [[package]]
+ name = "signal-hook-registry"
+-version = "1.3.0"
++version = "1.4.0"
+ source = "registry+https://github.com/rust-lang/crates.io-index"
+-checksum = "16f1d0fef1604ba8f7a073c7e701f213e056707210e9020af4528e0101ce11a6"
++checksum = "e51e73328dc4ac0c7ccbda3a494dfa03df1de2f46018127f60c693f2648455b0"
+ dependencies = [
+  "libc",
+ ]
+@@ -1090,9 +1077,9 @@ checksum = "8ea5119cdb4c55b55d432abb513a0429384878c15dde60cc77b1c99de1a95a6a"
+ 
+ [[package]]
+ name = "syn"
+-version = "1.0.69"
++version = "1.0.74"
+ source = "registry+https://github.com/rust-lang/crates.io-index"
+-checksum = "48fe99c6bd8b1cc636890bcc071842de909d902c81ac7dab53ba33c421ab8ffb"
++checksum = "1873d832550d4588c3dbc20f01361ab00bfe741048f71e3fecf145a7cc18b29c"
+ dependencies = [
+  "proc-macro2",
+  "quote",
+@@ -1155,25 +1142,36 @@ dependencies = [
+ 
+ [[package]]
+ name = "tokio"
+-version = "0.2.25"
++version = "1.9.0"
++source = "registry+https://github.com/rust-lang/crates.io-index"
++checksum = "4b7b349f11a7047e6d1276853e612d152f5e8a352c61917887cc2169e2366b4c"
++dependencies = [
++ "autocfg",
++ "pin-project-lite",
++]
++
++[[package]]
++name = "tokio-stream"
++version = "0.1.7"
+ source = "registry+https://github.com/rust-lang/crates.io-index"
+-checksum = "6703a273949a90131b290be1fe7b039d0fc884aa1935860dfcbe056f28cd8092"
++checksum = "7b2f3f698253f03119ac0102beaa64f67a67e08074d03a22d18784104543727f"
+ dependencies = [
+- "bytes 0.5.6",
+- "pin-project-lite 0.1.12",
++ "futures-core",
++ "pin-project-lite",
++ "tokio",
+ ]
+ 
+ [[package]]
+ name = "tokio-util"
+-version = "0.2.0"
++version = "0.6.7"
+ source = "registry+https://github.com/rust-lang/crates.io-index"
+-checksum = "571da51182ec208780505a32528fc5512a8fe1443ab960b3f2f3ef093cd16930"
++checksum = "1caa0b0c8d94a049db56b5acf8cba99dc0623aab1b26d5b5f5e2d945846b3592"
+ dependencies = [
+- "bytes 0.5.6",
++ "bytes",
+  "futures-core",
+  "futures-sink",
+  "log",
+- "pin-project-lite 0.1.12",
++ "pin-project-lite",
+  "tokio",
+ ]
+ 
+@@ -1194,14 +1192,14 @@ dependencies = [
+ 
+ [[package]]
+ name = "tonic"
+-version = "0.1.1"
++version = "0.5.0"
+ source = "registry+https://github.com/rust-lang/crates.io-index"
+-checksum = "08283643b1d483eb7f3fc77069e63b5cba3e4db93514b3d45470e67f123e4e48"
++checksum = "b584f064fdfc50017ec39162d5aebce49912f1eb16fd128e04b7f4ce4907c7e5"
+ dependencies = [
+  "async-stream",
+  "async-trait",
+  "base64",
+- "bytes 0.5.6",
++ "bytes",
+  "futures-core",
+  "futures-util",
+  "http",
+@@ -1210,17 +1208,18 @@ dependencies = [
+  "pin-project",
+  "prost",
+  "prost-derive",
++ "tokio-stream",
+  "tokio-util",
+- "tower-make",
++ "tower-layer",
+  "tower-service",
+  "tracing",
+ ]
+ 
+ [[package]]
+ name = "tonic-build"
+-version = "0.1.1"
++version = "0.5.1"
+ source = "registry+https://github.com/rust-lang/crates.io-index"
+-checksum = "0436413ba71545bcc6c2b9a0f9d78d72deb0123c6a75ccdfe7c056f9930f5e52"
++checksum = "d12faebbe071b06f486be82cc9318350814fdd07fcb28f3690840cd770599283"
+ dependencies = [
+  "proc-macro2",
+  "prost-build",
+@@ -1229,14 +1228,10 @@ dependencies = [
+ ]
+ 
+ [[package]]
+-name = "tower-make"
+-version = "0.3.0"
++name = "tower-layer"
++version = "0.3.1"
+ source = "registry+https://github.com/rust-lang/crates.io-index"
+-checksum = "ce50370d644a0364bf4877ffd4f76404156a248d104e2cc234cd391ea5cdc965"
+-dependencies = [
+- "tokio",
+- "tower-service",
+-]
++checksum = "343bc9466d3fe6b0f960ef45960509f84480bf4fd96f92901afe7ff3df9d3a62"
+ 
+ [[package]]
+ name = "tower-service"
+@@ -1246,12 +1241,12 @@ checksum = "360dfd1d6d30e05fda32ace2c8c70e9c0a9da713275777f5a4dbb8a1893930c6"
+ 
+ [[package]]
+ name = "tracing"
+-version = "0.1.25"
++version = "0.1.26"
+ source = "registry+https://github.com/rust-lang/crates.io-index"
+-checksum = "01ebdc2bb4498ab1ab5f5b73c5803825e60199229ccba0698170e3be0e7f959f"
++checksum = "09adeb8c97449311ccd28a427f96fb563e7fd31aabf994189879d9da2394b89d"
+ dependencies = [
+  "cfg-if 1.0.0",
+- "pin-project-lite 0.2.6",
++ "pin-project-lite",
+  "tracing-attributes",
+  "tracing-core",
+ ]
+@@ -1269,9 +1264,9 @@ dependencies = [
+ 
+ [[package]]
+ name = "tracing-core"
+-version = "0.1.17"
++version = "0.1.18"
+ source = "registry+https://github.com/rust-lang/crates.io-index"
+-checksum = "f50de3927f93d202783f4513cda820ab47ef17f624b03c096e86ef00c67e6b5f"
++checksum = "a9ff14f98b1a4b289c6248a023c1c2fa1491062964e9fed67ab29c4e4da4a052"
+ dependencies = [
+  "lazy_static",
+ ]
+@@ -1290,9 +1285,9 @@ checksum = "56dee185309b50d1f11bfedef0fe6d036842e3fb77413abef29f8f8d1c5d4c1c"
+ 
+ [[package]]
+ name = "unicode-segmentation"
+-version = "1.7.1"
++version = "1.8.0"
+ source = "registry+https://github.com/rust-lang/crates.io-index"
+-checksum = "bb0d2e7be6ae3a5fa87eed5fb451aff96f2573d2694942e40543ae0bbe19c796"
++checksum = "8895849a949e7845e06bd6dc1aa51731a103c42707010a5b591c0038fb73385b"
+ 
+ [[package]]
+ name = "unicode-width"
+@@ -1302,9 +1297,9 @@ checksum = "9337591893a19b88d8d87f2cec1e73fad5cdfd10e5a6f349f498ad6ea2ffb1e3"
+ 
+ [[package]]
+ name = "unicode-xid"
+-version = "0.2.1"
++version = "0.2.2"
+ source = "registry+https://github.com/rust-lang/crates.io-index"
+-checksum = "f7fe0bb3479651439c9112f72b6c505038574c9fbb575ed1bf3b797fa39dd564"
++checksum = "8ccb82d61f80a663efe1f787a51b16b5a51e3314d6ac365b08639f52387b33f3"
+ 
+ [[package]]
+ name = "uuid"
+@@ -1348,6 +1343,16 @@ dependencies = [
+  "libc",
+ ]
+ 
++[[package]]
++name = "which"
++version = "4.1.0"
++source = "registry+https://github.com/rust-lang/crates.io-index"
++checksum = "b55551e42cbdf2ce2bedd2203d0cc08dba002c27510f86dab6d0ce304cba3dfe"
++dependencies = [
++ "either",
++ "libc",
++]
++
+ [[package]]
+ name = "winapi"
+ version = "0.3.9"
+diff --git a/chirpstack-concentratord-2g4/Cargo.toml b/chirpstack-concentratord-2g4/Cargo.toml
+index 7d1a44e..7c45e8e 100644
+--- a/chirpstack-concentratord-2g4/Cargo.toml
++++ b/chirpstack-concentratord-2g4/Cargo.toml
+@@ -8,7 +8,7 @@ publish = false
+ [dependencies]
+ libloragw-2g4 = {path = "../libloragw-2g4"}
+ libconcentratord = {path = "../libconcentratord"}
+-chirpstack_api = { version = "3.9", default-features = false }
++chirpstack_api = { version = "3.10", default-features = false }
+ serde = { version = "1.0", features = ["derive"] }
+ toml = "0.5"
+ clap = "2.33"
+@@ -21,10 +21,10 @@ uuid = { version = "0.8", features = ["v4"] }
+ chrono = "0.4"
+ humantime-serde = "1.0"
+ syslog = "5.0"
+-prost = "0.6.1"
+-prost-types = "0.6.1"
++prost = "0.8"
++prost-types = "0.8"
+ signal-hook = "0.3"
+-handlebars = "3.5"
++handlebars = "4.1"
+ 
+ [features]
+ default = ['zmq/vendored']
+diff --git a/chirpstack-concentratord-sx1301/Cargo.toml b/chirpstack-concentratord-sx1301/Cargo.toml
+index 88cff41..aabc3fe 100644
+--- a/chirpstack-concentratord-sx1301/Cargo.toml
++++ b/chirpstack-concentratord-sx1301/Cargo.toml
+@@ -8,7 +8,7 @@ publish = false
+ [dependencies]
+ libloragw-sx1301 = {path = "../libloragw-sx1301"}
+ libconcentratord = {path = "../libconcentratord"}
+-chirpstack_api = { version = "3.9", default-features = false }
++chirpstack_api = { version = "3.10", default-features = false }
+ serde = { version = "1.0", features = ["derive"] }
+ toml = "0.5"
+ clap = "2.33"
+@@ -21,10 +21,10 @@ uuid = { version = "0.8", features = ["v4"] }
+ chrono = "0.4"
+ humantime-serde = "1.0"
+ syslog = "5.0"
+-prost = "0.6.1"
+-prost-types = "0.6.1"
++prost = "0.8"
++prost-types = "0.8"
+ signal-hook = "0.3"
+-handlebars = "3.5"
++handlebars = "4.1"
+ 
+ [features]
+ default = ['zmq/vendored']
+diff --git a/chirpstack-concentratord-sx1301/src/wrapper/mod.rs b/chirpstack-concentratord-sx1301/src/wrapper/mod.rs
+index 3db4911..6ebf2d6 100644
+--- a/chirpstack-concentratord-sx1301/src/wrapper/mod.rs
++++ b/chirpstack-concentratord-sx1301/src/wrapper/mod.rs
+@@ -199,6 +199,9 @@ pub fn downlink_from_proto(
+         modulation: match tx_info.modulation() {
+             chirpstack_api::common::Modulation::Lora => hal::Modulation::LoRa,
+             chirpstack_api::common::Modulation::Fsk => hal::Modulation::FSK,
++            chirpstack_api::common::Modulation::LrFhss => {
++                return Err("lr-fhss modulation is not supported".to_string());
++            }
+         },
+         rf_chain: 0,
+         rf_power: tx_info.power as i8,
+diff --git a/chirpstack-concentratord-sx1302/Cargo.toml b/chirpstack-concentratord-sx1302/Cargo.toml
+index f8a89c0..9e9d9de 100644
+--- a/chirpstack-concentratord-sx1302/Cargo.toml
++++ b/chirpstack-concentratord-sx1302/Cargo.toml
+@@ -8,7 +8,7 @@ publish = false
+ [dependencies]
+ libloragw-sx1302 = {path = "../libloragw-sx1302"}
+ libconcentratord = {path = "../libconcentratord"}
+-chirpstack_api = { version = "3.9", default-features = false }
++chirpstack_api = { version = "3.10", default-features = false }
+ serde = { version = "1.0", features = ["derive"] }
+ toml = "0.5"
+ clap = "2.33"
+@@ -21,10 +21,10 @@ uuid = { version = "0.8", features = ["v4"] }
+ chrono = "0.4"
+ humantime-serde = "1.0"
+ syslog = "5.0"
+-prost = "0.6.1"
+-prost-types = "0.6.1"
++prost = "0.8"
++prost-types = "0.8"
+ signal-hook = "0.3"
+-handlebars = "3.5"
++handlebars = "4.1"
+ 
+ [features]
+ default = ['zmq/vendored']
+diff --git a/chirpstack-concentratord-sx1302/src/wrapper/mod.rs b/chirpstack-concentratord-sx1302/src/wrapper/mod.rs
+index 8348aab..126d47b 100644
+--- a/chirpstack-concentratord-sx1302/src/wrapper/mod.rs
++++ b/chirpstack-concentratord-sx1302/src/wrapper/mod.rs
+@@ -199,6 +199,9 @@ pub fn downlink_from_proto(
+         modulation: match tx_info.modulation() {
+             chirpstack_api::common::Modulation::Lora => hal::Modulation::LoRa,
+             chirpstack_api::common::Modulation::Fsk => hal::Modulation::FSK,
++            chirpstack_api::common::Modulation::LrFhss => {
++                return Err("lr-fhss modulation is not supported".to_string());
++            }
+         },
+         rf_chain: 0,
+         rf_power: tx_info.power as i8,
+diff --git a/libconcentratord/Cargo.toml b/libconcentratord/Cargo.toml
+index 7db8c5f..33858fb 100644
+--- a/libconcentratord/Cargo.toml
++++ b/libconcentratord/Cargo.toml
+@@ -11,9 +11,9 @@ zmq = "0.9"
+ lazy_static = "1.4"
+ chirpstack_api = { version = "3.9", default-features = false }
+ uuid = { version = "0.8", features = ["v4"] }
+-prost = "0.6"
+-prost-types = "0.6"
+-gpio-cdev = "0.3"
++prost = "0.8"
++prost-types = "0.8"
++gpio-cdev = "0.4"
+ 
+ [features]
+ default = ['zmq/vendored']
+-- 
+2.25.1
+
diff --git a/0004-Bump-version.patch b/0004-Bump-version.patch
new file mode 100644
index 0000000..e35fe64
--- /dev/null
+++ b/0004-Bump-version.patch
@@ -0,0 +1,104 @@
+From 63f92d3cd86f22bcbe41b1d6f568b898b01273d5 Mon Sep 17 00:00:00 2001
+From: Orne Brocaar <info@brocaar.com>
+Date: Wed, 5 May 2021 15:15:49 +0100
+Subject: [PATCH 04/10] Bump version.
+
+---
+ Cargo.lock                                 | 8 ++++----
+ chirpstack-concentratord-2g4/Cargo.toml    | 2 +-
+ chirpstack-concentratord-sx1301/Cargo.toml | 2 +-
+ chirpstack-concentratord-sx1302/Cargo.toml | 2 +-
+ gateway-id/Cargo.toml                      | 2 +-
+ 5 files changed, 8 insertions(+), 8 deletions(-)
+
+diff --git a/Cargo.lock b/Cargo.lock
+index be54c5e..8866c53 100644
+--- a/Cargo.lock
++++ b/Cargo.lock
+@@ -185,7 +185,7 @@ checksum = "baf1de4339761588bc0619e3cbc0120ee582ebb74b53b4efbf79117bd2da40fd"
+ 
+ [[package]]
+ name = "chirpstack-concentratord-2g4"
+-version = "3.0.4"
++version = "3.2.0-test.1"
+ dependencies = [
+  "chirpstack_api",
+  "chrono",
+@@ -210,7 +210,7 @@ dependencies = [
+ 
+ [[package]]
+ name = "chirpstack-concentratord-sx1301"
+-version = "3.1.0"
++version = "3.2.0-test.1"
+ dependencies = [
+  "chirpstack_api",
+  "chrono",
+@@ -235,7 +235,7 @@ dependencies = [
+ 
+ [[package]]
+ name = "chirpstack-concentratord-sx1302"
+-version = "3.1.0"
++version = "3.2.0-test.1"
+ dependencies = [
+  "chirpstack_api",
+  "chrono",
+@@ -422,7 +422,7 @@ dependencies = [
+ 
+ [[package]]
+ name = "gateway-id"
+-version = "3.1.0"
++version = "3.2.0-test.1"
+ dependencies = [
+  "clap",
+  "hex",
+diff --git a/chirpstack-concentratord-2g4/Cargo.toml b/chirpstack-concentratord-2g4/Cargo.toml
+index 4264d3e..2fd6587 100644
+--- a/chirpstack-concentratord-2g4/Cargo.toml
++++ b/chirpstack-concentratord-2g4/Cargo.toml
+@@ -1,6 +1,6 @@
+ [package]
+ name = "chirpstack-concentratord-2g4"
+-version = "3.0.4"
++version = "3.2.0-test.1"
+ authors = ["Orne Brocaar <info@brocaar.com>"]
+ edition = "2018"
+ publish = false
+diff --git a/chirpstack-concentratord-sx1301/Cargo.toml b/chirpstack-concentratord-sx1301/Cargo.toml
+index 314ed6a..7c79f77 100644
+--- a/chirpstack-concentratord-sx1301/Cargo.toml
++++ b/chirpstack-concentratord-sx1301/Cargo.toml
+@@ -1,6 +1,6 @@
+ [package]
+ name = "chirpstack-concentratord-sx1301"
+-version = "3.1.0"
++version = "3.2.0-test.1"
+ authors = ["Orne Brocaar <info@brocaar.com>"]
+ edition = "2018"
+ publish = false
+diff --git a/chirpstack-concentratord-sx1302/Cargo.toml b/chirpstack-concentratord-sx1302/Cargo.toml
+index e58b993..6848856 100644
+--- a/chirpstack-concentratord-sx1302/Cargo.toml
++++ b/chirpstack-concentratord-sx1302/Cargo.toml
+@@ -1,6 +1,6 @@
+ [package]
+ name = "chirpstack-concentratord-sx1302"
+-version = "3.1.0"
++version = "3.2.0-test.1"
+ authors = ["Orne Brocaar <info@brocaar.com>"]
+ edition = "2018"
+ publish = false
+diff --git a/gateway-id/Cargo.toml b/gateway-id/Cargo.toml
+index 90db9a1..b6b49ac 100644
+--- a/gateway-id/Cargo.toml
++++ b/gateway-id/Cargo.toml
+@@ -1,6 +1,6 @@
+ [package]
+ name = "gateway-id"
+-version = "3.1.0"
++version = "3.2.0-test.1"
+ authors = ["Orne Brocaar <info@brocaar.com>"]
+ edition = "2018"
+ publish = false
+-- 
+2.25.1
+
diff --git a/0004-Implement-various-gateway-stats-aggregations.patch b/0004-Implement-various-gateway-stats-aggregations.patch
new file mode 100644
index 0000000..8a66a4c
--- /dev/null
+++ b/0004-Implement-various-gateway-stats-aggregations.patch
@@ -0,0 +1,652 @@
+From c350f0e46e4537bb76f2db0a913ff5f4e954ed99 Mon Sep 17 00:00:00 2001
+From: Orne Brocaar <info@brocaar.com>
+Date: Tue, 31 Aug 2021 13:13:48 +0100
+Subject: [PATCH 4/5] Implement various gateway stats aggregations.
+
+* Uplinks / downlinks per frequency.
+* Uplinks / downlinks per modulation parameters.
+* Downlinks per ACK status.
+---
+ Cargo.lock                                    |   4 +-
+ .../src/handler/command.rs                    |   9 +-
+ .../src/handler/jit.rs                        |   4 +-
+ .../src/handler/uplink.rs                     |  12 +-
+ chirpstack-concentratord-2g4/src/wrapper.rs   |  35 +++++
+ .../src/handler/command.rs                    |   9 +-
+ .../src/handler/jit.rs                        |   4 +-
+ .../src/handler/uplink.rs                     |  12 +-
+ .../src/wrapper/mod.rs                        |  54 ++++++++
+ .../src/handler/command.rs                    |   9 +-
+ .../src/handler/jit.rs                        |   4 +-
+ .../src/handler/uplink.rs                     |  12 +-
+ .../src/wrapper/mod.rs                        |  56 ++++++++
+ libconcentratord/Cargo.toml                   |   2 +-
+ libconcentratord/src/stats.rs                 | 125 ++++++++++++++++--
+ libloragw-2g4/src/hal.rs                      |   2 +-
+ libloragw-sx1301/src/hal.rs                   |   2 +-
+ libloragw-sx1302/src/hal.rs                   |   2 +-
+ 18 files changed, 322 insertions(+), 35 deletions(-)
+
+diff --git a/Cargo.lock b/Cargo.lock
+index 169d827..60d6c6f 100644
+--- a/Cargo.lock
++++ b/Cargo.lock
+@@ -251,9 +251,9 @@ dependencies = [
+ 
+ [[package]]
+ name = "chirpstack_api"
+-version = "3.10.2"
++version = "3.11.1"
+ source = "registry+https://github.com/rust-lang/crates.io-index"
+-checksum = "a512de50d789d961f60070c77f12fb599c5f4f3656a857d4416d4f20a30cd94f"
++checksum = "08809efa6523e3498d6e16222230aaf152a0fe75a3a3f42a5fbd3ed14f4d6f1e"
+ dependencies = [
+  "prost",
+  "prost-types",
+diff --git a/chirpstack-concentratord-2g4/src/handler/command.rs b/chirpstack-concentratord-2g4/src/handler/command.rs
+index 7b2781a..d44522a 100644
+--- a/chirpstack-concentratord-2g4/src/handler/command.rs
++++ b/chirpstack-concentratord-2g4/src/handler/command.rs
+@@ -91,6 +91,7 @@ fn handle_downlink(
+         items: vec![Default::default(); pl.items.len()],
+         ..Default::default()
+     };
++    let mut stats_tx_status = chirpstack_api::gw::TxAckStatus::Ignored;
+ 
+     for (i, item) in pl.items.iter().enumerate() {
+         // convert protobuf to hal struct
+@@ -122,14 +123,20 @@ fn handle_downlink(
+         ) {
+             Ok(_) => {
+                 tx_ack.items[i].set_status(chirpstack_api::gw::TxAckStatus::Ok);
++                stats_tx_status = chirpstack_api::gw::TxAckStatus::Ok;
+ 
+                 // break out of for loop
+                 break;
+             }
+-            Err(status) => tx_ack.items[i].set_status(status),
++            Err(status) => {
++                tx_ack.items[i].set_status(status);
++                stats_tx_status = status;
++            }
+         };
+     }
+ 
++    stats::inc_tx_status_count(stats_tx_status);
++
+     let mut buf = Vec::new();
+     tx_ack.encode(&mut buf).unwrap();
+     return Ok(buf);
+diff --git a/chirpstack-concentratord-2g4/src/handler/jit.rs b/chirpstack-concentratord-2g4/src/handler/jit.rs
+index 51193ad..3bd5b88 100644
+--- a/chirpstack-concentratord-2g4/src/handler/jit.rs
++++ b/chirpstack-concentratord-2g4/src/handler/jit.rs
+@@ -47,7 +47,9 @@ pub fn jit_loop(
+                     tx_packet.datarate
+                     );
+ 
+-                stats::inc_tx_packets_emitted();
++                if let Ok(tx_info) = wrapper::downlink_to_tx_info_proto(&tx_packet) {
++                    stats::inc_tx_counts(&tx_info);
++                }
+             }
+             Err(err) => {
+                 error!("Schedule packet for tx error, error: {}", err);
+diff --git a/chirpstack-concentratord-2g4/src/handler/uplink.rs b/chirpstack-concentratord-2g4/src/handler/uplink.rs
+index 3178d2d..02f29c8 100644
+--- a/chirpstack-concentratord-2g4/src/handler/uplink.rs
++++ b/chirpstack-concentratord-2g4/src/handler/uplink.rs
+@@ -24,6 +24,12 @@ pub fn handle_loop(gateway_id: &[u8], stop_receive: Receiver<Signal>) {
+         match hal::receive() {
+             Ok(frames) => {
+                 for frame in frames {
++                    stats::inc_rx_packets_received();
++                    if frame.status != hal::CRC::CRCOk {
++                        debug!("Frame received with invalid CRC");
++                        continue;
++                    }
++
+                     let proto = match wrapper::uplink_to_proto(gateway_id.clone(), &frame) {
+                         Ok(v) => v,
+                         Err(err) => {
+@@ -45,11 +51,7 @@ pub fn handle_loop(gateway_id: &[u8], stop_receive: Receiver<Signal>) {
+                         frame.datarate,
+                     );
+ 
+-                    stats::inc_rx_packets_received();
+-                    if rx_info.crc_status() == chirpstack_api::gw::CrcStatus::CrcOk {
+-                        stats::inc_rx_packets_received_ok();
+-                    }
+-
++                    stats::inc_rx_counts(&proto);
+                     events::send_uplink(&proto).unwrap();
+                 }
+             }
+diff --git a/chirpstack-concentratord-2g4/src/wrapper.rs b/chirpstack-concentratord-2g4/src/wrapper.rs
+index 990b320..507e61a 100644
+--- a/chirpstack-concentratord-2g4/src/wrapper.rs
++++ b/chirpstack-concentratord-2g4/src/wrapper.rs
+@@ -223,3 +223,38 @@ pub fn downlink_from_proto(
+ 
+     return Ok(packet);
+ }
++
++pub fn downlink_to_tx_info_proto(
++    packet: &hal::TxPacket,
++) -> Result<chirpstack_api::gw::DownlinkTxInfo, String> {
++    let mut tx_info: chirpstack_api::gw::DownlinkTxInfo = Default::default();
++    tx_info.frequency = packet.freq_hz;
++
++    let mut mod_info: chirpstack_api::gw::LoRaModulationInfo = Default::default();
++    mod_info.bandwidth = packet.bandwidth;
++    mod_info.spreading_factor = match packet.datarate {
++        hal::DataRate::SF5 => 5,
++        hal::DataRate::SF6 => 6,
++        hal::DataRate::SF7 => 7,
++        hal::DataRate::SF8 => 8,
++        hal::DataRate::SF9 => 9,
++        hal::DataRate::SF10 => 10,
++        hal::DataRate::SF11 => 11,
++        hal::DataRate::SF12 => 12,
++    };
++    mod_info.code_rate = match packet.coderate {
++        hal::CodeRate::LoRa4_5 => "4/5".to_string(),
++        hal::CodeRate::LoRa4_6 => "4/6".to_string(),
++        hal::CodeRate::LoRa4_7 => "4/7".to_string(),
++        hal::CodeRate::LoRa4_8 => "4/8".to_string(),
++        hal::CodeRate::LoRaLi4_5 => "4/5LI".to_string(),
++        hal::CodeRate::LoRaLi4_6 => "4/6LI".to_string(),
++        hal::CodeRate::LoRaLi4_8 => "4/8LI".to_string(),
++    };
++
++    tx_info.set_modulation(chirpstack_api::common::Modulation::Lora);
++    tx_info.modulation_info =
++        Some(chirpstack_api::gw::downlink_tx_info::ModulationInfo::LoraModulationInfo(mod_info));
++
++    Ok(tx_info)
++}
+diff --git a/chirpstack-concentratord-sx1301/src/handler/command.rs b/chirpstack-concentratord-sx1301/src/handler/command.rs
+index 6f92446..564174e 100644
+--- a/chirpstack-concentratord-sx1301/src/handler/command.rs
++++ b/chirpstack-concentratord-sx1301/src/handler/command.rs
+@@ -89,6 +89,7 @@ fn handle_downlink(
+         items: vec![Default::default(); pl.items.len()],
+         ..Default::default()
+     };
++    let mut stats_tx_status = chirpstack_api::gw::TxAckStatus::Ignored;
+ 
+     for (i, item) in pl.items.iter().enumerate() {
+         // convert protobuf to hal struct
+@@ -120,14 +121,20 @@ fn handle_downlink(
+         ) {
+             Ok(_) => {
+                 tx_ack.items[i].set_status(chirpstack_api::gw::TxAckStatus::Ok);
++                stats_tx_status = chirpstack_api::gw::TxAckStatus::Ok;
+ 
+                 // break out of for loop
+                 break;
+             }
+-            Err(status) => tx_ack.items[i].set_status(status),
++            Err(status) => {
++                tx_ack.items[i].set_status(status);
++                stats_tx_status = status;
++            }
+         };
+     }
+ 
++    stats::inc_tx_status_count(stats_tx_status);
++
+     let mut buf = Vec::new();
+     tx_ack.encode(&mut buf).unwrap();
+     return Ok(buf);
+diff --git a/chirpstack-concentratord-sx1301/src/handler/jit.rs b/chirpstack-concentratord-sx1301/src/handler/jit.rs
+index 163e94d..aea4391 100644
+--- a/chirpstack-concentratord-sx1301/src/handler/jit.rs
++++ b/chirpstack-concentratord-sx1301/src/handler/jit.rs
+@@ -49,7 +49,9 @@ pub fn jit_loop(
+                     tx_packet.datarate
+                 );
+ 
+-                stats::inc_tx_packets_emitted();
++                if let Ok(tx_info) = wrapper::downlink_to_tx_info_proto(&tx_packet) {
++                    stats::inc_tx_counts(&tx_info);
++                }
+             }
+             Err(err) => {
+                 error!("Schedule packet for tx error, error: {}", err);
+diff --git a/chirpstack-concentratord-sx1301/src/handler/uplink.rs b/chirpstack-concentratord-sx1301/src/handler/uplink.rs
+index 69871b4..8aa6b7f 100644
+--- a/chirpstack-concentratord-sx1301/src/handler/uplink.rs
++++ b/chirpstack-concentratord-sx1301/src/handler/uplink.rs
+@@ -24,6 +24,12 @@ pub fn handle_loop(gateway_id: &[u8], stop_receive: Receiver<Signal>) {
+         match hal::receive() {
+             Ok(frames) => {
+                 for frame in frames {
++                    stats::inc_rx_packets_received();
++                    if frame.status != hal::CRC::CRCOk {
++                        debug!("Frame received with invalid CRC");
++                        continue;
++                    }
++
+                     let proto = match wrapper::uplink_to_proto(gateway_id.clone(), &frame) {
+                         Ok(v) => v,
+                         Err(err) => {
+@@ -45,11 +51,7 @@ pub fn handle_loop(gateway_id: &[u8], stop_receive: Receiver<Signal>) {
+                         frame.datarate,
+                     );
+ 
+-                    stats::inc_rx_packets_received();
+-                    if rx_info.crc_status() == chirpstack_api::gw::CrcStatus::CrcOk {
+-                        stats::inc_rx_packets_received_ok();
+-                    }
+-
++                    stats::inc_rx_counts(&proto);
+                     events::send_uplink(&proto).unwrap();
+                 }
+             }
+diff --git a/chirpstack-concentratord-sx1301/src/wrapper/mod.rs b/chirpstack-concentratord-sx1301/src/wrapper/mod.rs
+index 6ebf2d6..15f7d12 100644
+--- a/chirpstack-concentratord-sx1301/src/wrapper/mod.rs
++++ b/chirpstack-concentratord-sx1301/src/wrapper/mod.rs
+@@ -287,3 +287,57 @@ pub fn downlink_from_proto(
+ 
+     return Ok(packet);
+ }
++
++pub fn downlink_to_tx_info_proto(
++    packet: &hal::TxPacket,
++) -> Result<chirpstack_api::gw::DownlinkTxInfo, String> {
++    let mut tx_info: chirpstack_api::gw::DownlinkTxInfo = Default::default();
++    tx_info.frequency = packet.freq_hz;
++
++    match packet.modulation {
++        hal::Modulation::LoRa => {
++            let mut mod_info: chirpstack_api::gw::LoRaModulationInfo = Default::default();
++            mod_info.bandwidth = packet.bandwidth;
++            mod_info.spreading_factor = match packet.datarate {
++                hal::DataRate::SF7 => 7,
++                hal::DataRate::SF8 => 8,
++                hal::DataRate::SF9 => 9,
++                hal::DataRate::SF10 => 10,
++                hal::DataRate::SF11 => 11,
++                hal::DataRate::SF12 => 12,
++                _ => {
++                    return Err("unexpected spreading-factor".to_string());
++                }
++            };
++            mod_info.code_rate = match packet.coderate {
++                hal::CodeRate::LoRa4_5 => "4/5".to_string(),
++                hal::CodeRate::LoRa4_6 => "4/6".to_string(),
++                hal::CodeRate::LoRa4_7 => "4/7".to_string(),
++                hal::CodeRate::LoRa4_8 => "4/8".to_string(),
++                hal::CodeRate::Undefined => "".to_string(),
++            };
++
++            tx_info.set_modulation(chirpstack_api::common::Modulation::Lora);
++            tx_info.modulation_info = Some(
++                chirpstack_api::gw::downlink_tx_info::ModulationInfo::LoraModulationInfo(mod_info),
++            );
++        }
++        hal::Modulation::FSK => {
++            let mut mod_info: chirpstack_api::gw::FskModulationInfo = Default::default();
++            mod_info.datarate = match packet.datarate {
++                hal::DataRate::FSK(v) => v * 1000,
++                _ => return Err("unexpected datarate".to_string()),
++            };
++
++            tx_info.set_modulation(chirpstack_api::common::Modulation::Fsk);
++            tx_info.modulation_info = Some(
++                chirpstack_api::gw::downlink_tx_info::ModulationInfo::FskModulationInfo(mod_info),
++            );
++        }
++        hal::Modulation::Undefined => {
++            return Err("undefined modulation".to_string());
++        }
++    }
++
++    Ok(tx_info)
++}
+diff --git a/chirpstack-concentratord-sx1302/src/handler/command.rs b/chirpstack-concentratord-sx1302/src/handler/command.rs
+index be87e1e..8e46d20 100644
+--- a/chirpstack-concentratord-sx1302/src/handler/command.rs
++++ b/chirpstack-concentratord-sx1302/src/handler/command.rs
+@@ -89,6 +89,7 @@ fn handle_downlink(
+         items: vec![Default::default(); pl.items.len()],
+         ..Default::default()
+     };
++    let mut stats_tx_status = chirpstack_api::gw::TxAckStatus::Ignored;
+ 
+     for (i, item) in pl.items.iter().enumerate() {
+         // convert protobuf to hal struct
+@@ -129,14 +130,20 @@ fn handle_downlink(
+         ) {
+             Ok(_) => {
+                 tx_ack.items[i].set_status(chirpstack_api::gw::TxAckStatus::Ok);
++                stats_tx_status = chirpstack_api::gw::TxAckStatus::Ok;
+ 
+                 // break out of loop
+                 break;
+             }
+-            Err(status) => tx_ack.items[i].set_status(status),
++            Err(status) => {
++                tx_ack.items[i].set_status(status);
++                stats_tx_status = status;
++            }
+         };
+     }
+ 
++    stats::inc_tx_status_count(stats_tx_status);
++
+     let mut buf = Vec::new();
+     tx_ack.encode(&mut buf).unwrap();
+     return Ok(buf);
+diff --git a/chirpstack-concentratord-sx1302/src/handler/jit.rs b/chirpstack-concentratord-sx1302/src/handler/jit.rs
+index 8c98e30..144957e 100644
+--- a/chirpstack-concentratord-sx1302/src/handler/jit.rs
++++ b/chirpstack-concentratord-sx1302/src/handler/jit.rs
+@@ -48,7 +48,9 @@ pub fn jit_loop(
+                     tx_packet.datarate
+                 );
+ 
+-                stats::inc_tx_packets_emitted();
++                if let Ok(tx_info) = wrapper::downlink_to_tx_info_proto(&tx_packet) {
++                    stats::inc_tx_counts(&tx_info);
++                }
+             }
+             Err(err) => {
+                 error!("Schedule packet for tx error, error: {}", err);
+diff --git a/chirpstack-concentratord-sx1302/src/handler/uplink.rs b/chirpstack-concentratord-sx1302/src/handler/uplink.rs
+index 8bd758a..4b003e2 100644
+--- a/chirpstack-concentratord-sx1302/src/handler/uplink.rs
++++ b/chirpstack-concentratord-sx1302/src/handler/uplink.rs
+@@ -24,6 +24,12 @@ pub fn handle_loop(gateway_id: &[u8], stop_receive: Receiver<Signal>) {
+         match hal::receive() {
+             Ok(frames) => {
+                 for frame in frames {
++                    stats::inc_rx_packets_received();
++                    if frame.status != hal::CRC::CRCOk {
++                        debug!("Frame received with invalid CRC");
++                        continue;
++                    }
++
+                     let proto = match wrapper::uplink_to_proto(gateway_id.clone(), &frame) {
+                         Ok(v) => v,
+                         Err(err) => {
+@@ -45,11 +51,7 @@ pub fn handle_loop(gateway_id: &[u8], stop_receive: Receiver<Signal>) {
+                         frame.datarate,
+                     );
+ 
+-                    stats::inc_rx_packets_received();
+-                    if rx_info.crc_status() == chirpstack_api::gw::CrcStatus::CrcOk {
+-                        stats::inc_rx_packets_received_ok();
+-                    }
+-
++                    stats::inc_rx_counts(&proto);
+                     events::send_uplink(&proto).unwrap();
+                 }
+             }
+diff --git a/chirpstack-concentratord-sx1302/src/wrapper/mod.rs b/chirpstack-concentratord-sx1302/src/wrapper/mod.rs
+index 126d47b..2b935bd 100644
+--- a/chirpstack-concentratord-sx1302/src/wrapper/mod.rs
++++ b/chirpstack-concentratord-sx1302/src/wrapper/mod.rs
+@@ -290,3 +290,59 @@ pub fn downlink_from_proto(
+ 
+     return Ok(packet);
+ }
++
++pub fn downlink_to_tx_info_proto(
++    packet: &hal::TxPacket,
++) -> Result<chirpstack_api::gw::DownlinkTxInfo, String> {
++    let mut tx_info: chirpstack_api::gw::DownlinkTxInfo = Default::default();
++    tx_info.frequency = packet.freq_hz;
++
++    match packet.modulation {
++        hal::Modulation::LoRa => {
++            let mut mod_info: chirpstack_api::gw::LoRaModulationInfo = Default::default();
++            mod_info.bandwidth = packet.bandwidth;
++            mod_info.spreading_factor = match packet.datarate {
++                hal::DataRate::SF5 => 5,
++                hal::DataRate::SF6 => 6,
++                hal::DataRate::SF7 => 7,
++                hal::DataRate::SF8 => 8,
++                hal::DataRate::SF9 => 9,
++                hal::DataRate::SF10 => 10,
++                hal::DataRate::SF11 => 11,
++                hal::DataRate::SF12 => 12,
++                _ => {
++                    return Err("unexpected spreading-factor".to_string());
++                }
++            };
++            mod_info.code_rate = match packet.coderate {
++                hal::CodeRate::LoRa4_5 => "4/5".to_string(),
++                hal::CodeRate::LoRa4_6 => "4/6".to_string(),
++                hal::CodeRate::LoRa4_7 => "4/7".to_string(),
++                hal::CodeRate::LoRa4_8 => "4/8".to_string(),
++                hal::CodeRate::Undefined => "".to_string(),
++            };
++
++            tx_info.set_modulation(chirpstack_api::common::Modulation::Lora);
++            tx_info.modulation_info = Some(
++                chirpstack_api::gw::downlink_tx_info::ModulationInfo::LoraModulationInfo(mod_info),
++            );
++        }
++        hal::Modulation::FSK => {
++            let mut mod_info: chirpstack_api::gw::FskModulationInfo = Default::default();
++            mod_info.datarate = match packet.datarate {
++                hal::DataRate::FSK(v) => v * 1000,
++                _ => return Err("unexpected datarate".to_string()),
++            };
++
++            tx_info.set_modulation(chirpstack_api::common::Modulation::Fsk);
++            tx_info.modulation_info = Some(
++                chirpstack_api::gw::downlink_tx_info::ModulationInfo::FskModulationInfo(mod_info),
++            );
++        }
++        hal::Modulation::Undefined => {
++            return Err("undefined modulation".to_string());
++        }
++    }
++
++    Ok(tx_info)
++}
+diff --git a/libconcentratord/Cargo.toml b/libconcentratord/Cargo.toml
+index 33858fb..6741b90 100644
+--- a/libconcentratord/Cargo.toml
++++ b/libconcentratord/Cargo.toml
+@@ -9,7 +9,7 @@ publish = false
+ log = "0.4"
+ zmq = "0.9"
+ lazy_static = "1.4"
+-chirpstack_api = { version = "3.9", default-features = false }
++chirpstack_api = { version = "3.11.1", default-features = false }
+ uuid = { version = "0.8", features = ["v4"] }
+ prost = "0.8"
+ prost-types = "0.8"
+diff --git a/libconcentratord/src/stats.rs b/libconcentratord/src/stats.rs
+index 6d1cced..b84fd3b 100644
+--- a/libconcentratord/src/stats.rs
++++ b/libconcentratord/src/stats.rs
+@@ -10,24 +10,133 @@ lazy_static! {
+     static ref STATS: Mutex<chirpstack_api::gw::GatewayStats> = Mutex::new(Default::default());
+ }
+ 
+-pub fn inc_rx_packets_received() {
++pub fn inc_rx_counts(pl: &chirpstack_api::gw::UplinkFrame) {
+     let mut stats = STATS.lock().unwrap();
+-    stats.rx_packets_received += 1;
++    stats.rx_packets_received_ok += 1;
++
++    match &pl.tx_info {
++        Some(tx_info) => {
++            stats
++                .rx_packets_per_frequency
++                .entry(tx_info.frequency)
++                .and_modify(|v| *v += 1)
++                .or_insert(1);
++
++            match &tx_info.modulation_info {
++                Some(mod_info) => {
++                    let modulation = Some(chirpstack_api::gw::Modulation {
++                        parameters: Some(match &mod_info {
++                        chirpstack_api::gw::uplink_tx_info::ModulationInfo::LoraModulationInfo(
++                            v,
++                        ) => chirpstack_api::gw::modulation::Parameters::Lora(v.clone()),
++                        chirpstack_api::gw::uplink_tx_info::ModulationInfo::FskModulationInfo(
++                            v,
++                        ) => chirpstack_api::gw::modulation::Parameters::Fsk(v.clone()),
++                        chirpstack_api::gw::uplink_tx_info::ModulationInfo::LrFhssModulationInfo(
++                            v,
++                        ) => chirpstack_api::gw::modulation::Parameters::LrFhss(v.clone()),
++                    })});
++
++                    let mut found = false;
++                    for mod_count in &mut stats.rx_packets_per_modulation {
++                        if mod_count.modulation == modulation {
++                            mod_count.count += 1;
++                            found = true;
++                        }
++                    }
++
++                    if !found {
++                        stats.rx_packets_per_modulation.push(
++                            chirpstack_api::gw::PerModulationCount {
++                                modulation: modulation,
++                                count: 1,
++                            },
++                        );
++                    }
++                }
++                None => {}
++            };
++        }
++        None => {}
++    };
+ }
+ 
+-pub fn inc_rx_packets_received_ok() {
++pub fn inc_tx_counts(tx_info: &chirpstack_api::gw::DownlinkTxInfo) {
+     let mut stats = STATS.lock().unwrap();
+-    stats.rx_packets_received_ok += 1;
++    stats.tx_packets_emitted += 1;
++
++    stats
++        .tx_packets_per_frequency
++        .entry(tx_info.frequency)
++        .and_modify(|v| *v += 1)
++        .or_insert(1);
++
++    match &tx_info.modulation_info {
++        Some(mod_info) => {
++            let modulation = Some(chirpstack_api::gw::Modulation {
++                parameters: Some(match &mod_info {
++                    chirpstack_api::gw::downlink_tx_info::ModulationInfo::LoraModulationInfo(v) => {
++                        chirpstack_api::gw::modulation::Parameters::Lora(v.clone())
++                    }
++                    chirpstack_api::gw::downlink_tx_info::ModulationInfo::FskModulationInfo(v) => {
++                        chirpstack_api::gw::modulation::Parameters::Fsk(v.clone())
++                    }
++                }),
++            });
++
++            let mut found = false;
++            for mod_count in &mut stats.tx_packets_per_modulation {
++                if mod_count.modulation == modulation {
++                    mod_count.count += 1;
++                    found = true;
++                }
++            }
++
++            if !found {
++                stats
++                    .tx_packets_per_modulation
++                    .push(chirpstack_api::gw::PerModulationCount {
++                        modulation: modulation,
++                        count: 1,
++                    });
++            }
++        }
++        None => {}
++    };
+ }
+ 
+-pub fn inc_tx_packets_received() {
++pub fn inc_tx_status_count(status: chirpstack_api::gw::TxAckStatus) {
++    let s = match status {
++        chirpstack_api::gw::TxAckStatus::Ignored => "IGNORED",
++        chirpstack_api::gw::TxAckStatus::Ok => "OK",
++        chirpstack_api::gw::TxAckStatus::TooLate => "TOO_LATE",
++        chirpstack_api::gw::TxAckStatus::TooEarly => "TOO_EARLY",
++        chirpstack_api::gw::TxAckStatus::CollisionPacket => "COLLISION_PACKET",
++        chirpstack_api::gw::TxAckStatus::CollisionBeacon => "COLLISION_BEACON",
++        chirpstack_api::gw::TxAckStatus::TxFreq => "TX_FREQ",
++        chirpstack_api::gw::TxAckStatus::TxPower => "TX_POWER",
++        chirpstack_api::gw::TxAckStatus::GpsUnlocked => "GPS_UNLOCKED",
++        chirpstack_api::gw::TxAckStatus::QueueFull => "QUEUE_FULL",
++        chirpstack_api::gw::TxAckStatus::InternalError => "InternalError",
++    }
++    .to_string();
++
+     let mut stats = STATS.lock().unwrap();
+-    stats.tx_packets_received += 1;
++    stats
++        .tx_packets_per_status
++        .entry(s)
++        .and_modify(|v| *v += 1)
++        .or_insert(1);
+ }
+ 
+-pub fn inc_tx_packets_emitted() {
++pub fn inc_rx_packets_received() {
+     let mut stats = STATS.lock().unwrap();
+-    stats.tx_packets_emitted += 1;
++    stats.rx_packets_received += 1;
++}
++
++pub fn inc_tx_packets_received() {
++    let mut stats = STATS.lock().unwrap();
++    stats.tx_packets_received += 1;
+ }
+ 
+ pub fn send_and_reset(
+diff --git a/libloragw-2g4/src/hal.rs b/libloragw-2g4/src/hal.rs
+index 513dca4..595cb65 100644
+--- a/libloragw-2g4/src/hal.rs
++++ b/libloragw-2g4/src/hal.rs
+@@ -40,7 +40,7 @@ impl ConvertBandwidth for Bandwidth {
+     }
+ }
+ 
+-#[derive(Debug, Copy, Clone)]
++#[derive(Debug, Copy, Clone, PartialEq)]
+ pub enum CRC {
+     Undefined,
+     NoCRC,
+diff --git a/libloragw-sx1301/src/hal.rs b/libloragw-sx1301/src/hal.rs
+index f563dd6..c135708 100644
+--- a/libloragw-sx1301/src/hal.rs
++++ b/libloragw-sx1301/src/hal.rs
+@@ -61,7 +61,7 @@ impl RadioType {
+     }
+ }
+ 
+-#[derive(Debug, Copy, Clone)]
++#[derive(Debug, Copy, Clone, PartialEq)]
+ pub enum CRC {
+     Undefined,
+     NoCRC,
+diff --git a/libloragw-sx1302/src/hal.rs b/libloragw-sx1302/src/hal.rs
+index 80c9c11..c085713 100644
+--- a/libloragw-sx1302/src/hal.rs
++++ b/libloragw-sx1302/src/hal.rs
+@@ -60,7 +60,7 @@ impl RadioType {
+     }
+ }
+ 
+-#[derive(Debug, Copy, Clone)]
++#[derive(Debug, Copy, Clone, PartialEq)]
+ pub enum CRC {
+     Undefined,
+     NoCRC,
+-- 
+2.25.1
+
diff --git a/0005-Fix-setting-the-correct-preamble-for-2.4GHz.patch b/0005-Fix-setting-the-correct-preamble-for-2.4GHz.patch
new file mode 100644
index 0000000..52b5b1b
--- /dev/null
+++ b/0005-Fix-setting-the-correct-preamble-for-2.4GHz.patch
@@ -0,0 +1,34 @@
+From d341539eaa83413d8dc3fcefcf74b08a773c29b4 Mon Sep 17 00:00:00 2001
+From: Orne Brocaar <info@brocaar.com>
+Date: Fri, 7 May 2021 08:40:57 +0100
+Subject: [PATCH 05/10] Fix setting the correct preamble for 2.4GHz.
+
+---
+ chirpstack-concentratord-2g4/src/wrapper.rs | 11 +++++++++++
+ 1 file changed, 11 insertions(+)
+
+diff --git a/chirpstack-concentratord-2g4/src/wrapper.rs b/chirpstack-concentratord-2g4/src/wrapper.rs
+index 21958ae..990b320 100644
+--- a/chirpstack-concentratord-2g4/src/wrapper.rs
++++ b/chirpstack-concentratord-2g4/src/wrapper.rs
+@@ -203,6 +203,17 @@ pub fn downlink_from_proto(
+                 "4/8LI" => hal::CodeRate::LoRaLi4_8,
+                 _ => return Err("unexpected coderate".to_string()),
+             };
++            packet.preamble = match v.spreading_factor {
++                5 => 12,
++                6 => 12,
++                7 => 8,
++                8 => 8,
++                9 => 8,
++                10 => 8,
++                11 => 8,
++                12 => 8,
++                _ => return Err("unexpected spreading-factor".to_string()),
++            };
+             packet.invert_pol = v.polarization_inversion;
+         }
+         _ => {
+-- 
+2.25.1
+
diff --git a/0005-Remove-Class-B-beacon-frequency-correction.patch b/0005-Remove-Class-B-beacon-frequency-correction.patch
new file mode 100644
index 0000000..bc911a9
--- /dev/null
+++ b/0005-Remove-Class-B-beacon-frequency-correction.patch
@@ -0,0 +1,68 @@
+From 97c727d5e4cb846b5873cb70c4bf8b3bdd66ff13 Mon Sep 17 00:00:00 2001
+From: Orne Brocaar <info@brocaar.com>
+Date: Tue, 31 Aug 2021 13:28:07 +0100
+Subject: [PATCH 5/5] Remove Class-B beacon frequency correction.
+
+This was copied over from the Semtech UDP Packet Forwarder, but should
+have been implemented on dequeue instead of enqueue, as the enqueue is
+happening in the future. For now this is removed, as it might need
+further research if this logic is needed or not. It is present in the
+Semtech UDP Packet Forwarder, but I could not find the same logic in the
+Basics Station.
+
+If this is needed, it must be implemented on dequeue, to make sure that
+we compensate the frequency with the xtal_correct value as close to the
+actual transmission as possible.
+
+For now this is removed as on sending the downlink, the Concentratord
+aggregates the downlink count on frequency. Before this change it would
+generate a many different frequencies as the xtal_correct value is
+variable.
+---
+ chirpstack-concentratord-sx1301/src/handler/beacon.rs | 7 +------
+ chirpstack-concentratord-sx1301/src/handler/gps.rs    | 8 --------
+ 2 files changed, 1 insertion(+), 14 deletions(-)
+
+diff --git a/chirpstack-concentratord-sx1301/src/handler/beacon.rs b/chirpstack-concentratord-sx1301/src/handler/beacon.rs
+index 1e48854..cc6a631 100644
+--- a/chirpstack-concentratord-sx1301/src/handler/beacon.rs
++++ b/chirpstack-concentratord-sx1301/src/handler/beacon.rs
+@@ -82,15 +82,10 @@ fn send_beacon(
+     beacon_pl.resize(data.len(), 0);
+     data.copy_from_slice(&beacon_pl);
+ 
+-    let xtal_correct = match gps::get_xtal_correct() {
+-        Ok(v) => v,
+-        Err(err) => return Err(err),
+-    };
+-
+     let tx_freq = conf.frequencies
+         [((beacon_time.as_secs() % (1 << 32)) % conf.frequencies.len() as u64) as usize];
+     let tx_packet = hal::TxPacket {
+-        freq_hz: (tx_freq as f64 * xtal_correct) as u32,
++        freq_hz: tx_freq,
+         tx_mode: hal::TxMode::OnGPS,
+         count_us: match gps::epoch2cnt(&beacon_time) {
+             Ok(v) => v,
+diff --git a/chirpstack-concentratord-sx1301/src/handler/gps.rs b/chirpstack-concentratord-sx1301/src/handler/gps.rs
+index 1bb20dc..cdb0093 100644
+--- a/chirpstack-concentratord-sx1301/src/handler/gps.rs
++++ b/chirpstack-concentratord-sx1301/src/handler/gps.rs
+@@ -265,14 +265,6 @@ pub fn get_gps_epoch() -> Result<Duration, String> {
+     return Ok(GPS_TIME_REF.lock().unwrap().gps_epoch);
+ }
+ 
+-pub fn get_xtal_correct() -> Result<f64, String> {
+-    if *XTAL_CORRECT_OK.lock().unwrap() == false {
+-        return Err("no valid xtal correction value available yet".to_string());
+-    }
+-
+-    return Ok(*XTAL_CORRECT.lock().unwrap());
+-}
+-
+ fn gps_process_sync() {
+     let (gps_time, gps_epoch, _, _) = match gps::get(true, false) {
+         Ok(v) => v,
+-- 
+2.25.1
+
diff --git a/0006-Bump-version.patch b/0006-Bump-version.patch
new file mode 100644
index 0000000..293ae1f
--- /dev/null
+++ b/0006-Bump-version.patch
@@ -0,0 +1,127 @@
+From 8d5dfd431c140d11d7042c4358463372c94234c9 Mon Sep 17 00:00:00 2001
+From: Orne Brocaar <info@brocaar.com>
+Date: Fri, 7 May 2021 08:48:09 +0100
+Subject: [PATCH 06/10] Bump version.
+
+---
+ Cargo.lock                                 |  8 ++++----
+ Makefile                                   | 10 ++++++++--
+ chirpstack-concentratord-2g4/Cargo.toml    |  2 +-
+ chirpstack-concentratord-sx1301/Cargo.toml |  2 +-
+ chirpstack-concentratord-sx1302/Cargo.toml |  2 +-
+ gateway-id/Cargo.toml                      |  2 +-
+ 6 files changed, 16 insertions(+), 10 deletions(-)
+
+diff --git a/Cargo.lock b/Cargo.lock
+index 8866c53..4ceef3f 100644
+--- a/Cargo.lock
++++ b/Cargo.lock
+@@ -185,7 +185,7 @@ checksum = "baf1de4339761588bc0619e3cbc0120ee582ebb74b53b4efbf79117bd2da40fd"
+ 
+ [[package]]
+ name = "chirpstack-concentratord-2g4"
+-version = "3.2.0-test.1"
++version = "3.2.0-test.2"
+ dependencies = [
+  "chirpstack_api",
+  "chrono",
+@@ -210,7 +210,7 @@ dependencies = [
+ 
+ [[package]]
+ name = "chirpstack-concentratord-sx1301"
+-version = "3.2.0-test.1"
++version = "3.2.0-test.2"
+ dependencies = [
+  "chirpstack_api",
+  "chrono",
+@@ -235,7 +235,7 @@ dependencies = [
+ 
+ [[package]]
+ name = "chirpstack-concentratord-sx1302"
+-version = "3.2.0-test.1"
++version = "3.2.0-test.2"
+ dependencies = [
+  "chirpstack_api",
+  "chrono",
+@@ -422,7 +422,7 @@ dependencies = [
+ 
+ [[package]]
+ name = "gateway-id"
+-version = "3.2.0-test.1"
++version = "3.2.0-test.2"
+ dependencies = [
+  "clap",
+  "hex",
+diff --git a/Makefile b/Makefile
+index 66a9309..7f0c2af 100644
+--- a/Makefile
++++ b/Makefile
+@@ -1,9 +1,15 @@
+-VERSION := $(shell git describe --always |sed -e "s/^v//")
++VERSION ?= $(shell git describe --always |sed -e "s/^v//")
+ 
+-build: build-armv5-release build-armv7hf-release
++build: version build-armv5-release build-armv7hf-release
+ 
+ package: build package-kerlink package-multitech
+ 
++version:
++	sed -i 's/^version.*/version = "$(VERSION)"/g' ./chirpstack-concentratord-2g4/Cargo.toml
++	sed -i 's/^version.*/version = "$(VERSION)"/g' ./chirpstack-concentratord-sx1301/Cargo.toml
++	sed -i 's/^version.*/version = "$(VERSION)"/g' ./chirpstack-concentratord-sx1302/Cargo.toml
++	sed -i 's/^version.*/version = "$(VERSION)"/g' ./gateway-id/Cargo.toml
++
+ clean:
+ 	rm -rf dist
+ 
+diff --git a/chirpstack-concentratord-2g4/Cargo.toml b/chirpstack-concentratord-2g4/Cargo.toml
+index 2fd6587..e71c359 100644
+--- a/chirpstack-concentratord-2g4/Cargo.toml
++++ b/chirpstack-concentratord-2g4/Cargo.toml
+@@ -1,6 +1,6 @@
+ [package]
+ name = "chirpstack-concentratord-2g4"
+-version = "3.2.0-test.1"
++version = "3.2.0-test.2"
+ authors = ["Orne Brocaar <info@brocaar.com>"]
+ edition = "2018"
+ publish = false
+diff --git a/chirpstack-concentratord-sx1301/Cargo.toml b/chirpstack-concentratord-sx1301/Cargo.toml
+index 7c79f77..32d0466 100644
+--- a/chirpstack-concentratord-sx1301/Cargo.toml
++++ b/chirpstack-concentratord-sx1301/Cargo.toml
+@@ -1,6 +1,6 @@
+ [package]
+ name = "chirpstack-concentratord-sx1301"
+-version = "3.2.0-test.1"
++version = "3.2.0-test.2"
+ authors = ["Orne Brocaar <info@brocaar.com>"]
+ edition = "2018"
+ publish = false
+diff --git a/chirpstack-concentratord-sx1302/Cargo.toml b/chirpstack-concentratord-sx1302/Cargo.toml
+index 6848856..0fdb0ce 100644
+--- a/chirpstack-concentratord-sx1302/Cargo.toml
++++ b/chirpstack-concentratord-sx1302/Cargo.toml
+@@ -1,6 +1,6 @@
+ [package]
+ name = "chirpstack-concentratord-sx1302"
+-version = "3.2.0-test.1"
++version = "3.2.0-test.2"
+ authors = ["Orne Brocaar <info@brocaar.com>"]
+ edition = "2018"
+ publish = false
+diff --git a/gateway-id/Cargo.toml b/gateway-id/Cargo.toml
+index b6b49ac..978eb2c 100644
+--- a/gateway-id/Cargo.toml
++++ b/gateway-id/Cargo.toml
+@@ -1,6 +1,6 @@
+ [package]
+ name = "gateway-id"
+-version = "3.2.0-test.1"
++version = "3.2.0-test.2"
+ authors = ["Orne Brocaar <info@brocaar.com>"]
+ edition = "2018"
+ publish = false
+-- 
+2.25.1
+
diff --git a/0007-Bump-version.patch b/0007-Bump-version.patch
new file mode 100644
index 0000000..ddabc8c
--- /dev/null
+++ b/0007-Bump-version.patch
@@ -0,0 +1,104 @@
+From 57d10c60bcfb5cb1d34cd1b2789e915fb740581f Mon Sep 17 00:00:00 2001
+From: Orne Brocaar <info@brocaar.com>
+Date: Mon, 10 May 2021 09:46:46 +0100
+Subject: [PATCH 07/10] Bump version.
+
+---
+ Cargo.lock                                 | 8 ++++----
+ chirpstack-concentratord-2g4/Cargo.toml    | 2 +-
+ chirpstack-concentratord-sx1301/Cargo.toml | 2 +-
+ chirpstack-concentratord-sx1302/Cargo.toml | 2 +-
+ gateway-id/Cargo.toml                      | 2 +-
+ 5 files changed, 8 insertions(+), 8 deletions(-)
+
+diff --git a/Cargo.lock b/Cargo.lock
+index 4ceef3f..71096f9 100644
+--- a/Cargo.lock
++++ b/Cargo.lock
+@@ -185,7 +185,7 @@ checksum = "baf1de4339761588bc0619e3cbc0120ee582ebb74b53b4efbf79117bd2da40fd"
+ 
+ [[package]]
+ name = "chirpstack-concentratord-2g4"
+-version = "3.2.0-test.2"
++version = "3.2.0"
+ dependencies = [
+  "chirpstack_api",
+  "chrono",
+@@ -210,7 +210,7 @@ dependencies = [
+ 
+ [[package]]
+ name = "chirpstack-concentratord-sx1301"
+-version = "3.2.0-test.2"
++version = "3.2.0"
+ dependencies = [
+  "chirpstack_api",
+  "chrono",
+@@ -235,7 +235,7 @@ dependencies = [
+ 
+ [[package]]
+ name = "chirpstack-concentratord-sx1302"
+-version = "3.2.0-test.2"
++version = "3.2.0"
+ dependencies = [
+  "chirpstack_api",
+  "chrono",
+@@ -422,7 +422,7 @@ dependencies = [
+ 
+ [[package]]
+ name = "gateway-id"
+-version = "3.2.0-test.2"
++version = "3.2.0"
+ dependencies = [
+  "clap",
+  "hex",
+diff --git a/chirpstack-concentratord-2g4/Cargo.toml b/chirpstack-concentratord-2g4/Cargo.toml
+index e71c359..7d1a44e 100644
+--- a/chirpstack-concentratord-2g4/Cargo.toml
++++ b/chirpstack-concentratord-2g4/Cargo.toml
+@@ -1,6 +1,6 @@
+ [package]
+ name = "chirpstack-concentratord-2g4"
+-version = "3.2.0-test.2"
++version = "3.2.0"
+ authors = ["Orne Brocaar <info@brocaar.com>"]
+ edition = "2018"
+ publish = false
+diff --git a/chirpstack-concentratord-sx1301/Cargo.toml b/chirpstack-concentratord-sx1301/Cargo.toml
+index 32d0466..88cff41 100644
+--- a/chirpstack-concentratord-sx1301/Cargo.toml
++++ b/chirpstack-concentratord-sx1301/Cargo.toml
+@@ -1,6 +1,6 @@
+ [package]
+ name = "chirpstack-concentratord-sx1301"
+-version = "3.2.0-test.2"
++version = "3.2.0"
+ authors = ["Orne Brocaar <info@brocaar.com>"]
+ edition = "2018"
+ publish = false
+diff --git a/chirpstack-concentratord-sx1302/Cargo.toml b/chirpstack-concentratord-sx1302/Cargo.toml
+index 0fdb0ce..f8a89c0 100644
+--- a/chirpstack-concentratord-sx1302/Cargo.toml
++++ b/chirpstack-concentratord-sx1302/Cargo.toml
+@@ -1,6 +1,6 @@
+ [package]
+ name = "chirpstack-concentratord-sx1302"
+-version = "3.2.0-test.2"
++version = "3.2.0"
+ authors = ["Orne Brocaar <info@brocaar.com>"]
+ edition = "2018"
+ publish = false
+diff --git a/gateway-id/Cargo.toml b/gateway-id/Cargo.toml
+index 978eb2c..367b605 100644
+--- a/gateway-id/Cargo.toml
++++ b/gateway-id/Cargo.toml
+@@ -1,6 +1,6 @@
+ [package]
+ name = "gateway-id"
+-version = "3.2.0-test.2"
++version = "3.2.0"
+ authors = ["Orne Brocaar <info@brocaar.com>"]
+ edition = "2018"
+ publish = false
+-- 
+2.25.1
+
diff --git a/0008-Update-dependencies.patch b/0008-Update-dependencies.patch
new file mode 100644
index 0000000..2a8592a
--- /dev/null
+++ b/0008-Update-dependencies.patch
@@ -0,0 +1,906 @@
+From 94a30cf0000c6313bd0f0c496e8151ea71cdc2d3 Mon Sep 17 00:00:00 2001
+From: Orne Brocaar <info@brocaar.com>
+Date: Wed, 28 Jul 2021 16:43:24 +0100
+Subject: [PATCH 08/10] Update dependencies.
+
+---
+ Cargo.lock                                    | 295 +++++++++---------
+ chirpstack-concentratord-2g4/Cargo.toml       |   8 +-
+ chirpstack-concentratord-sx1301/Cargo.toml    |   8 +-
+ .../src/wrapper/mod.rs                        |   3 +
+ chirpstack-concentratord-sx1302/Cargo.toml    |   8 +-
+ .../src/wrapper/mod.rs                        |   3 +
+ libconcentratord/Cargo.toml                   |   6 +-
+ 7 files changed, 171 insertions(+), 160 deletions(-)
+
+diff --git a/Cargo.lock b/Cargo.lock
+index 71096f9..169d827 100644
+--- a/Cargo.lock
++++ b/Cargo.lock
+@@ -2,9 +2,9 @@
+ # It is not intended for manual editing.
+ [[package]]
+ name = "aho-corasick"
+-version = "0.7.15"
++version = "0.7.18"
+ source = "registry+https://github.com/rust-lang/crates.io-index"
+-checksum = "7404febffaa47dac81aa44dba71523c9d069b1bdc50a77db41195149e17f68e5"
++checksum = "1e37cfd5e7657ada45f742d6e99ca5788580b5c529dc78faf11ece6dc702656f"
+ dependencies = [
+  "memchr",
+ ]
+@@ -20,15 +20,15 @@ dependencies = [
+ 
+ [[package]]
+ name = "anyhow"
+-version = "1.0.40"
++version = "1.0.42"
+ source = "registry+https://github.com/rust-lang/crates.io-index"
+-checksum = "28b2cd92db5cbd74e8e5028f7e27dd7aa3090e89e4f2a197cc7c8dfb69c7063b"
++checksum = "595d3cfa7a60d4555cb5067b99f07142a08ea778de5cf993f7b75c7d8fabc486"
+ 
+ [[package]]
+ name = "async-stream"
+-version = "0.2.1"
++version = "0.3.2"
+ source = "registry+https://github.com/rust-lang/crates.io-index"
+-checksum = "22068c0c19514942eefcfd4daf8976ef1aad84e61539f95cd200c35202f80af5"
++checksum = "171374e7e3b2504e0e5236e3b59260560f9fe94bfe9ac39ba5e4e929c5590625"
+ dependencies = [
+  "async-stream-impl",
+  "futures-core",
+@@ -36,9 +36,9 @@ dependencies = [
+ 
+ [[package]]
+ name = "async-stream-impl"
+-version = "0.2.1"
++version = "0.3.2"
+ source = "registry+https://github.com/rust-lang/crates.io-index"
+-checksum = "25f9db3b38af870bf7e5cc649167533b493928e50744e2c30ae350230b414670"
++checksum = "648ed8c8d2ce5409ccd57453d9d1b214b342a0d69376a6feda1fd6cae3299308"
+ dependencies = [
+  "proc-macro2",
+  "quote",
+@@ -47,9 +47,9 @@ dependencies = [
+ 
+ [[package]]
+ name = "async-trait"
+-version = "0.1.49"
++version = "0.1.50"
+ source = "registry+https://github.com/rust-lang/crates.io-index"
+-checksum = "589652ce7ccb335d1e7ecb3be145425702b290dbcb7029bbeaae263fc1d87b48"
++checksum = "0b98e84bbb4cbcdd97da190ba0c58a1bb0de2c1fdf67d159e192ed766aeca722"
+ dependencies = [
+  "proc-macro2",
+  "quote",
+@@ -75,12 +75,9 @@ checksum = "cdb031dd78e28731d87d56cc8ffef4a8f36ca26c38fe2de700543e627f8a464a"
+ 
+ [[package]]
+ name = "base64"
+-version = "0.10.1"
++version = "0.13.0"
+ source = "registry+https://github.com/rust-lang/crates.io-index"
+-checksum = "0b25d992356d2eb0ed82172f5248873db5560c4721f564b13cb5193bda5e668e"
+-dependencies = [
+- "byteorder",
+-]
++checksum = "904dfeac50f3cdaba28fc6f57fdcddb75f49ed61346676a78c4ffe55877802fd"
+ 
+ [[package]]
+ name = "bindgen"
+@@ -102,7 +99,7 @@ dependencies = [
+  "regex",
+  "rustc-hash",
+  "shlex",
+- "which",
++ "which 3.1.1",
+ ]
+ 
+ [[package]]
+@@ -144,12 +141,6 @@ version = "1.4.3"
+ source = "registry+https://github.com/rust-lang/crates.io-index"
+ checksum = "14c189c53d098945499cdfa7ecc63567cf3886b3332b312a5b4585d8d3a6a610"
+ 
+-[[package]]
+-name = "bytes"
+-version = "0.5.6"
+-source = "registry+https://github.com/rust-lang/crates.io-index"
+-checksum = "0e4cec68f03f32e44924783795810fa50a7035d8c8ebe78580ad7e6c703fba38"
+-
+ [[package]]
+ name = "bytes"
+ version = "1.0.1"
+@@ -158,9 +149,9 @@ checksum = "b700ce4376041dcd0a327fd0097c41095743c4c8af8887265942faf1100bd040"
+ 
+ [[package]]
+ name = "cc"
+-version = "1.0.67"
++version = "1.0.69"
+ source = "registry+https://github.com/rust-lang/crates.io-index"
+-checksum = "e3c69b077ad434294d3ce9f1f6143a2a4b89a8a2d54ef813d85003a4fd1137fd"
++checksum = "e70cc2f62c6ce1868963827bd677764c62d07c3d9a3e1fb1177ee1a9ab199eb2"
+ 
+ [[package]]
+ name = "cexpr"
+@@ -260,9 +251,9 @@ dependencies = [
+ 
+ [[package]]
+ name = "chirpstack_api"
+-version = "3.9.7"
++version = "3.10.2"
+ source = "registry+https://github.com/rust-lang/crates.io-index"
+-checksum = "d55f11f068abdad7b46cd76d8f67ca60f2f39368d6d614a1b737a485f3791d99"
++checksum = "a512de50d789d961f60070c77f12fb599c5f4f3656a857d4416d4f20a30cd94f"
+ dependencies = [
+  "prost",
+  "prost-types",
+@@ -346,9 +337,9 @@ checksum = "e78d4f1cc4ae33bbfc157ed5d5a5ef3bc29227303d595861deb238fcec4e9457"
+ 
+ [[package]]
+ name = "env_logger"
+-version = "0.8.3"
++version = "0.8.4"
+ source = "registry+https://github.com/rust-lang/crates.io-index"
+-checksum = "17392a012ea30ef05a610aa97dfb49496e71c9f676b27879922ea5bdf60d9d3f"
++checksum = "a19187fea3ac7e84da7dacf48de0c45d63c6a76f9490dae389aead16c243fce3"
+ dependencies = [
+  "atty",
+  "humantime",
+@@ -392,31 +383,32 @@ checksum = "3f9eec918d3f24069decb9af1554cad7c880e2da24a9afd88aca000531ab82c1"
+ 
+ [[package]]
+ name = "futures-core"
+-version = "0.3.14"
++version = "0.3.16"
+ source = "registry+https://github.com/rust-lang/crates.io-index"
+-checksum = "098cd1c6dda6ca01650f1a37a794245eb73181d0d4d4e955e2f3c37db7af1815"
++checksum = "af51b1b4a7fdff033703db39de8802c673eb91855f2e0d47dcf3bf2c0ef01f99"
+ 
+ [[package]]
+ name = "futures-sink"
+-version = "0.3.14"
++version = "0.3.16"
+ source = "registry+https://github.com/rust-lang/crates.io-index"
+-checksum = "5c5629433c555de3d82861a7a4e3794a4c40040390907cfbfd7143a92a426c23"
++checksum = "c0f30aaa67363d119812743aa5f33c201a7a66329f97d1a887022971feea4b53"
+ 
+ [[package]]
+ name = "futures-task"
+-version = "0.3.14"
++version = "0.3.16"
+ source = "registry+https://github.com/rust-lang/crates.io-index"
+-checksum = "ba7aa51095076f3ba6d9a1f702f74bd05ec65f555d70d2033d55ba8d69f581bc"
++checksum = "bbe54a98670017f3be909561f6ad13e810d9a51f3f061b902062ca3da80799f2"
+ 
+ [[package]]
+ name = "futures-util"
+-version = "0.3.14"
++version = "0.3.16"
+ source = "registry+https://github.com/rust-lang/crates.io-index"
+-checksum = "3c144ad54d60f23927f0a6b6d816e4271278b64f005ad65e4e35291d2de9c025"
++checksum = "67eb846bfd58e44a8481a00049e82c43e0ccb5d61f8dc071057cb19249dd4d78"
+ dependencies = [
++ "autocfg",
+  "futures-core",
+  "futures-task",
+- "pin-project-lite 0.2.6",
++ "pin-project-lite",
+  "pin-utils",
+ ]
+ 
+@@ -440,9 +432,9 @@ dependencies = [
+ 
+ [[package]]
+ name = "getrandom"
+-version = "0.2.2"
++version = "0.2.3"
+ source = "registry+https://github.com/rust-lang/crates.io-index"
+-checksum = "c9495705279e7140bf035dde1f6e750c162df8b625267cd52cc44e0b156732c8"
++checksum = "7fcd999463524c52659517fe2cea98493cfe485d10565e7b0fb07dbba7ad2753"
+ dependencies = [
+  "cfg-if 1.0.0",
+  "libc",
+@@ -457,9 +449,9 @@ checksum = "9b919933a397b79c37e33b77bb2aa3dc8eb6e165ad809e58ff75bc7db2e34574"
+ 
+ [[package]]
+ name = "gpio-cdev"
+-version = "0.3.0"
++version = "0.4.0"
+ source = "registry+https://github.com/rust-lang/crates.io-index"
+-checksum = "e1919e3c3b51096c4e63948ab480f233ea475665753d00c65b13e7269acc42ab"
++checksum = "da59d440ef8c26208b3960ed58b71b896db7dfd6bb138622bba733b66d978c3a"
+ dependencies = [
+  "bitflags",
+  "libc",
+@@ -468,9 +460,9 @@ dependencies = [
+ 
+ [[package]]
+ name = "handlebars"
+-version = "3.5.4"
++version = "4.1.0"
+ source = "registry+https://github.com/rust-lang/crates.io-index"
+-checksum = "580b6f551b29a3a02436318aed09ba1c58eea177dc49e39beac627ad356730a5"
++checksum = "72a0ffab8c36d0436114310c7e10b59b3307e650ddfabf6d006028e29a70c6e6"
+ dependencies = [
+  "log",
+  "pest",
+@@ -482,24 +474,24 @@ dependencies = [
+ 
+ [[package]]
+ name = "hashbrown"
+-version = "0.9.1"
++version = "0.11.2"
+ source = "registry+https://github.com/rust-lang/crates.io-index"
+-checksum = "d7afe4a420e3fe79967a00898cc1f4db7c8a49a9333a29f8a4bd76a253d5cd04"
++checksum = "ab5ef0d4909ef3724cc8cce6ccc8572c5c817592e9285f5464f8e86f8bd3726e"
+ 
+ [[package]]
+ name = "heck"
+-version = "0.3.2"
++version = "0.3.3"
+ source = "registry+https://github.com/rust-lang/crates.io-index"
+-checksum = "87cbf45460356b7deeb5e3415b5563308c0a9b057c85e12b06ad551f98d0a6ac"
++checksum = "6d621efb26863f0e9924c6ac577e8275e5e6b77455db64ffa6c65c904e9e132c"
+ dependencies = [
+  "unicode-segmentation",
+ ]
+ 
+ [[package]]
+ name = "hermit-abi"
+-version = "0.1.18"
++version = "0.1.19"
+ source = "registry+https://github.com/rust-lang/crates.io-index"
+-checksum = "322f4de77956e22ed0e5032c359a0f1273f1f7f0d79bfa3b8ffbc730d7fbcc5c"
++checksum = "62b467343b94ba476dcb2500d242dadbb39557df889310ac77c5d99100aaac33"
+ dependencies = [
+  "libc",
+ ]
+@@ -516,19 +508,20 @@ version = "0.2.4"
+ source = "registry+https://github.com/rust-lang/crates.io-index"
+ checksum = "527e8c9ac747e28542699a951517aa9a6945af506cd1f2e1b53a576c17b6cc11"
+ dependencies = [
+- "bytes 1.0.1",
++ "bytes",
+  "fnv",
+  "itoa",
+ ]
+ 
+ [[package]]
+ name = "http-body"
+-version = "0.3.1"
++version = "0.4.2"
+ source = "registry+https://github.com/rust-lang/crates.io-index"
+-checksum = "13d5ff830006f7646652e057693569bfe0d51760c0085a071769d142a205111b"
++checksum = "60daa14be0e0786db0f03a9e57cb404c9d756eed2b6c62b9ea98ec5743ec75a9"
+ dependencies = [
+- "bytes 0.5.6",
++ "bytes",
+  "http",
++ "pin-project-lite",
+ ]
+ 
+ [[package]]
+@@ -549,9 +542,9 @@ dependencies = [
+ 
+ [[package]]
+ name = "indexmap"
+-version = "1.6.2"
++version = "1.7.0"
+ source = "registry+https://github.com/rust-lang/crates.io-index"
+-checksum = "824845a0bf897a9042383849b02c1bc219c2383772efcd5c6f9766fa4b81aef3"
++checksum = "bc633605454125dec4b66843673f01c7df2b89479b32e0ed634e43a91cff62a5"
+ dependencies = [
+  "autocfg",
+  "hashbrown",
+@@ -559,9 +552,9 @@ dependencies = [
+ 
+ [[package]]
+ name = "itertools"
+-version = "0.8.2"
++version = "0.10.1"
+ source = "registry+https://github.com/rust-lang/crates.io-index"
+-checksum = "f56a2d0bc861f9165be4eb3442afd3c236d8a98afd426f65d92324ae1091a484"
++checksum = "69ddb889f9d0d08a67338271fa9b62996bc788c7796a5c18cf057420aaed5eaf"
+ dependencies = [
+  "either",
+ ]
+@@ -586,9 +579,9 @@ checksum = "830d08ce1d1d941e6b30645f1a0eb5643013d835ce3779a5fc208261dbe10f55"
+ 
+ [[package]]
+ name = "libc"
+-version = "0.2.93"
++version = "0.2.98"
+ source = "registry+https://github.com/rust-lang/crates.io-index"
+-checksum = "9385f66bf6105b241aa65a61cb923ef20efc665cb9f9bb50ac2f0c4b7f378d41"
++checksum = "320cfe77175da3a483efed4bc0adc1968ca050b098ce4f2f1c13a56626128790"
+ 
+ [[package]]
+ name = "libconcentratord"
+@@ -655,9 +648,9 @@ checksum = "3e2e65a1a2e43cfcb47a895c4c8b10d1f4a61097f9f254f183aee60cad9c651d"
+ 
+ [[package]]
+ name = "memchr"
+-version = "2.3.4"
++version = "2.4.0"
+ source = "registry+https://github.com/rust-lang/crates.io-index"
+-checksum = "0ee1c47aaa256ecabcaea351eae4a9b01ef39ed810004e298d2511ed284b1525"
++checksum = "b16bd47d9e329435e309c58469fe0791c2d0d1ba96ec0954152a5ae2b04387dc"
+ 
+ [[package]]
+ name = "metadeps"
+@@ -732,9 +725,9 @@ checksum = "19b17cddbe7ec3f8bc800887bab5e717348c95ea2ca0b1bf0837fb964dc67099"
+ 
+ [[package]]
+ name = "percent-encoding"
+-version = "1.0.1"
++version = "2.1.0"
+ source = "registry+https://github.com/rust-lang/crates.io-index"
+-checksum = "31010dd2e1ac33d5b46a5b413495239882813e0369f8ed8a5e266f173602f831"
++checksum = "d4fd5641d01c8f18a23da7b6fe29298ff4b55afcccdf78973b24cf3175fee32e"
+ 
+ [[package]]
+ name = "pest"
+@@ -791,18 +784,18 @@ dependencies = [
+ 
+ [[package]]
+ name = "pin-project"
+-version = "0.4.28"
++version = "1.0.8"
+ source = "registry+https://github.com/rust-lang/crates.io-index"
+-checksum = "918192b5c59119d51e0cd221f4d49dde9112824ba717369e903c97d076083d0f"
++checksum = "576bc800220cc65dac09e99e97b08b358cfab6e17078de8dc5fee223bd2d0c08"
+ dependencies = [
+  "pin-project-internal",
+ ]
+ 
+ [[package]]
+ name = "pin-project-internal"
+-version = "0.4.28"
++version = "1.0.8"
+ source = "registry+https://github.com/rust-lang/crates.io-index"
+-checksum = "3be26700300be6d9d23264c73211d8190e755b6b5ca7a1b28230025511b52a5e"
++checksum = "6e8fe8163d14ce7f0cdac2e040116f22eac817edabff0be91e8aff7e9accf389"
+ dependencies = [
+  "proc-macro2",
+  "quote",
+@@ -811,15 +804,9 @@ dependencies = [
+ 
+ [[package]]
+ name = "pin-project-lite"
+-version = "0.1.12"
++version = "0.2.7"
+ source = "registry+https://github.com/rust-lang/crates.io-index"
+-checksum = "257b64915a082f7811703966789728173279bdebb956b143dbcd23f6f970a777"
+-
+-[[package]]
+-name = "pin-project-lite"
+-version = "0.2.6"
+-source = "registry+https://github.com/rust-lang/crates.io-index"
+-checksum = "dc0e1f259c92177c30a4c9d177246edd0a3568b25756a977d0632cf8fa37e905"
++checksum = "8d31d11c69a6b52a174b42bdc0c30e5e11670f90788b2c471c31c1d17d449443"
+ 
+ [[package]]
+ name = "pin-utils"
+@@ -841,30 +828,30 @@ checksum = "ac74c624d6b2d21f425f752262f42188365d7b8ff1aff74c82e45136510a4857"
+ 
+ [[package]]
+ name = "proc-macro2"
+-version = "1.0.26"
++version = "1.0.28"
+ source = "registry+https://github.com/rust-lang/crates.io-index"
+-checksum = "a152013215dca273577e18d2bf00fa862b89b24169fb78c4c95aeb07992c9cec"
++checksum = "5c7ed8b8c7b886ea3ed7dde405212185f423ab44682667c8c6dd14aa1d9f6612"
+ dependencies = [
+  "unicode-xid",
+ ]
+ 
+ [[package]]
+ name = "prost"
+-version = "0.6.1"
++version = "0.8.0"
+ source = "registry+https://github.com/rust-lang/crates.io-index"
+-checksum = "ce49aefe0a6144a45de32927c77bd2859a5f7677b55f220ae5b744e87389c212"
++checksum = "de5e2533f59d08fcf364fd374ebda0692a70bd6d7e66ef97f306f45c6c5d8020"
+ dependencies = [
+- "bytes 0.5.6",
++ "bytes",
+  "prost-derive",
+ ]
+ 
+ [[package]]
+ name = "prost-build"
+-version = "0.6.1"
++version = "0.8.0"
+ source = "registry+https://github.com/rust-lang/crates.io-index"
+-checksum = "02b10678c913ecbd69350e8535c3aef91a8676c0773fc1d7b95cdd196d7f2f26"
++checksum = "355f634b43cdd80724ee7848f95770e7e70eefa6dcf14fea676216573b8fd603"
+ dependencies = [
+- "bytes 0.5.6",
++ "bytes",
+  "heck",
+  "itertools",
+  "log",
+@@ -873,14 +860,14 @@ dependencies = [
+  "prost",
+  "prost-types",
+  "tempfile",
+- "which",
++ "which 4.1.0",
+ ]
+ 
+ [[package]]
+ name = "prost-derive"
+-version = "0.6.1"
++version = "0.8.0"
+ source = "registry+https://github.com/rust-lang/crates.io-index"
+-checksum = "537aa19b95acde10a12fec4301466386f757403de4cd4e5b4fa78fb5ecb18f72"
++checksum = "600d2f334aa05acb02a755e217ef1ab6dea4d51b58b7846588b747edec04efba"
+ dependencies = [
+  "anyhow",
+  "itertools",
+@@ -891,19 +878,19 @@ dependencies = [
+ 
+ [[package]]
+ name = "prost-types"
+-version = "0.6.1"
++version = "0.8.0"
+ source = "registry+https://github.com/rust-lang/crates.io-index"
+-checksum = "1834f67c0697c001304b75be76f67add9c89742eda3a085ad8ee0bb38c3417aa"
++checksum = "603bbd6394701d13f3f25aada59c7de9d35a6a5887cfc156181234a44002771b"
+ dependencies = [
+- "bytes 0.5.6",
++ "bytes",
+  "prost",
+ ]
+ 
+ [[package]]
+ name = "quick-error"
+-version = "2.0.0"
++version = "2.0.1"
+ source = "registry+https://github.com/rust-lang/crates.io-index"
+-checksum = "3ac73b1112776fc109b2e61909bc46c7e1bf0d7f690ffb1676553acce16d5cda"
++checksum = "a993555f31e5a609f617c12db6250dedcac1b0a85076912c436e6fc9b2c8e6a3"
+ 
+ [[package]]
+ name = "quote"
+@@ -916,9 +903,9 @@ dependencies = [
+ 
+ [[package]]
+ name = "rand"
+-version = "0.8.3"
++version = "0.8.4"
+ source = "registry+https://github.com/rust-lang/crates.io-index"
+-checksum = "0ef9e7e66b4468674bfcb0c81af8b7fa0bb154fa9f28eb840da5c447baeb8d7e"
++checksum = "2e7573632e6454cf6b99d7aac4ccca54be06da05aca2ef7423d22d27d4d4bcd8"
+ dependencies = [
+  "libc",
+  "rand_chacha",
+@@ -928,9 +915,9 @@ dependencies = [
+ 
+ [[package]]
+ name = "rand_chacha"
+-version = "0.3.0"
++version = "0.3.1"
+ source = "registry+https://github.com/rust-lang/crates.io-index"
+-checksum = "e12735cf05c9e10bf21534da50a147b924d555dc7a547c42e6bb2d5b6017ae0d"
++checksum = "e6c10a63a0fa32252be49d21e7709d4d4baf8d231c2dbce1eaa8141b9b127d88"
+ dependencies = [
+  "ppv-lite86",
+  "rand_core",
+@@ -938,36 +925,36 @@ dependencies = [
+ 
+ [[package]]
+ name = "rand_core"
+-version = "0.6.2"
++version = "0.6.3"
+ source = "registry+https://github.com/rust-lang/crates.io-index"
+-checksum = "34cf66eb183df1c5876e2dcf6b13d57340741e8dc255b48e40a26de954d06ae7"
++checksum = "d34f1408f55294453790c48b2f1ebbb1c5b4b7563eb1f418bcfcfdbb06ebb4e7"
+ dependencies = [
+  "getrandom",
+ ]
+ 
+ [[package]]
+ name = "rand_hc"
+-version = "0.3.0"
++version = "0.3.1"
+ source = "registry+https://github.com/rust-lang/crates.io-index"
+-checksum = "3190ef7066a446f2e7f42e239d161e905420ccab01eb967c9eb27d21b2322a73"
++checksum = "d51e9f596de227fda2ea6c84607f5558e196eeaf43c986b724ba4fb8fdf497e7"
+ dependencies = [
+  "rand_core",
+ ]
+ 
+ [[package]]
+ name = "redox_syscall"
+-version = "0.2.6"
++version = "0.2.9"
+ source = "registry+https://github.com/rust-lang/crates.io-index"
+-checksum = "8270314b5ccceb518e7e578952f0b72b88222d02e8f77f5ecf7abbb673539041"
++checksum = "5ab49abadf3f9e1c4bc499e8845e152ad87d2ad2d30371841171169e9d75feee"
+ dependencies = [
+  "bitflags",
+ ]
+ 
+ [[package]]
+ name = "regex"
+-version = "1.4.5"
++version = "1.5.4"
+ source = "registry+https://github.com/rust-lang/crates.io-index"
+-checksum = "957056ecddbeba1b26965114e191d2e8589ce74db242b6ea25fc4062427a5c19"
++checksum = "d07a8629359eb56f1e2fb1652bb04212c072a87ba68546a04065d525673ac461"
+ dependencies = [
+  "aho-corasick",
+  "memchr",
+@@ -976,9 +963,9 @@ dependencies = [
+ 
+ [[package]]
+ name = "regex-syntax"
+-version = "0.6.23"
++version = "0.6.25"
+ source = "registry+https://github.com/rust-lang/crates.io-index"
+-checksum = "24d5f089152e60f62d28b835fbff2cd2e8dc0baf1ac13343bef92ab7eed84548"
++checksum = "f497285884f3fcff424ffc933e56d7cbca511def0c9831a7f9b5f6153e3cc89b"
+ 
+ [[package]]
+ name = "remove_dir_all"
+@@ -1003,18 +990,18 @@ checksum = "71d301d4193d031abdd79ff7e3dd721168a9572ef3fe51a1517aba235bd8f86e"
+ 
+ [[package]]
+ name = "serde"
+-version = "1.0.125"
++version = "1.0.126"
+ source = "registry+https://github.com/rust-lang/crates.io-index"
+-checksum = "558dc50e1a5a5fa7112ca2ce4effcb321b0300c0d4ccf0776a9f60cd89031171"
++checksum = "ec7505abeacaec74ae4778d9d9328fe5a5d04253220a85c4ee022239fc996d03"
+ dependencies = [
+  "serde_derive",
+ ]
+ 
+ [[package]]
+ name = "serde_derive"
+-version = "1.0.125"
++version = "1.0.126"
+ source = "registry+https://github.com/rust-lang/crates.io-index"
+-checksum = "b093b7a2bb58203b5da3056c05b4ec1fed827dcfdb37347a8841695263b3d06d"
++checksum = "963a7dbc9895aeac7ac90e74f34a5d5261828f79df35cbed41e10189d3804d43"
+ dependencies = [
+  "proc-macro2",
+  "quote",
+@@ -1052,9 +1039,9 @@ checksum = "42a568c8f2cd051a4d283bd6eb0343ac214c1b0f1ac19f93e1175b2dee38c73d"
+ 
+ [[package]]
+ name = "signal-hook"
+-version = "0.3.8"
++version = "0.3.9"
+ source = "registry+https://github.com/rust-lang/crates.io-index"
+-checksum = "ef33d6d0cd06e0840fba9985aab098c147e67e05cee14d412d3345ed14ff30ac"
++checksum = "470c5a6397076fae0094aaf06a08e6ba6f37acb77d3b1b91ea92b4d6c8650c39"
+ dependencies = [
+  "libc",
+  "signal-hook-registry",
+@@ -1062,9 +1049,9 @@ dependencies = [
+ 
+ [[package]]
+ name = "signal-hook-registry"
+-version = "1.3.0"
++version = "1.4.0"
+ source = "registry+https://github.com/rust-lang/crates.io-index"
+-checksum = "16f1d0fef1604ba8f7a073c7e701f213e056707210e9020af4528e0101ce11a6"
++checksum = "e51e73328dc4ac0c7ccbda3a494dfa03df1de2f46018127f60c693f2648455b0"
+ dependencies = [
+  "libc",
+ ]
+@@ -1090,9 +1077,9 @@ checksum = "8ea5119cdb4c55b55d432abb513a0429384878c15dde60cc77b1c99de1a95a6a"
+ 
+ [[package]]
+ name = "syn"
+-version = "1.0.69"
++version = "1.0.74"
+ source = "registry+https://github.com/rust-lang/crates.io-index"
+-checksum = "48fe99c6bd8b1cc636890bcc071842de909d902c81ac7dab53ba33c421ab8ffb"
++checksum = "1873d832550d4588c3dbc20f01361ab00bfe741048f71e3fecf145a7cc18b29c"
+ dependencies = [
+  "proc-macro2",
+  "quote",
+@@ -1155,25 +1142,36 @@ dependencies = [
+ 
+ [[package]]
+ name = "tokio"
+-version = "0.2.25"
++version = "1.9.0"
++source = "registry+https://github.com/rust-lang/crates.io-index"
++checksum = "4b7b349f11a7047e6d1276853e612d152f5e8a352c61917887cc2169e2366b4c"
++dependencies = [
++ "autocfg",
++ "pin-project-lite",
++]
++
++[[package]]
++name = "tokio-stream"
++version = "0.1.7"
+ source = "registry+https://github.com/rust-lang/crates.io-index"
+-checksum = "6703a273949a90131b290be1fe7b039d0fc884aa1935860dfcbe056f28cd8092"
++checksum = "7b2f3f698253f03119ac0102beaa64f67a67e08074d03a22d18784104543727f"
+ dependencies = [
+- "bytes 0.5.6",
+- "pin-project-lite 0.1.12",
++ "futures-core",
++ "pin-project-lite",
++ "tokio",
+ ]
+ 
+ [[package]]
+ name = "tokio-util"
+-version = "0.2.0"
++version = "0.6.7"
+ source = "registry+https://github.com/rust-lang/crates.io-index"
+-checksum = "571da51182ec208780505a32528fc5512a8fe1443ab960b3f2f3ef093cd16930"
++checksum = "1caa0b0c8d94a049db56b5acf8cba99dc0623aab1b26d5b5f5e2d945846b3592"
+ dependencies = [
+- "bytes 0.5.6",
++ "bytes",
+  "futures-core",
+  "futures-sink",
+  "log",
+- "pin-project-lite 0.1.12",
++ "pin-project-lite",
+  "tokio",
+ ]
+ 
+@@ -1194,14 +1192,14 @@ dependencies = [
+ 
+ [[package]]
+ name = "tonic"
+-version = "0.1.1"
++version = "0.5.0"
+ source = "registry+https://github.com/rust-lang/crates.io-index"
+-checksum = "08283643b1d483eb7f3fc77069e63b5cba3e4db93514b3d45470e67f123e4e48"
++checksum = "b584f064fdfc50017ec39162d5aebce49912f1eb16fd128e04b7f4ce4907c7e5"
+ dependencies = [
+  "async-stream",
+  "async-trait",
+  "base64",
+- "bytes 0.5.6",
++ "bytes",
+  "futures-core",
+  "futures-util",
+  "http",
+@@ -1210,17 +1208,18 @@ dependencies = [
+  "pin-project",
+  "prost",
+  "prost-derive",
++ "tokio-stream",
+  "tokio-util",
+- "tower-make",
++ "tower-layer",
+  "tower-service",
+  "tracing",
+ ]
+ 
+ [[package]]
+ name = "tonic-build"
+-version = "0.1.1"
++version = "0.5.1"
+ source = "registry+https://github.com/rust-lang/crates.io-index"
+-checksum = "0436413ba71545bcc6c2b9a0f9d78d72deb0123c6a75ccdfe7c056f9930f5e52"
++checksum = "d12faebbe071b06f486be82cc9318350814fdd07fcb28f3690840cd770599283"
+ dependencies = [
+  "proc-macro2",
+  "prost-build",
+@@ -1229,14 +1228,10 @@ dependencies = [
+ ]
+ 
+ [[package]]
+-name = "tower-make"
+-version = "0.3.0"
++name = "tower-layer"
++version = "0.3.1"
+ source = "registry+https://github.com/rust-lang/crates.io-index"
+-checksum = "ce50370d644a0364bf4877ffd4f76404156a248d104e2cc234cd391ea5cdc965"
+-dependencies = [
+- "tokio",
+- "tower-service",
+-]
++checksum = "343bc9466d3fe6b0f960ef45960509f84480bf4fd96f92901afe7ff3df9d3a62"
+ 
+ [[package]]
+ name = "tower-service"
+@@ -1246,12 +1241,12 @@ checksum = "360dfd1d6d30e05fda32ace2c8c70e9c0a9da713275777f5a4dbb8a1893930c6"
+ 
+ [[package]]
+ name = "tracing"
+-version = "0.1.25"
++version = "0.1.26"
+ source = "registry+https://github.com/rust-lang/crates.io-index"
+-checksum = "01ebdc2bb4498ab1ab5f5b73c5803825e60199229ccba0698170e3be0e7f959f"
++checksum = "09adeb8c97449311ccd28a427f96fb563e7fd31aabf994189879d9da2394b89d"
+ dependencies = [
+  "cfg-if 1.0.0",
+- "pin-project-lite 0.2.6",
++ "pin-project-lite",
+  "tracing-attributes",
+  "tracing-core",
+ ]
+@@ -1269,9 +1264,9 @@ dependencies = [
+ 
+ [[package]]
+ name = "tracing-core"
+-version = "0.1.17"
++version = "0.1.18"
+ source = "registry+https://github.com/rust-lang/crates.io-index"
+-checksum = "f50de3927f93d202783f4513cda820ab47ef17f624b03c096e86ef00c67e6b5f"
++checksum = "a9ff14f98b1a4b289c6248a023c1c2fa1491062964e9fed67ab29c4e4da4a052"
+ dependencies = [
+  "lazy_static",
+ ]
+@@ -1290,9 +1285,9 @@ checksum = "56dee185309b50d1f11bfedef0fe6d036842e3fb77413abef29f8f8d1c5d4c1c"
+ 
+ [[package]]
+ name = "unicode-segmentation"
+-version = "1.7.1"
++version = "1.8.0"
+ source = "registry+https://github.com/rust-lang/crates.io-index"
+-checksum = "bb0d2e7be6ae3a5fa87eed5fb451aff96f2573d2694942e40543ae0bbe19c796"
++checksum = "8895849a949e7845e06bd6dc1aa51731a103c42707010a5b591c0038fb73385b"
+ 
+ [[package]]
+ name = "unicode-width"
+@@ -1302,9 +1297,9 @@ checksum = "9337591893a19b88d8d87f2cec1e73fad5cdfd10e5a6f349f498ad6ea2ffb1e3"
+ 
+ [[package]]
+ name = "unicode-xid"
+-version = "0.2.1"
++version = "0.2.2"
+ source = "registry+https://github.com/rust-lang/crates.io-index"
+-checksum = "f7fe0bb3479651439c9112f72b6c505038574c9fbb575ed1bf3b797fa39dd564"
++checksum = "8ccb82d61f80a663efe1f787a51b16b5a51e3314d6ac365b08639f52387b33f3"
+ 
+ [[package]]
+ name = "uuid"
+@@ -1348,6 +1343,16 @@ dependencies = [
+  "libc",
+ ]
+ 
++[[package]]
++name = "which"
++version = "4.1.0"
++source = "registry+https://github.com/rust-lang/crates.io-index"
++checksum = "b55551e42cbdf2ce2bedd2203d0cc08dba002c27510f86dab6d0ce304cba3dfe"
++dependencies = [
++ "either",
++ "libc",
++]
++
+ [[package]]
+ name = "winapi"
+ version = "0.3.9"
+diff --git a/chirpstack-concentratord-2g4/Cargo.toml b/chirpstack-concentratord-2g4/Cargo.toml
+index 7d1a44e..7c45e8e 100644
+--- a/chirpstack-concentratord-2g4/Cargo.toml
++++ b/chirpstack-concentratord-2g4/Cargo.toml
+@@ -8,7 +8,7 @@ publish = false
+ [dependencies]
+ libloragw-2g4 = {path = "../libloragw-2g4"}
+ libconcentratord = {path = "../libconcentratord"}
+-chirpstack_api = { version = "3.9", default-features = false }
++chirpstack_api = { version = "3.10", default-features = false }
+ serde = { version = "1.0", features = ["derive"] }
+ toml = "0.5"
+ clap = "2.33"
+@@ -21,10 +21,10 @@ uuid = { version = "0.8", features = ["v4"] }
+ chrono = "0.4"
+ humantime-serde = "1.0"
+ syslog = "5.0"
+-prost = "0.6.1"
+-prost-types = "0.6.1"
++prost = "0.8"
++prost-types = "0.8"
+ signal-hook = "0.3"
+-handlebars = "3.5"
++handlebars = "4.1"
+ 
+ [features]
+ default = ['zmq/vendored']
+diff --git a/chirpstack-concentratord-sx1301/Cargo.toml b/chirpstack-concentratord-sx1301/Cargo.toml
+index 88cff41..aabc3fe 100644
+--- a/chirpstack-concentratord-sx1301/Cargo.toml
++++ b/chirpstack-concentratord-sx1301/Cargo.toml
+@@ -8,7 +8,7 @@ publish = false
+ [dependencies]
+ libloragw-sx1301 = {path = "../libloragw-sx1301"}
+ libconcentratord = {path = "../libconcentratord"}
+-chirpstack_api = { version = "3.9", default-features = false }
++chirpstack_api = { version = "3.10", default-features = false }
+ serde = { version = "1.0", features = ["derive"] }
+ toml = "0.5"
+ clap = "2.33"
+@@ -21,10 +21,10 @@ uuid = { version = "0.8", features = ["v4"] }
+ chrono = "0.4"
+ humantime-serde = "1.0"
+ syslog = "5.0"
+-prost = "0.6.1"
+-prost-types = "0.6.1"
++prost = "0.8"
++prost-types = "0.8"
+ signal-hook = "0.3"
+-handlebars = "3.5"
++handlebars = "4.1"
+ 
+ [features]
+ default = ['zmq/vendored']
+diff --git a/chirpstack-concentratord-sx1301/src/wrapper/mod.rs b/chirpstack-concentratord-sx1301/src/wrapper/mod.rs
+index 3db4911..6ebf2d6 100644
+--- a/chirpstack-concentratord-sx1301/src/wrapper/mod.rs
++++ b/chirpstack-concentratord-sx1301/src/wrapper/mod.rs
+@@ -199,6 +199,9 @@ pub fn downlink_from_proto(
+         modulation: match tx_info.modulation() {
+             chirpstack_api::common::Modulation::Lora => hal::Modulation::LoRa,
+             chirpstack_api::common::Modulation::Fsk => hal::Modulation::FSK,
++            chirpstack_api::common::Modulation::LrFhss => {
++                return Err("lr-fhss modulation is not supported".to_string());
++            }
+         },
+         rf_chain: 0,
+         rf_power: tx_info.power as i8,
+diff --git a/chirpstack-concentratord-sx1302/Cargo.toml b/chirpstack-concentratord-sx1302/Cargo.toml
+index f8a89c0..9e9d9de 100644
+--- a/chirpstack-concentratord-sx1302/Cargo.toml
++++ b/chirpstack-concentratord-sx1302/Cargo.toml
+@@ -8,7 +8,7 @@ publish = false
+ [dependencies]
+ libloragw-sx1302 = {path = "../libloragw-sx1302"}
+ libconcentratord = {path = "../libconcentratord"}
+-chirpstack_api = { version = "3.9", default-features = false }
++chirpstack_api = { version = "3.10", default-features = false }
+ serde = { version = "1.0", features = ["derive"] }
+ toml = "0.5"
+ clap = "2.33"
+@@ -21,10 +21,10 @@ uuid = { version = "0.8", features = ["v4"] }
+ chrono = "0.4"
+ humantime-serde = "1.0"
+ syslog = "5.0"
+-prost = "0.6.1"
+-prost-types = "0.6.1"
++prost = "0.8"
++prost-types = "0.8"
+ signal-hook = "0.3"
+-handlebars = "3.5"
++handlebars = "4.1"
+ 
+ [features]
+ default = ['zmq/vendored']
+diff --git a/chirpstack-concentratord-sx1302/src/wrapper/mod.rs b/chirpstack-concentratord-sx1302/src/wrapper/mod.rs
+index 8348aab..126d47b 100644
+--- a/chirpstack-concentratord-sx1302/src/wrapper/mod.rs
++++ b/chirpstack-concentratord-sx1302/src/wrapper/mod.rs
+@@ -199,6 +199,9 @@ pub fn downlink_from_proto(
+         modulation: match tx_info.modulation() {
+             chirpstack_api::common::Modulation::Lora => hal::Modulation::LoRa,
+             chirpstack_api::common::Modulation::Fsk => hal::Modulation::FSK,
++            chirpstack_api::common::Modulation::LrFhss => {
++                return Err("lr-fhss modulation is not supported".to_string());
++            }
+         },
+         rf_chain: 0,
+         rf_power: tx_info.power as i8,
+diff --git a/libconcentratord/Cargo.toml b/libconcentratord/Cargo.toml
+index 7db8c5f..33858fb 100644
+--- a/libconcentratord/Cargo.toml
++++ b/libconcentratord/Cargo.toml
+@@ -11,9 +11,9 @@ zmq = "0.9"
+ lazy_static = "1.4"
+ chirpstack_api = { version = "3.9", default-features = false }
+ uuid = { version = "0.8", features = ["v4"] }
+-prost = "0.6"
+-prost-types = "0.6"
+-gpio-cdev = "0.3"
++prost = "0.8"
++prost-types = "0.8"
++gpio-cdev = "0.4"
+ 
+ [features]
+ default = ['zmq/vendored']
+-- 
+2.25.1
+
diff --git a/0009-Implement-various-gateway-stats-aggregations.patch b/0009-Implement-various-gateway-stats-aggregations.patch
new file mode 100644
index 0000000..0c1a953
--- /dev/null
+++ b/0009-Implement-various-gateway-stats-aggregations.patch
@@ -0,0 +1,652 @@
+From c350f0e46e4537bb76f2db0a913ff5f4e954ed99 Mon Sep 17 00:00:00 2001
+From: Orne Brocaar <info@brocaar.com>
+Date: Tue, 31 Aug 2021 13:13:48 +0100
+Subject: [PATCH 09/10] Implement various gateway stats aggregations.
+
+* Uplinks / downlinks per frequency.
+* Uplinks / downlinks per modulation parameters.
+* Downlinks per ACK status.
+---
+ Cargo.lock                                    |   4 +-
+ .../src/handler/command.rs                    |   9 +-
+ .../src/handler/jit.rs                        |   4 +-
+ .../src/handler/uplink.rs                     |  12 +-
+ chirpstack-concentratord-2g4/src/wrapper.rs   |  35 +++++
+ .../src/handler/command.rs                    |   9 +-
+ .../src/handler/jit.rs                        |   4 +-
+ .../src/handler/uplink.rs                     |  12 +-
+ .../src/wrapper/mod.rs                        |  54 ++++++++
+ .../src/handler/command.rs                    |   9 +-
+ .../src/handler/jit.rs                        |   4 +-
+ .../src/handler/uplink.rs                     |  12 +-
+ .../src/wrapper/mod.rs                        |  56 ++++++++
+ libconcentratord/Cargo.toml                   |   2 +-
+ libconcentratord/src/stats.rs                 | 125 ++++++++++++++++--
+ libloragw-2g4/src/hal.rs                      |   2 +-
+ libloragw-sx1301/src/hal.rs                   |   2 +-
+ libloragw-sx1302/src/hal.rs                   |   2 +-
+ 18 files changed, 322 insertions(+), 35 deletions(-)
+
+diff --git a/Cargo.lock b/Cargo.lock
+index 169d827..60d6c6f 100644
+--- a/Cargo.lock
++++ b/Cargo.lock
+@@ -251,9 +251,9 @@ dependencies = [
+ 
+ [[package]]
+ name = "chirpstack_api"
+-version = "3.10.2"
++version = "3.11.1"
+ source = "registry+https://github.com/rust-lang/crates.io-index"
+-checksum = "a512de50d789d961f60070c77f12fb599c5f4f3656a857d4416d4f20a30cd94f"
++checksum = "08809efa6523e3498d6e16222230aaf152a0fe75a3a3f42a5fbd3ed14f4d6f1e"
+ dependencies = [
+  "prost",
+  "prost-types",
+diff --git a/chirpstack-concentratord-2g4/src/handler/command.rs b/chirpstack-concentratord-2g4/src/handler/command.rs
+index 7b2781a..d44522a 100644
+--- a/chirpstack-concentratord-2g4/src/handler/command.rs
++++ b/chirpstack-concentratord-2g4/src/handler/command.rs
+@@ -91,6 +91,7 @@ fn handle_downlink(
+         items: vec![Default::default(); pl.items.len()],
+         ..Default::default()
+     };
++    let mut stats_tx_status = chirpstack_api::gw::TxAckStatus::Ignored;
+ 
+     for (i, item) in pl.items.iter().enumerate() {
+         // convert protobuf to hal struct
+@@ -122,14 +123,20 @@ fn handle_downlink(
+         ) {
+             Ok(_) => {
+                 tx_ack.items[i].set_status(chirpstack_api::gw::TxAckStatus::Ok);
++                stats_tx_status = chirpstack_api::gw::TxAckStatus::Ok;
+ 
+                 // break out of for loop
+                 break;
+             }
+-            Err(status) => tx_ack.items[i].set_status(status),
++            Err(status) => {
++                tx_ack.items[i].set_status(status);
++                stats_tx_status = status;
++            }
+         };
+     }
+ 
++    stats::inc_tx_status_count(stats_tx_status);
++
+     let mut buf = Vec::new();
+     tx_ack.encode(&mut buf).unwrap();
+     return Ok(buf);
+diff --git a/chirpstack-concentratord-2g4/src/handler/jit.rs b/chirpstack-concentratord-2g4/src/handler/jit.rs
+index 51193ad..3bd5b88 100644
+--- a/chirpstack-concentratord-2g4/src/handler/jit.rs
++++ b/chirpstack-concentratord-2g4/src/handler/jit.rs
+@@ -47,7 +47,9 @@ pub fn jit_loop(
+                     tx_packet.datarate
+                     );
+ 
+-                stats::inc_tx_packets_emitted();
++                if let Ok(tx_info) = wrapper::downlink_to_tx_info_proto(&tx_packet) {
++                    stats::inc_tx_counts(&tx_info);
++                }
+             }
+             Err(err) => {
+                 error!("Schedule packet for tx error, error: {}", err);
+diff --git a/chirpstack-concentratord-2g4/src/handler/uplink.rs b/chirpstack-concentratord-2g4/src/handler/uplink.rs
+index 3178d2d..02f29c8 100644
+--- a/chirpstack-concentratord-2g4/src/handler/uplink.rs
++++ b/chirpstack-concentratord-2g4/src/handler/uplink.rs
+@@ -24,6 +24,12 @@ pub fn handle_loop(gateway_id: &[u8], stop_receive: Receiver<Signal>) {
+         match hal::receive() {
+             Ok(frames) => {
+                 for frame in frames {
++                    stats::inc_rx_packets_received();
++                    if frame.status != hal::CRC::CRCOk {
++                        debug!("Frame received with invalid CRC");
++                        continue;
++                    }
++
+                     let proto = match wrapper::uplink_to_proto(gateway_id.clone(), &frame) {
+                         Ok(v) => v,
+                         Err(err) => {
+@@ -45,11 +51,7 @@ pub fn handle_loop(gateway_id: &[u8], stop_receive: Receiver<Signal>) {
+                         frame.datarate,
+                     );
+ 
+-                    stats::inc_rx_packets_received();
+-                    if rx_info.crc_status() == chirpstack_api::gw::CrcStatus::CrcOk {
+-                        stats::inc_rx_packets_received_ok();
+-                    }
+-
++                    stats::inc_rx_counts(&proto);
+                     events::send_uplink(&proto).unwrap();
+                 }
+             }
+diff --git a/chirpstack-concentratord-2g4/src/wrapper.rs b/chirpstack-concentratord-2g4/src/wrapper.rs
+index 990b320..507e61a 100644
+--- a/chirpstack-concentratord-2g4/src/wrapper.rs
++++ b/chirpstack-concentratord-2g4/src/wrapper.rs
+@@ -223,3 +223,38 @@ pub fn downlink_from_proto(
+ 
+     return Ok(packet);
+ }
++
++pub fn downlink_to_tx_info_proto(
++    packet: &hal::TxPacket,
++) -> Result<chirpstack_api::gw::DownlinkTxInfo, String> {
++    let mut tx_info: chirpstack_api::gw::DownlinkTxInfo = Default::default();
++    tx_info.frequency = packet.freq_hz;
++
++    let mut mod_info: chirpstack_api::gw::LoRaModulationInfo = Default::default();
++    mod_info.bandwidth = packet.bandwidth;
++    mod_info.spreading_factor = match packet.datarate {
++        hal::DataRate::SF5 => 5,
++        hal::DataRate::SF6 => 6,
++        hal::DataRate::SF7 => 7,
++        hal::DataRate::SF8 => 8,
++        hal::DataRate::SF9 => 9,
++        hal::DataRate::SF10 => 10,
++        hal::DataRate::SF11 => 11,
++        hal::DataRate::SF12 => 12,
++    };
++    mod_info.code_rate = match packet.coderate {
++        hal::CodeRate::LoRa4_5 => "4/5".to_string(),
++        hal::CodeRate::LoRa4_6 => "4/6".to_string(),
++        hal::CodeRate::LoRa4_7 => "4/7".to_string(),
++        hal::CodeRate::LoRa4_8 => "4/8".to_string(),
++        hal::CodeRate::LoRaLi4_5 => "4/5LI".to_string(),
++        hal::CodeRate::LoRaLi4_6 => "4/6LI".to_string(),
++        hal::CodeRate::LoRaLi4_8 => "4/8LI".to_string(),
++    };
++
++    tx_info.set_modulation(chirpstack_api::common::Modulation::Lora);
++    tx_info.modulation_info =
++        Some(chirpstack_api::gw::downlink_tx_info::ModulationInfo::LoraModulationInfo(mod_info));
++
++    Ok(tx_info)
++}
+diff --git a/chirpstack-concentratord-sx1301/src/handler/command.rs b/chirpstack-concentratord-sx1301/src/handler/command.rs
+index 6f92446..564174e 100644
+--- a/chirpstack-concentratord-sx1301/src/handler/command.rs
++++ b/chirpstack-concentratord-sx1301/src/handler/command.rs
+@@ -89,6 +89,7 @@ fn handle_downlink(
+         items: vec![Default::default(); pl.items.len()],
+         ..Default::default()
+     };
++    let mut stats_tx_status = chirpstack_api::gw::TxAckStatus::Ignored;
+ 
+     for (i, item) in pl.items.iter().enumerate() {
+         // convert protobuf to hal struct
+@@ -120,14 +121,20 @@ fn handle_downlink(
+         ) {
+             Ok(_) => {
+                 tx_ack.items[i].set_status(chirpstack_api::gw::TxAckStatus::Ok);
++                stats_tx_status = chirpstack_api::gw::TxAckStatus::Ok;
+ 
+                 // break out of for loop
+                 break;
+             }
+-            Err(status) => tx_ack.items[i].set_status(status),
++            Err(status) => {
++                tx_ack.items[i].set_status(status);
++                stats_tx_status = status;
++            }
+         };
+     }
+ 
++    stats::inc_tx_status_count(stats_tx_status);
++
+     let mut buf = Vec::new();
+     tx_ack.encode(&mut buf).unwrap();
+     return Ok(buf);
+diff --git a/chirpstack-concentratord-sx1301/src/handler/jit.rs b/chirpstack-concentratord-sx1301/src/handler/jit.rs
+index 163e94d..aea4391 100644
+--- a/chirpstack-concentratord-sx1301/src/handler/jit.rs
++++ b/chirpstack-concentratord-sx1301/src/handler/jit.rs
+@@ -49,7 +49,9 @@ pub fn jit_loop(
+                     tx_packet.datarate
+                 );
+ 
+-                stats::inc_tx_packets_emitted();
++                if let Ok(tx_info) = wrapper::downlink_to_tx_info_proto(&tx_packet) {
++                    stats::inc_tx_counts(&tx_info);
++                }
+             }
+             Err(err) => {
+                 error!("Schedule packet for tx error, error: {}", err);
+diff --git a/chirpstack-concentratord-sx1301/src/handler/uplink.rs b/chirpstack-concentratord-sx1301/src/handler/uplink.rs
+index 69871b4..8aa6b7f 100644
+--- a/chirpstack-concentratord-sx1301/src/handler/uplink.rs
++++ b/chirpstack-concentratord-sx1301/src/handler/uplink.rs
+@@ -24,6 +24,12 @@ pub fn handle_loop(gateway_id: &[u8], stop_receive: Receiver<Signal>) {
+         match hal::receive() {
+             Ok(frames) => {
+                 for frame in frames {
++                    stats::inc_rx_packets_received();
++                    if frame.status != hal::CRC::CRCOk {
++                        debug!("Frame received with invalid CRC");
++                        continue;
++                    }
++
+                     let proto = match wrapper::uplink_to_proto(gateway_id.clone(), &frame) {
+                         Ok(v) => v,
+                         Err(err) => {
+@@ -45,11 +51,7 @@ pub fn handle_loop(gateway_id: &[u8], stop_receive: Receiver<Signal>) {
+                         frame.datarate,
+                     );
+ 
+-                    stats::inc_rx_packets_received();
+-                    if rx_info.crc_status() == chirpstack_api::gw::CrcStatus::CrcOk {
+-                        stats::inc_rx_packets_received_ok();
+-                    }
+-
++                    stats::inc_rx_counts(&proto);
+                     events::send_uplink(&proto).unwrap();
+                 }
+             }
+diff --git a/chirpstack-concentratord-sx1301/src/wrapper/mod.rs b/chirpstack-concentratord-sx1301/src/wrapper/mod.rs
+index 6ebf2d6..15f7d12 100644
+--- a/chirpstack-concentratord-sx1301/src/wrapper/mod.rs
++++ b/chirpstack-concentratord-sx1301/src/wrapper/mod.rs
+@@ -287,3 +287,57 @@ pub fn downlink_from_proto(
+ 
+     return Ok(packet);
+ }
++
++pub fn downlink_to_tx_info_proto(
++    packet: &hal::TxPacket,
++) -> Result<chirpstack_api::gw::DownlinkTxInfo, String> {
++    let mut tx_info: chirpstack_api::gw::DownlinkTxInfo = Default::default();
++    tx_info.frequency = packet.freq_hz;
++
++    match packet.modulation {
++        hal::Modulation::LoRa => {
++            let mut mod_info: chirpstack_api::gw::LoRaModulationInfo = Default::default();
++            mod_info.bandwidth = packet.bandwidth;
++            mod_info.spreading_factor = match packet.datarate {
++                hal::DataRate::SF7 => 7,
++                hal::DataRate::SF8 => 8,
++                hal::DataRate::SF9 => 9,
++                hal::DataRate::SF10 => 10,
++                hal::DataRate::SF11 => 11,
++                hal::DataRate::SF12 => 12,
++                _ => {
++                    return Err("unexpected spreading-factor".to_string());
++                }
++            };
++            mod_info.code_rate = match packet.coderate {
++                hal::CodeRate::LoRa4_5 => "4/5".to_string(),
++                hal::CodeRate::LoRa4_6 => "4/6".to_string(),
++                hal::CodeRate::LoRa4_7 => "4/7".to_string(),
++                hal::CodeRate::LoRa4_8 => "4/8".to_string(),
++                hal::CodeRate::Undefined => "".to_string(),
++            };
++
++            tx_info.set_modulation(chirpstack_api::common::Modulation::Lora);
++            tx_info.modulation_info = Some(
++                chirpstack_api::gw::downlink_tx_info::ModulationInfo::LoraModulationInfo(mod_info),
++            );
++        }
++        hal::Modulation::FSK => {
++            let mut mod_info: chirpstack_api::gw::FskModulationInfo = Default::default();
++            mod_info.datarate = match packet.datarate {
++                hal::DataRate::FSK(v) => v * 1000,
++                _ => return Err("unexpected datarate".to_string()),
++            };
++
++            tx_info.set_modulation(chirpstack_api::common::Modulation::Fsk);
++            tx_info.modulation_info = Some(
++                chirpstack_api::gw::downlink_tx_info::ModulationInfo::FskModulationInfo(mod_info),
++            );
++        }
++        hal::Modulation::Undefined => {
++            return Err("undefined modulation".to_string());
++        }
++    }
++
++    Ok(tx_info)
++}
+diff --git a/chirpstack-concentratord-sx1302/src/handler/command.rs b/chirpstack-concentratord-sx1302/src/handler/command.rs
+index be87e1e..8e46d20 100644
+--- a/chirpstack-concentratord-sx1302/src/handler/command.rs
++++ b/chirpstack-concentratord-sx1302/src/handler/command.rs
+@@ -89,6 +89,7 @@ fn handle_downlink(
+         items: vec![Default::default(); pl.items.len()],
+         ..Default::default()
+     };
++    let mut stats_tx_status = chirpstack_api::gw::TxAckStatus::Ignored;
+ 
+     for (i, item) in pl.items.iter().enumerate() {
+         // convert protobuf to hal struct
+@@ -129,14 +130,20 @@ fn handle_downlink(
+         ) {
+             Ok(_) => {
+                 tx_ack.items[i].set_status(chirpstack_api::gw::TxAckStatus::Ok);
++                stats_tx_status = chirpstack_api::gw::TxAckStatus::Ok;
+ 
+                 // break out of loop
+                 break;
+             }
+-            Err(status) => tx_ack.items[i].set_status(status),
++            Err(status) => {
++                tx_ack.items[i].set_status(status);
++                stats_tx_status = status;
++            }
+         };
+     }
+ 
++    stats::inc_tx_status_count(stats_tx_status);
++
+     let mut buf = Vec::new();
+     tx_ack.encode(&mut buf).unwrap();
+     return Ok(buf);
+diff --git a/chirpstack-concentratord-sx1302/src/handler/jit.rs b/chirpstack-concentratord-sx1302/src/handler/jit.rs
+index 8c98e30..144957e 100644
+--- a/chirpstack-concentratord-sx1302/src/handler/jit.rs
++++ b/chirpstack-concentratord-sx1302/src/handler/jit.rs
+@@ -48,7 +48,9 @@ pub fn jit_loop(
+                     tx_packet.datarate
+                 );
+ 
+-                stats::inc_tx_packets_emitted();
++                if let Ok(tx_info) = wrapper::downlink_to_tx_info_proto(&tx_packet) {
++                    stats::inc_tx_counts(&tx_info);
++                }
+             }
+             Err(err) => {
+                 error!("Schedule packet for tx error, error: {}", err);
+diff --git a/chirpstack-concentratord-sx1302/src/handler/uplink.rs b/chirpstack-concentratord-sx1302/src/handler/uplink.rs
+index 8bd758a..4b003e2 100644
+--- a/chirpstack-concentratord-sx1302/src/handler/uplink.rs
++++ b/chirpstack-concentratord-sx1302/src/handler/uplink.rs
+@@ -24,6 +24,12 @@ pub fn handle_loop(gateway_id: &[u8], stop_receive: Receiver<Signal>) {
+         match hal::receive() {
+             Ok(frames) => {
+                 for frame in frames {
++                    stats::inc_rx_packets_received();
++                    if frame.status != hal::CRC::CRCOk {
++                        debug!("Frame received with invalid CRC");
++                        continue;
++                    }
++
+                     let proto = match wrapper::uplink_to_proto(gateway_id.clone(), &frame) {
+                         Ok(v) => v,
+                         Err(err) => {
+@@ -45,11 +51,7 @@ pub fn handle_loop(gateway_id: &[u8], stop_receive: Receiver<Signal>) {
+                         frame.datarate,
+                     );
+ 
+-                    stats::inc_rx_packets_received();
+-                    if rx_info.crc_status() == chirpstack_api::gw::CrcStatus::CrcOk {
+-                        stats::inc_rx_packets_received_ok();
+-                    }
+-
++                    stats::inc_rx_counts(&proto);
+                     events::send_uplink(&proto).unwrap();
+                 }
+             }
+diff --git a/chirpstack-concentratord-sx1302/src/wrapper/mod.rs b/chirpstack-concentratord-sx1302/src/wrapper/mod.rs
+index 126d47b..2b935bd 100644
+--- a/chirpstack-concentratord-sx1302/src/wrapper/mod.rs
++++ b/chirpstack-concentratord-sx1302/src/wrapper/mod.rs
+@@ -290,3 +290,59 @@ pub fn downlink_from_proto(
+ 
+     return Ok(packet);
+ }
++
++pub fn downlink_to_tx_info_proto(
++    packet: &hal::TxPacket,
++) -> Result<chirpstack_api::gw::DownlinkTxInfo, String> {
++    let mut tx_info: chirpstack_api::gw::DownlinkTxInfo = Default::default();
++    tx_info.frequency = packet.freq_hz;
++
++    match packet.modulation {
++        hal::Modulation::LoRa => {
++            let mut mod_info: chirpstack_api::gw::LoRaModulationInfo = Default::default();
++            mod_info.bandwidth = packet.bandwidth;
++            mod_info.spreading_factor = match packet.datarate {
++                hal::DataRate::SF5 => 5,
++                hal::DataRate::SF6 => 6,
++                hal::DataRate::SF7 => 7,
++                hal::DataRate::SF8 => 8,
++                hal::DataRate::SF9 => 9,
++                hal::DataRate::SF10 => 10,
++                hal::DataRate::SF11 => 11,
++                hal::DataRate::SF12 => 12,
++                _ => {
++                    return Err("unexpected spreading-factor".to_string());
++                }
++            };
++            mod_info.code_rate = match packet.coderate {
++                hal::CodeRate::LoRa4_5 => "4/5".to_string(),
++                hal::CodeRate::LoRa4_6 => "4/6".to_string(),
++                hal::CodeRate::LoRa4_7 => "4/7".to_string(),
++                hal::CodeRate::LoRa4_8 => "4/8".to_string(),
++                hal::CodeRate::Undefined => "".to_string(),
++            };
++
++            tx_info.set_modulation(chirpstack_api::common::Modulation::Lora);
++            tx_info.modulation_info = Some(
++                chirpstack_api::gw::downlink_tx_info::ModulationInfo::LoraModulationInfo(mod_info),
++            );
++        }
++        hal::Modulation::FSK => {
++            let mut mod_info: chirpstack_api::gw::FskModulationInfo = Default::default();
++            mod_info.datarate = match packet.datarate {
++                hal::DataRate::FSK(v) => v * 1000,
++                _ => return Err("unexpected datarate".to_string()),
++            };
++
++            tx_info.set_modulation(chirpstack_api::common::Modulation::Fsk);
++            tx_info.modulation_info = Some(
++                chirpstack_api::gw::downlink_tx_info::ModulationInfo::FskModulationInfo(mod_info),
++            );
++        }
++        hal::Modulation::Undefined => {
++            return Err("undefined modulation".to_string());
++        }
++    }
++
++    Ok(tx_info)
++}
+diff --git a/libconcentratord/Cargo.toml b/libconcentratord/Cargo.toml
+index 33858fb..6741b90 100644
+--- a/libconcentratord/Cargo.toml
++++ b/libconcentratord/Cargo.toml
+@@ -9,7 +9,7 @@ publish = false
+ log = "0.4"
+ zmq = "0.9"
+ lazy_static = "1.4"
+-chirpstack_api = { version = "3.9", default-features = false }
++chirpstack_api = { version = "3.11.1", default-features = false }
+ uuid = { version = "0.8", features = ["v4"] }
+ prost = "0.8"
+ prost-types = "0.8"
+diff --git a/libconcentratord/src/stats.rs b/libconcentratord/src/stats.rs
+index 6d1cced..b84fd3b 100644
+--- a/libconcentratord/src/stats.rs
++++ b/libconcentratord/src/stats.rs
+@@ -10,24 +10,133 @@ lazy_static! {
+     static ref STATS: Mutex<chirpstack_api::gw::GatewayStats> = Mutex::new(Default::default());
+ }
+ 
+-pub fn inc_rx_packets_received() {
++pub fn inc_rx_counts(pl: &chirpstack_api::gw::UplinkFrame) {
+     let mut stats = STATS.lock().unwrap();
+-    stats.rx_packets_received += 1;
++    stats.rx_packets_received_ok += 1;
++
++    match &pl.tx_info {
++        Some(tx_info) => {
++            stats
++                .rx_packets_per_frequency
++                .entry(tx_info.frequency)
++                .and_modify(|v| *v += 1)
++                .or_insert(1);
++
++            match &tx_info.modulation_info {
++                Some(mod_info) => {
++                    let modulation = Some(chirpstack_api::gw::Modulation {
++                        parameters: Some(match &mod_info {
++                        chirpstack_api::gw::uplink_tx_info::ModulationInfo::LoraModulationInfo(
++                            v,
++                        ) => chirpstack_api::gw::modulation::Parameters::Lora(v.clone()),
++                        chirpstack_api::gw::uplink_tx_info::ModulationInfo::FskModulationInfo(
++                            v,
++                        ) => chirpstack_api::gw::modulation::Parameters::Fsk(v.clone()),
++                        chirpstack_api::gw::uplink_tx_info::ModulationInfo::LrFhssModulationInfo(
++                            v,
++                        ) => chirpstack_api::gw::modulation::Parameters::LrFhss(v.clone()),
++                    })});
++
++                    let mut found = false;
++                    for mod_count in &mut stats.rx_packets_per_modulation {
++                        if mod_count.modulation == modulation {
++                            mod_count.count += 1;
++                            found = true;
++                        }
++                    }
++
++                    if !found {
++                        stats.rx_packets_per_modulation.push(
++                            chirpstack_api::gw::PerModulationCount {
++                                modulation: modulation,
++                                count: 1,
++                            },
++                        );
++                    }
++                }
++                None => {}
++            };
++        }
++        None => {}
++    };
+ }
+ 
+-pub fn inc_rx_packets_received_ok() {
++pub fn inc_tx_counts(tx_info: &chirpstack_api::gw::DownlinkTxInfo) {
+     let mut stats = STATS.lock().unwrap();
+-    stats.rx_packets_received_ok += 1;
++    stats.tx_packets_emitted += 1;
++
++    stats
++        .tx_packets_per_frequency
++        .entry(tx_info.frequency)
++        .and_modify(|v| *v += 1)
++        .or_insert(1);
++
++    match &tx_info.modulation_info {
++        Some(mod_info) => {
++            let modulation = Some(chirpstack_api::gw::Modulation {
++                parameters: Some(match &mod_info {
++                    chirpstack_api::gw::downlink_tx_info::ModulationInfo::LoraModulationInfo(v) => {
++                        chirpstack_api::gw::modulation::Parameters::Lora(v.clone())
++                    }
++                    chirpstack_api::gw::downlink_tx_info::ModulationInfo::FskModulationInfo(v) => {
++                        chirpstack_api::gw::modulation::Parameters::Fsk(v.clone())
++                    }
++                }),
++            });
++
++            let mut found = false;
++            for mod_count in &mut stats.tx_packets_per_modulation {
++                if mod_count.modulation == modulation {
++                    mod_count.count += 1;
++                    found = true;
++                }
++            }
++
++            if !found {
++                stats
++                    .tx_packets_per_modulation
++                    .push(chirpstack_api::gw::PerModulationCount {
++                        modulation: modulation,
++                        count: 1,
++                    });
++            }
++        }
++        None => {}
++    };
+ }
+ 
+-pub fn inc_tx_packets_received() {
++pub fn inc_tx_status_count(status: chirpstack_api::gw::TxAckStatus) {
++    let s = match status {
++        chirpstack_api::gw::TxAckStatus::Ignored => "IGNORED",
++        chirpstack_api::gw::TxAckStatus::Ok => "OK",
++        chirpstack_api::gw::TxAckStatus::TooLate => "TOO_LATE",
++        chirpstack_api::gw::TxAckStatus::TooEarly => "TOO_EARLY",
++        chirpstack_api::gw::TxAckStatus::CollisionPacket => "COLLISION_PACKET",
++        chirpstack_api::gw::TxAckStatus::CollisionBeacon => "COLLISION_BEACON",
++        chirpstack_api::gw::TxAckStatus::TxFreq => "TX_FREQ",
++        chirpstack_api::gw::TxAckStatus::TxPower => "TX_POWER",
++        chirpstack_api::gw::TxAckStatus::GpsUnlocked => "GPS_UNLOCKED",
++        chirpstack_api::gw::TxAckStatus::QueueFull => "QUEUE_FULL",
++        chirpstack_api::gw::TxAckStatus::InternalError => "InternalError",
++    }
++    .to_string();
++
+     let mut stats = STATS.lock().unwrap();
+-    stats.tx_packets_received += 1;
++    stats
++        .tx_packets_per_status
++        .entry(s)
++        .and_modify(|v| *v += 1)
++        .or_insert(1);
+ }
+ 
+-pub fn inc_tx_packets_emitted() {
++pub fn inc_rx_packets_received() {
+     let mut stats = STATS.lock().unwrap();
+-    stats.tx_packets_emitted += 1;
++    stats.rx_packets_received += 1;
++}
++
++pub fn inc_tx_packets_received() {
++    let mut stats = STATS.lock().unwrap();
++    stats.tx_packets_received += 1;
+ }
+ 
+ pub fn send_and_reset(
+diff --git a/libloragw-2g4/src/hal.rs b/libloragw-2g4/src/hal.rs
+index 513dca4..595cb65 100644
+--- a/libloragw-2g4/src/hal.rs
++++ b/libloragw-2g4/src/hal.rs
+@@ -40,7 +40,7 @@ impl ConvertBandwidth for Bandwidth {
+     }
+ }
+ 
+-#[derive(Debug, Copy, Clone)]
++#[derive(Debug, Copy, Clone, PartialEq)]
+ pub enum CRC {
+     Undefined,
+     NoCRC,
+diff --git a/libloragw-sx1301/src/hal.rs b/libloragw-sx1301/src/hal.rs
+index f563dd6..c135708 100644
+--- a/libloragw-sx1301/src/hal.rs
++++ b/libloragw-sx1301/src/hal.rs
+@@ -61,7 +61,7 @@ impl RadioType {
+     }
+ }
+ 
+-#[derive(Debug, Copy, Clone)]
++#[derive(Debug, Copy, Clone, PartialEq)]
+ pub enum CRC {
+     Undefined,
+     NoCRC,
+diff --git a/libloragw-sx1302/src/hal.rs b/libloragw-sx1302/src/hal.rs
+index 80c9c11..c085713 100644
+--- a/libloragw-sx1302/src/hal.rs
++++ b/libloragw-sx1302/src/hal.rs
+@@ -60,7 +60,7 @@ impl RadioType {
+     }
+ }
+ 
+-#[derive(Debug, Copy, Clone)]
++#[derive(Debug, Copy, Clone, PartialEq)]
+ pub enum CRC {
+     Undefined,
+     NoCRC,
+-- 
+2.25.1
+
diff --git a/0010-Remove-Class-B-beacon-frequency-correction.patch b/0010-Remove-Class-B-beacon-frequency-correction.patch
new file mode 100644
index 0000000..e0fadc9
--- /dev/null
+++ b/0010-Remove-Class-B-beacon-frequency-correction.patch
@@ -0,0 +1,68 @@
+From 97c727d5e4cb846b5873cb70c4bf8b3bdd66ff13 Mon Sep 17 00:00:00 2001
+From: Orne Brocaar <info@brocaar.com>
+Date: Tue, 31 Aug 2021 13:28:07 +0100
+Subject: [PATCH 10/10] Remove Class-B beacon frequency correction.
+
+This was copied over from the Semtech UDP Packet Forwarder, but should
+have been implemented on dequeue instead of enqueue, as the enqueue is
+happening in the future. For now this is removed, as it might need
+further research if this logic is needed or not. It is present in the
+Semtech UDP Packet Forwarder, but I could not find the same logic in the
+Basics Station.
+
+If this is needed, it must be implemented on dequeue, to make sure that
+we compensate the frequency with the xtal_correct value as close to the
+actual transmission as possible.
+
+For now this is removed as on sending the downlink, the Concentratord
+aggregates the downlink count on frequency. Before this change it would
+generate a many different frequencies as the xtal_correct value is
+variable.
+---
+ chirpstack-concentratord-sx1301/src/handler/beacon.rs | 7 +------
+ chirpstack-concentratord-sx1301/src/handler/gps.rs    | 8 --------
+ 2 files changed, 1 insertion(+), 14 deletions(-)
+
+diff --git a/chirpstack-concentratord-sx1301/src/handler/beacon.rs b/chirpstack-concentratord-sx1301/src/handler/beacon.rs
+index 1e48854..cc6a631 100644
+--- a/chirpstack-concentratord-sx1301/src/handler/beacon.rs
++++ b/chirpstack-concentratord-sx1301/src/handler/beacon.rs
+@@ -82,15 +82,10 @@ fn send_beacon(
+     beacon_pl.resize(data.len(), 0);
+     data.copy_from_slice(&beacon_pl);
+ 
+-    let xtal_correct = match gps::get_xtal_correct() {
+-        Ok(v) => v,
+-        Err(err) => return Err(err),
+-    };
+-
+     let tx_freq = conf.frequencies
+         [((beacon_time.as_secs() % (1 << 32)) % conf.frequencies.len() as u64) as usize];
+     let tx_packet = hal::TxPacket {
+-        freq_hz: (tx_freq as f64 * xtal_correct) as u32,
++        freq_hz: tx_freq,
+         tx_mode: hal::TxMode::OnGPS,
+         count_us: match gps::epoch2cnt(&beacon_time) {
+             Ok(v) => v,
+diff --git a/chirpstack-concentratord-sx1301/src/handler/gps.rs b/chirpstack-concentratord-sx1301/src/handler/gps.rs
+index 1bb20dc..cdb0093 100644
+--- a/chirpstack-concentratord-sx1301/src/handler/gps.rs
++++ b/chirpstack-concentratord-sx1301/src/handler/gps.rs
+@@ -265,14 +265,6 @@ pub fn get_gps_epoch() -> Result<Duration, String> {
+     return Ok(GPS_TIME_REF.lock().unwrap().gps_epoch);
+ }
+ 
+-pub fn get_xtal_correct() -> Result<f64, String> {
+-    if *XTAL_CORRECT_OK.lock().unwrap() == false {
+-        return Err("no valid xtal correction value available yet".to_string());
+-    }
+-
+-    return Ok(*XTAL_CORRECT.lock().unwrap());
+-}
+-
+ fn gps_process_sync() {
+     let (gps_time, gps_epoch, _, _) = match gps::get(true, false) {
+         Ok(v) => v,
+-- 
+2.25.1
+
diff --git a/Dockerfile-devel b/Dockerfile-devel
index 657525f..ba7828a 100644
--- a/Dockerfile-devel
+++ b/Dockerfile-devel
@@ -12,16 +12,21 @@ RUN apt-get update && \
 		g++-arm-linux-gnueabi \
 		gcc-arm-linux-gnueabihf \
 		g++-arm-linux-gnueabihf \
+		gcc-aarch64-linux-gnu \
+		g++-aarch64-linux-gnu \
 		git && \
 	apt-get clean
 
 RUN rustup target add armv5te-unknown-linux-gnueabi
 RUN rustup target add arm-unknown-linux-gnueabihf
+RUN rustup target add aarch64-unknown-linux-gnu
 
 RUN echo '[target.armv5te-unknown-linux-gnueabi]\n\
 linker = "arm-linux-gnueabi-gcc"\n\
 [target.arm-unknown-linux-gnueabihf]\n\
-linker = "arm-linux-gnueabihf-gcc"\n'\
+linker = "arm-linux-gnueabihf-gcc"\n\
+[target.aarch64-unknown-linux-gnu]\n\
+linker = "aarch64-linux-gnu-gcc"\n'\
 >> /usr/local/cargo/config
 
 RUN mkdir -p /tmp
@@ -62,6 +67,12 @@ RUN mkdir -p /hal/armv7hf && \
 	git clone https://github.com/brocaar/sx1302_hal.git -b V2.1.0r1 && \
 	git clone https://github.com/Lora-net/gateway_2g4_hal.git -b V1.1.0
 
+RUN mkdir -p /hal/aarch64 && \
+	cd /hal/aarch64 && \
+	git clone https://github.com/brocaar/lora_gateway.git -b v5.0.1r2 && \
+	git clone https://github.com/brocaar/sx1302_hal.git -b V2.1.0r1 && \
+	git clone https://github.com/Lora-net/gateway_2g4_hal.git -b V1.1.0
+
 # Needed for RAK shields, works with other shields too
 # RUN sed -i 's/define SPI_SPEED.*/define SPI_SPEED 2000000/g' /hal/armv5/lora_gateway/libloragw/src/loragw_spi.native.c
 # RUN sed -i 's/define SPI_SPEED.*/define SPI_SPEED 2000000/g' /hal/armv7hf/lora_gateway/libloragw/src/loragw_spi.native.c
@@ -100,6 +111,22 @@ RUN cd /hal/armv7hf/gateway_2g4_hal && \
 	ln -s /hal/armv7hf/gateway_2g4_hal/libloragw/inc /usr/arm-linux-gnueabihf/include/libloragw-2g4 && \
 	ln -s /hal/armv7hf/gateway_2g4_hal/libloragw/libloragw.a /usr/arm-linux-gnueabihf/lib/libloragw-2g4.a
 
+RUN cd /hal/aarch64/lora_gateway && \
+	ARCH=arm CROSS_COMPILE=aarch64-linux-gnu- make && \
+	ln -s /hal/aarch64/lora_gateway/libloragw/inc /usr/aarch64-linux-gnu/include/libloragw-sx1301 && \
+	ln -s /hal/aarch64/lora_gateway/libloragw/libloragw.a /usr/aarch64-linux-gnu/lib/libloragw-sx1301.a
+
+RUN cd /hal/aarch64/sx1302_hal && \
+	ARCH=arm CROSS_COMPILE=aarch64-linux-gnu- make && \
+	ln -s /hal/aarch64/sx1302_hal/libloragw/inc /usr/aarch64-linux-gnu/include/libloragw-sx1302 && \
+	ln -s /hal/aarch64/sx1302_hal/libloragw/libloragw.a /usr/aarch64-linux-gnu/lib/libloragw-sx1302.a && \
+	cp /hal/aarch64/sx1302_hal/libtools/inc/* /usr/aarch64-linux-gnu/include && \
+	cp /hal/aarch64/sx1302_hal/libtools/*.a /usr/aarch64-linux-gnu/lib
+
+RUN cd /hal/aarch64/gateway_2g4_hal && \
+	ARCH=arm CROSS_COMPILE=aarch64-linux-gnu- make && \
+	ln -s /hal/aarch64/gateway_2g4_hal/libloragw/inc /usr/aarch64-linux-gnu/include/libloragw-2g4 && \
+	ln -s /hal/aarch64/gateway_2g4_hal/libloragw/libloragw.a /usr/aarch64-linux-gnu/lib/libloragw-2g4.a
 
 ENV LLVM_CONFIG_PATH=llvm-config-3.9
 ENV PROJECT_PATH=/chirpstack-concentratord
diff --git a/Makefile b/Makefile
index 7f0c2af..3bdcf55 100644
--- a/Makefile
+++ b/Makefile
@@ -1,4 +1,6 @@
 VERSION ?= $(shell git describe --always |sed -e "s/^v//")
+PATH  := $(PATH):$(PWD)/bin:/usr/local/bin
+SHELL := env PATH=$(PATH) /bin/bash
 
 build: version build-armv5-release build-armv7hf-release
 
@@ -31,6 +33,12 @@ build-armv7hf-debug:
 build-armv7hf-release:
 	docker-compose run -e BINDGEN_EXTRA_CLANG_ARGS="--sysroot=/usr/arm-linux-gnueabihf" --rm chirpstack-concentratord cargo build --target arm-unknown-linux-gnueabihf --release
 
+build-aarch64-debug:
+	docker-compose run -e BINDGEN_EXTRA_CLANG_ARGS="--sysroot=/usr/aarch64-linux-gnu" --rm chirpstack-concentratord cargo build --target aarch64-unknown-linux-gnu
+
+build-aarch64-release:
+	docker-compose run -e BINDGEN_EXTRA_CLANG_ARGS="--sysroot=/usr/aarch64-linux-gnu" --rm chirpstack-concentratord cargo build --target aarch64-unknown-linux-gnu --release
+
 package-multitech: package-multitech-conduit package-multitech-conduit-ap
 
 package-kerlink: package-kerlink-ifemtocell
diff --git a/chirpstack-concentratord-2g4/Cargo.toml b/chirpstack-concentratord-2g4/Cargo.toml
index 7c45e8e..8d4592a 100644
--- a/chirpstack-concentratord-2g4/Cargo.toml
+++ b/chirpstack-concentratord-2g4/Cargo.toml
@@ -1,6 +1,6 @@
 [package]
 name = "chirpstack-concentratord-2g4"
-version = "3.2.0"
+version = "3.3.0"
 authors = ["Orne Brocaar <info@brocaar.com>"]
 edition = "2018"
 publish = false
diff --git a/chirpstack-concentratord-sx1301/Cargo.toml b/chirpstack-concentratord-sx1301/Cargo.toml
index aabc3fe..cb17d84 100644
--- a/chirpstack-concentratord-sx1301/Cargo.toml
+++ b/chirpstack-concentratord-sx1301/Cargo.toml
@@ -1,6 +1,6 @@
 [package]
 name = "chirpstack-concentratord-sx1301"
-version = "3.2.0"
+version = "3.3.0"
 authors = ["Orne Brocaar <info@brocaar.com>"]
 edition = "2018"
 publish = false
diff --git a/chirpstack-concentratord-sx1302/Cargo.toml b/chirpstack-concentratord-sx1302/Cargo.toml
index 9e9d9de..a65ab9c 100644
--- a/chirpstack-concentratord-sx1302/Cargo.toml
+++ b/chirpstack-concentratord-sx1302/Cargo.toml
@@ -1,6 +1,6 @@
 [package]
 name = "chirpstack-concentratord-sx1302"
-version = "3.2.0"
+version = "3.3.0"
 authors = ["Orne Brocaar <info@brocaar.com>"]
 edition = "2018"
 publish = false
diff --git a/gateway-id/Cargo.toml b/gateway-id/Cargo.toml
index 367b605..43b6470 100644
--- a/gateway-id/Cargo.toml
+++ b/gateway-id/Cargo.toml
@@ -1,6 +1,6 @@
 [package]
 name = "gateway-id"
-version = "3.2.0"
+version = "3.3.0"
 authors = ["Orne Brocaar <info@brocaar.com>"]
 edition = "2018"
 publish = false
-- 
2.25.1

